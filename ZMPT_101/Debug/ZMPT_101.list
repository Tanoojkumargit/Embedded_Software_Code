
ZMPT_101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005050  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005220  08005220  00015220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c8  080052c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d0  080052d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d0  080052d0  000152d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000070  08005348  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08005348  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e15  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8f  00000000  00000000  00029ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002bb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000636  00000000  00000000  0002c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c21  00000000  00000000  0002c9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf02  00000000  00000000  0004f60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5978  00000000  00000000  0005c511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029d4  00000000  00000000  00131e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00134860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005208 	.word	0x08005208

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005208 	.word	0x08005208

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000f88:	4a22      	ldr	r2, [pc, #136]	; (8001014 <MX_ADC1_Init+0xa0>)
 8000f8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;  // Set resolution to 8-bit
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <MX_ADC1_Init+0xa4>)
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000fd8:	f000 fcd6 	bl	8001988 <HAL_ADC_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fe2:	f000 faff 	bl	80015e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;  // PC1 is connected to ADC1_IN11
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_ADC1_Init+0x9c>)
 8000ff8:	f000 fe74 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001002:	f000 faef 	bl	80015e4 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000008c 	.word	0x2000008c
 8001014:	40012000 	.word	0x40012000
 8001018:	0f000001 	.word	0x0f000001

0800101c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_ADC_MspInit+0x7c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d127      	bne.n	800108e <HAL_ADC_MspInit+0x72>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_ADC_MspInit+0x80>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_ADC_MspInit+0x80>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001076:	2302      	movs	r3, #2
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_ADC_MspInit+0x84>)
 800108a:	f001 f93f 	bl	800230c <HAL_GPIO_Init>
  }
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40012000 	.word	0x40012000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020800 	.word	0x40020800

080010a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a2c      	ldr	r2, [pc, #176]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a25      	ldr	r2, [pc, #148]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	4812      	ldr	r0, [pc, #72]	; (8001178 <MX_GPIO_Init+0xd4>)
 8001130:	f001 fa80 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <MX_GPIO_Init+0xd8>)
 800114c:	f001 f8de 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001150:	2320      	movs	r3, #32
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_GPIO_Init+0xd4>)
 8001168:	f001 f8d0 	bl	800230c <HAL_GPIO_Init>

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020800 	.word	0x40020800

08001180 <Read_ADC>:
int _write(int file, char *data, int len) {
  HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
  return len;
}

uint32_t Read_ADC(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <Read_ADC+0x2c>)
 8001186:	f000 fc43 	bl	8001a10 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800118a:	f04f 31ff 	mov.w	r1, #4294967295
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <Read_ADC+0x2c>)
 8001190:	f000 fd10 	bl	8001bb4 <HAL_ADC_PollForConversion>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d104      	bne.n	80011a4 <Read_ADC+0x24>
    return HAL_ADC_GetValue(&hadc1);
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <Read_ADC+0x2c>)
 800119c:	f000 fd95 	bl	8001cca <HAL_ADC_GetValue>
 80011a0:	4603      	mov	r3, r0
 80011a2:	e000      	b.n	80011a6 <Read_ADC+0x26>
  }
  return 0;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000008c 	.word	0x2000008c

080011b0 <sort_array>:

void sort_array(uint32_t* data, int size) {
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < size - 1; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e034      	b.n	800122a <sort_array+0x7a>
    for (int j = 0; j < size - i - 1; j++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	e027      	b.n	8001216 <sort_array+0x66>
      if (data[j] > data[j + 1]) {
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	3301      	adds	r3, #1
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	440b      	add	r3, r1
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d917      	bls.n	8001210 <sort_array+0x60>
        uint32_t temp = data[j];
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	60fb      	str	r3, [r7, #12]
        data[j] = data[j + 1];
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	3301      	adds	r3, #1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	441a      	add	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	440b      	add	r3, r1
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	601a      	str	r2, [r3, #0]
        data[j + 1] = temp;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	3301      	adds	r3, #1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < size - i - 1; j++) {
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	3301      	adds	r3, #1
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	3b01      	subs	r3, #1
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbd0      	blt.n	80011c6 <sort_array+0x16>
  for (int i = 0; i < size - 1; i++) {
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbc5      	blt.n	80011c0 <sort_array+0x10>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <median_filter>:

float median_filter(uint32_t* data, int size) {
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  sort_array(data, size);
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffae 	bl	80011b0 <sort_array>
  if (size % 2 == 0) {
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d125      	bne.n	80012aa <median_filter+0x68>
    return (data[size / 2 - 1] + data[size / 2]) / 2.0;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	0fda      	lsrs	r2, r3, #31
 8001262:	4413      	add	r3, r2
 8001264:	105b      	asrs	r3, r3, #1
 8001266:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800126a:	3b01      	subs	r3, #1
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	0fd9      	lsrs	r1, r3, #31
 8001278:	440b      	add	r3, r1
 800127a:	105b      	asrs	r3, r3, #1
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	440b      	add	r3, r1
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4413      	add	r3, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f954 	bl	8000534 <__aeabi_ui2d>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001294:	f7ff faf2 	bl	800087c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fc9a 	bl	8000bd8 <__aeabi_d2f>
 80012a4:	ee07 0a90 	vmov	s15, r0
 80012a8:	e00b      	b.n	80012c2 <median_filter+0x80>
  } else {
    return data[size / 2];
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	0fda      	lsrs	r2, r3, #31
 80012ae:	4413      	add	r3, r2
 80012b0:	105b      	asrs	r3, r3, #1
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
  }
}
 80012c2:	eeb0 0a67 	vmov.f32	s0, s15
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <running_average_filter>:

float running_average_filter(uint32_t* data, int size) {
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t sum = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	e00a      	b.n	80012f6 <running_average_filter+0x2a>
    sum += data[i];
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbf0      	blt.n	80012e0 <running_average_filter+0x14>
  }
  return sum / (float)size;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001316:	eef0 7a66 	vmov.f32	s15, s13
}
 800131a:	eeb0 0a67 	vmov.f32	s0, s15
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <Convert_ADC_to_Voltage>:

float Convert_ADC_to_Voltage(uint32_t adc_value) {
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  float voltage = 0.0;
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]

  if (adc_value > ADC_ZERO_VOLT) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2bc4      	cmp	r3, #196	; 0xc4
 800133a:	d903      	bls.n	8001344 <Convert_ADC_to_Voltage+0x1c>
    voltage = 0.0;
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	e016      	b.n	8001372 <Convert_ADC_to_Voltage+0x4a>
  } else if (adc_value < ADC_MAX_VOLT) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2ba9      	cmp	r3, #169	; 0xa9
 8001348:	d802      	bhi.n	8001350 <Convert_ADC_to_Voltage+0x28>
    voltage = 250.0;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <Convert_ADC_to_Voltage+0x60>)
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e010      	b.n	8001372 <Convert_ADC_to_Voltage+0x4a>
  } else {
    voltage = 250.0 * ((float)(ADC_ZERO_VOLT - adc_value) / (ADC_ZERO_VOLT - ADC_MAX_VOLT));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f1c3 03c4 	rsb	r3, r3, #196	; 0xc4
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800135e:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 8001362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001366:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800138c <Convert_ADC_to_Voltage+0x64>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  return voltage;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	ee07 3a90 	vmov	s15, r3
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	437a0000 	.word	0x437a0000
 800138c:	437a0000 	.word	0x437a0000

08001390 <FloatToString>:

void FloatToString(char* buffer, float value, int decimalPlaces) {
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af02      	add	r7, sp, #8
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	ed87 0a02 	vstr	s0, [r7, #8]
 800139c:	6079      	str	r1, [r7, #4]
  int integerPart = (int)value;
 800139e:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a6:	ee17 3a90 	vmov	r3, s15
 80013aa:	617b      	str	r3, [r7, #20]
  int fractionPart = (int)((value - integerPart) * pow(10, decimalPlaces));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80013ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013be:	ee17 0a90 	vmov	r0, s15
 80013c2:	f7ff f8d9 	bl	8000578 <__aeabi_f2d>
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff f8c2 	bl	8000554 <__aeabi_i2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	ec43 2b11 	vmov	d1, r2, r3
 80013d8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001420 <FloatToString+0x90>
 80013dc:	f002 ffdc 	bl	8004398 <pow>
 80013e0:	ec53 2b10 	vmov	r2, r3, d0
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7ff f91e 	bl	8000628 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fbc8 	bl	8000b88 <__aeabi_d2iz>
 80013f8:	4603      	mov	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]
  sprintf(buffer, "%d.%0*d", integerPart, decimalPlaces, abs(fractionPart));
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bfb8      	it	lt
 8001402:	425b      	neglt	r3, r3
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4907      	ldr	r1, [pc, #28]	; (8001428 <FloatToString+0x98>)
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f002 fb1f 	bl	8003a50 <siprintf>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bdb0      	pop	{r4, r5, r7, pc}
 800141a:	bf00      	nop
 800141c:	f3af 8000 	nop.w
 8001420:	00000000 	.word	0x00000000
 8001424:	40240000 	.word	0x40240000
 8001428:	08005220 	.word	0x08005220

0800142c <main>:

int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
 8001432:	af00      	add	r7, sp, #0
  HAL_Init();
 8001434:	f000 fa12 	bl	800185c <HAL_Init>
  SystemClock_Config();
 8001438:	f000 f866 	bl	8001508 <SystemClock_Config>
  MX_GPIO_Init();
 800143c:	f7ff fe32 	bl	80010a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001440:	f7ff fd98 	bl	8000f74 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001444:	f000 f96e 	bl	8001724 <MX_USART2_UART_Init>
  float voltage;
  char voltage_str[20];

  while (1)
  {
    for (int i = 0; i < SAMPLES_COUNT; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800144e:	e012      	b.n	8001476 <main+0x4a>
      adc_values[i] = Read_ADC();
 8001450:	f7ff fe96 	bl	8001180 <Read_ADC>
 8001454:	4601      	mov	r1, r0
 8001456:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800145a:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800145e:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8001462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      HAL_Delay(10); // Small delay between samples to avoid rapid fluctuation
 8001466:	200a      	movs	r0, #10
 8001468:	f000 fa6a 	bl	8001940 <HAL_Delay>
    for (int i = 0; i < SAMPLES_COUNT; i++) {
 800146c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001470:	3301      	adds	r3, #1
 8001472:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8001476:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800147a:	2bc7      	cmp	r3, #199	; 0xc7
 800147c:	dde8      	ble.n	8001450 <main+0x24>
    }

    // Apply median filter to remove outliers
    adc_value = (uint32_t)median_filter(adc_values, SAMPLES_COUNT);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	21c8      	movs	r1, #200	; 0xc8
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fedc 	bl	8001242 <median_filter>
 800148a:	eef0 7a40 	vmov.f32	s15, s0
 800148e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001492:	ee17 3a90 	vmov	r3, s15
 8001496:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
    // Apply running average filter to smooth the result
    adc_value = (uint32_t)running_average_filter(adc_values, SAMPLES_COUNT);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	21c8      	movs	r1, #200	; 0xc8
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff13 	bl	80012cc <running_average_filter>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
 80014aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

    voltage = Convert_ADC_to_Voltage(adc_value);
 80014b6:	f8d7 03a0 	ldr.w	r0, [r7, #928]	; 0x3a0
 80014ba:	f7ff ff35 	bl	8001328 <Convert_ADC_to_Voltage>
 80014be:	ed87 0ae7 	vstr	s0, [r7, #924]	; 0x39c

    // Convert float to string
    FloatToString(voltage_str, voltage, 2);
 80014c2:	463b      	mov	r3, r7
 80014c4:	2102      	movs	r1, #2
 80014c6:	ed97 0ae7 	vldr	s0, [r7, #924]	; 0x39c
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff60 	bl	8001390 <FloatToString>

    // Print the voltage and ADC value
    uart_buf_len = sprintf(uart_buf, "ADC Value: %lu, Voltage: %sV\r\n", adc_value, voltage_str);
 80014d0:	463b      	mov	r3, r7
 80014d2:	f507 704d 	add.w	r0, r7, #820	; 0x334
 80014d6:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80014da:	4909      	ldr	r1, [pc, #36]	; (8001500 <main+0xd4>)
 80014dc:	f002 fab8 	bl	8003a50 <siprintf>
 80014e0:	f8c7 0398 	str.w	r0, [r7, #920]	; 0x398
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 80014e4:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	f507 714d 	add.w	r1, r7, #820	; 0x334
 80014ee:	2364      	movs	r3, #100	; 0x64
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <main+0xd8>)
 80014f2:	f001 fef1 	bl	80032d8 <HAL_UART_Transmit>

    HAL_Delay(1000);  // 1 second delay
 80014f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fa:	f000 fa21 	bl	8001940 <HAL_Delay>
    for (int i = 0; i < SAMPLES_COUNT; i++) {
 80014fe:	e7a3      	b.n	8001448 <main+0x1c>
 8001500:	08005228 	.word	0x08005228
 8001504:	200000d8 	.word	0x200000d8

08001508 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	2234      	movs	r2, #52	; 0x34
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f002 faba 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <SystemClock_Config+0xd4>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a29      	ldr	r2, [pc, #164]	; (80015dc <SystemClock_Config+0xd4>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <SystemClock_Config+0xd4>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <SystemClock_Config+0xd8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001554:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <SystemClock_Config+0xd8>)
 8001556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <SystemClock_Config+0xd8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	683b      	ldr	r3, [r7, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001568:	2302      	movs	r3, #2
 800156a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001570:	2310      	movs	r3, #16
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001574:	2302      	movs	r3, #2
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001578:	2300      	movs	r3, #0
 800157a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800157c:	2310      	movs	r3, #16
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001584:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001586:	2304      	movs	r3, #4
 8001588:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800158a:	2302      	movs	r3, #2
 800158c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800158e:	2302      	movs	r3, #2
 8001590:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fbb0 	bl	8002cfc <HAL_RCC_OscConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015a2:	f000 f81f 	bl	80015e4 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a6:	230f      	movs	r3, #15
 80015a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015aa:	2302      	movs	r3, #2
 80015ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	2102      	movs	r1, #2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f850 	bl	8002668 <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80015ce:	f000 f809 	bl	80015e4 <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	3750      	adds	r7, #80	; 0x50
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <Error_Handler>:

void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800162e:	2007      	movs	r0, #7
 8001630:	f000 fe38 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 f938 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c4:	f002 f9ec 	bl	8003aa0 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e009      	b.n	80016e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <_sbrk+0x64>)
 80016e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20020000 	.word	0x20020000
 80016f4:	00000400 	.word	0x00000400
 80016f8:	200000d4 	.word	0x200000d4
 80016fc:	20000270 	.word	0x20000270

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_USART2_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800175c:	f001 fd6c 	bl	8003238 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f7ff ff3d 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000d8 	.word	0x200000d8
 8001774:	40004400 	.word	0x40004400

08001778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_UART_MspInit+0x84>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d12b      	bne.n	80017f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017d2:	230c      	movs	r3, #12
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e2:	2307      	movs	r3, #7
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_UART_MspInit+0x8c>)
 80017ee:	f000 fd8d 	bl	800230c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40004400 	.word	0x40004400
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800180c:	f7ff ff78 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001836:	f002 f939 	bl	8003aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7ff fdf7 	bl	800142c <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800184c:	080052d8 	.word	0x080052d8
  ldr r2, =_sbss
 8001850:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001854:	2000026c 	.word	0x2000026c

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 fd0d 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff feae 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fd17 	bl	80022f2 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 fced 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008
 8001924:	20000120 	.word	0x20000120

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000120 	.word	0x20000120

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008

08001988 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e033      	b.n	8001a06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fb38 	bl	800101c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ce:	f023 0302 	bic.w	r3, r3, #2
 80019d2:	f043 0202 	orr.w	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fab4 	bl	8001f48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
 80019f6:	e001      	b.n	80019fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Start+0x1a>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e0b2      	b.n	8001b90 <HAL_ADC_Start+0x180>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d018      	beq.n	8001a72 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a50:	4b52      	ldr	r3, [pc, #328]	; (8001b9c <HAL_ADC_Start+0x18c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <HAL_ADC_Start+0x190>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0c9a      	lsrs	r2, r3, #18
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a64:	e002      	b.n	8001a6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f9      	bne.n	8001a66 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d17a      	bne.n	8001b76 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001abe:	d106      	bne.n	8001ace <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	f023 0206 	bic.w	r2, r3, #6
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	645a      	str	r2, [r3, #68]	; 0x44
 8001acc:	e002      	b.n	8001ad4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_ADC_Start+0x194>)
 8001ade:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d12a      	bne.n	8001b4c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <HAL_ADC_Start+0x198>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d015      	beq.n	8001b2c <HAL_ADC_Start+0x11c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a29      	ldr	r2, [pc, #164]	; (8001bac <HAL_ADC_Start+0x19c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d105      	bne.n	8001b16 <HAL_ADC_Start+0x106>
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_ADC_Start+0x194>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <HAL_ADC_Start+0x1a0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d136      	bne.n	8001b8e <HAL_ADC_Start+0x17e>
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_ADC_Start+0x194>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d130      	bne.n	8001b8e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d129      	bne.n	8001b8e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	e020      	b.n	8001b8e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <HAL_ADC_Start+0x198>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d11b      	bne.n	8001b8e <HAL_ADC_Start+0x17e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d114      	bne.n	8001b8e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e00b      	b.n	8001b8e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f043 0210 	orr.w	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	431bde83 	.word	0x431bde83
 8001ba4:	40012300 	.word	0x40012300
 8001ba8:	40012000 	.word	0x40012000
 8001bac:	40012100 	.word	0x40012100
 8001bb0:	40012200 	.word	0x40012200

08001bb4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd0:	d113      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be0:	d10b      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e063      	b.n	8001cc2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bfa:	f7ff fe95 	bl	8001928 <HAL_GetTick>
 8001bfe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c00:	e021      	b.n	8001c46 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d01d      	beq.n	8001c46 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_ADC_PollForConversion+0x6c>
 8001c10:	f7ff fe8a 	bl	8001928 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d212      	bcs.n	8001c46 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d00b      	beq.n	8001c46 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f043 0204 	orr.w	r2, r3, #4
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e03d      	b.n	8001cc2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d1d6      	bne.n	8001c02 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0212 	mvn.w	r2, #18
 8001c5c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d123      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d11f      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d111      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1c>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e113      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x244>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d925      	bls.n	8001d5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68d9      	ldr	r1, [r3, #12]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	3b1e      	subs	r3, #30
 8001d26:	2207      	movs	r2, #7
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	400a      	ands	r2, r1
 8001d34:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68d9      	ldr	r1, [r3, #12]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	4603      	mov	r3, r0
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4403      	add	r3, r0
 8001d4e:	3b1e      	subs	r3, #30
 8001d50:	409a      	lsls	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e022      	b.n	8001da2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	2207      	movs	r2, #7
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6919      	ldr	r1, [r3, #16]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4403      	add	r3, r0
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d824      	bhi.n	8001df4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	3b05      	subs	r3, #5
 8001dbc:	221f      	movs	r2, #31
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	400a      	ands	r2, r1
 8001dca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	3b05      	subs	r3, #5
 8001de6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34
 8001df2:	e04c      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d824      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b23      	subs	r3, #35	; 0x23
 8001e0e:	221f      	movs	r2, #31
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43da      	mvns	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b23      	subs	r3, #35	; 0x23
 8001e38:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
 8001e44:	e023      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	3b41      	subs	r3, #65	; 0x41
 8001e58:	221f      	movs	r2, #31
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	400a      	ands	r2, r1
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b41      	subs	r3, #65	; 0x41
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_ADC_ConfigChannel+0x250>)
 8001e90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a28      	ldr	r2, [pc, #160]	; (8001f38 <HAL_ADC_ConfigChannel+0x254>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10f      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1d8>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b12      	cmp	r3, #18
 8001ea2:	d10b      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_ADC_ConfigChannel+0x254>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12b      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x23a>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <HAL_ADC_ConfigChannel+0x258>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b11      	cmp	r3, #17
 8001ed6:	d122      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_ADC_ConfigChannel+0x258>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d111      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_ADC_ConfigChannel+0x25c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <HAL_ADC_ConfigChannel+0x260>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	0c9a      	lsrs	r2, r3, #18
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f10:	e002      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f9      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40012300 	.word	0x40012300
 8001f38:	40012000 	.word	0x40012000
 8001f3c:	10000012 	.word	0x10000012
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f50:	4b79      	ldr	r3, [pc, #484]	; (8002138 <ADC_Init+0x1f0>)
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	021a      	lsls	r2, r3, #8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6899      	ldr	r1, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	4a58      	ldr	r2, [pc, #352]	; (800213c <ADC_Init+0x1f4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6899      	ldr	r1, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e00f      	b.n	8002046 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002044:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0202 	bic.w	r2, r2, #2
 8002054:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6899      	ldr	r1, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7e1b      	ldrb	r3, [r3, #24]
 8002060:	005a      	lsls	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01b      	beq.n	80020ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002082:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002092:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	3b01      	subs	r3, #1
 80020a0:	035a      	lsls	r2, r3, #13
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	e007      	b.n	80020bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	051a      	lsls	r2, r3, #20
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020fe:	025a      	lsls	r2, r3, #9
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002116:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6899      	ldr	r1, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	029a      	lsls	r2, r3, #10
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40012300 	.word	0x40012300
 800213c:	0f000001 	.word	0x0f000001

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db0a      	blt.n	80021ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	490c      	ldr	r1, [pc, #48]	; (80021f0 <__NVIC_SetPriority+0x4c>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021cc:	e00a      	b.n	80021e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4908      	ldr	r1, [pc, #32]	; (80021f4 <__NVIC_SetPriority+0x50>)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	3b04      	subs	r3, #4
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	440b      	add	r3, r1
 80021e2:	761a      	strb	r2, [r3, #24]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f1c3 0307 	rsb	r3, r3, #7
 8002212:	2b04      	cmp	r3, #4
 8002214:	bf28      	it	cs
 8002216:	2304      	movcs	r3, #4
 8002218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3304      	adds	r3, #4
 800221e:	2b06      	cmp	r3, #6
 8002220:	d902      	bls.n	8002228 <NVIC_EncodePriority+0x30>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b03      	subs	r3, #3
 8002226:	e000      	b.n	800222a <NVIC_EncodePriority+0x32>
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	401a      	ands	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002240:	f04f 31ff 	mov.w	r1, #4294967295
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	43d9      	mvns	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	4313      	orrs	r3, r2
         );
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f7ff ff8e 	bl	80021a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff47 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff5c 	bl	8002188 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff8e 	bl	80021f8 <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5d 	bl	80021a4 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ffb0 	bl	8002260 <SysTick_Config>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	e165      	b.n	80025f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002328:	2201      	movs	r2, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	429a      	cmp	r2, r3
 8002342:	f040 8154 	bne.w	80025ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d005      	beq.n	800235e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235a:	2b02      	cmp	r3, #2
 800235c:	d130      	bne.n	80023c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002394:	2201      	movs	r2, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 0201 	and.w	r2, r3, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d017      	beq.n	80023fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d123      	bne.n	8002450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	220f      	movs	r2, #15
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	08da      	lsrs	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3208      	adds	r2, #8
 800244a:	69b9      	ldr	r1, [r7, #24]
 800244c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0203 	and.w	r2, r3, #3
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80ae 	beq.w	80025ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <HAL_GPIO_Init+0x300>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a5c      	ldr	r2, [pc, #368]	; (800260c <HAL_GPIO_Init+0x300>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b5a      	ldr	r3, [pc, #360]	; (800260c <HAL_GPIO_Init+0x300>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ae:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_GPIO_Init+0x304>)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	220f      	movs	r2, #15
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <HAL_GPIO_Init+0x308>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d025      	beq.n	8002526 <HAL_GPIO_Init+0x21a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_GPIO_Init+0x30c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01f      	beq.n	8002522 <HAL_GPIO_Init+0x216>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_GPIO_Init+0x310>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x212>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_GPIO_Init+0x314>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x20e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_GPIO_Init+0x318>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x20a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_GPIO_Init+0x31c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x206>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a49      	ldr	r2, [pc, #292]	; (800262c <HAL_GPIO_Init+0x320>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x202>
 800250a:	2306      	movs	r3, #6
 800250c:	e00c      	b.n	8002528 <HAL_GPIO_Init+0x21c>
 800250e:	2307      	movs	r3, #7
 8002510:	e00a      	b.n	8002528 <HAL_GPIO_Init+0x21c>
 8002512:	2305      	movs	r3, #5
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x21c>
 8002516:	2304      	movs	r3, #4
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x21c>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x21c>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x21c>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x21c>
 8002526:	2300      	movs	r3, #0
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002538:	4935      	ldr	r1, [pc, #212]	; (8002610 <HAL_GPIO_Init+0x304>)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b3a      	ldr	r3, [pc, #232]	; (8002630 <HAL_GPIO_Init+0x324>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a31      	ldr	r2, [pc, #196]	; (8002630 <HAL_GPIO_Init+0x324>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_GPIO_Init+0x324>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a26      	ldr	r2, [pc, #152]	; (8002630 <HAL_GPIO_Init+0x324>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259a:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_GPIO_Init+0x324>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_GPIO_Init+0x324>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_GPIO_Init+0x324>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e8:	4a11      	ldr	r2, [pc, #68]	; (8002630 <HAL_GPIO_Init+0x324>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	f67f ae96 	bls.w	8002328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	40013800 	.word	0x40013800
 8002614:	40020000 	.word	0x40020000
 8002618:	40020400 	.word	0x40020400
 800261c:	40020800 	.word	0x40020800
 8002620:	40020c00 	.word	0x40020c00
 8002624:	40021000 	.word	0x40021000
 8002628:	40021400 	.word	0x40021400
 800262c:	40021800 	.word	0x40021800
 8002630:	40013c00 	.word	0x40013c00

08002634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	041a      	lsls	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	619a      	str	r2, [r3, #24]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0cc      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b68      	ldr	r3, [pc, #416]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d90c      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b63      	ldr	r3, [pc, #396]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0b8      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026bc:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a58      	ldr	r2, [pc, #352]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d4:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a52      	ldr	r2, [pc, #328]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	494d      	ldr	r1, [pc, #308]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d044      	beq.n	8002788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d119      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e07f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d003      	beq.n	8002726 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002722:	2b03      	cmp	r3, #3
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e067      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4934      	ldr	r1, [pc, #208]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7ff f8e6 	bl	8001928 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7ff f8e2 	bl	8001928 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e04f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d20c      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e032      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4916      	ldr	r1, [pc, #88]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	490e      	ldr	r1, [pc, #56]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ee:	f000 f855 	bl	800289c <HAL_RCC_GetSysClockFreq>
 80027f2:	4602      	mov	r2, r0
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	490a      	ldr	r1, [pc, #40]	; (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	5ccb      	ldrb	r3, [r1, r3]
 8002802:	fa22 f303 	lsr.w	r3, r2, r3
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f846 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00
 8002824:	40023800 	.word	0x40023800
 8002828:	08005248 	.word	0x08005248
 800282c:	20000000 	.word	0x20000000
 8002830:	20000004 	.word	0x20000004

08002834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_RCC_GetHCLKFreq+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000000 	.word	0x20000000

0800284c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002850:	f7ff fff0 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	0a9b      	lsrs	r3, r3, #10
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4903      	ldr	r1, [pc, #12]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800
 8002870:	08005258 	.word	0x08005258

08002874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002878:	f7ff ffdc 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	0b5b      	lsrs	r3, r3, #13
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4903      	ldr	r1, [pc, #12]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800288a:	5ccb      	ldrb	r3, [r1, r3]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	08005258 	.word	0x08005258

0800289c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a0:	b0ae      	sub	sp, #184	; 0xb8
 80028a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c2:	4bcb      	ldr	r3, [pc, #812]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	f200 8206 	bhi.w	8002cdc <HAL_RCC_GetSysClockFreq+0x440>
 80028d0:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80028d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d6:	bf00      	nop
 80028d8:	0800290d 	.word	0x0800290d
 80028dc:	08002cdd 	.word	0x08002cdd
 80028e0:	08002cdd 	.word	0x08002cdd
 80028e4:	08002cdd 	.word	0x08002cdd
 80028e8:	08002915 	.word	0x08002915
 80028ec:	08002cdd 	.word	0x08002cdd
 80028f0:	08002cdd 	.word	0x08002cdd
 80028f4:	08002cdd 	.word	0x08002cdd
 80028f8:	0800291d 	.word	0x0800291d
 80028fc:	08002cdd 	.word	0x08002cdd
 8002900:	08002cdd 	.word	0x08002cdd
 8002904:	08002cdd 	.word	0x08002cdd
 8002908:	08002b0d 	.word	0x08002b0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4bb9      	ldr	r3, [pc, #740]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x358>)
 800290e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002912:	e1e7      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002914:	4bb8      	ldr	r3, [pc, #736]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800291a:	e1e3      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800291c:	4bb4      	ldr	r3, [pc, #720]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002928:	4bb1      	ldr	r3, [pc, #708]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d071      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002934:	4bae      	ldr	r3, [pc, #696]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002940:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800295a:	4622      	mov	r2, r4
 800295c:	462b      	mov	r3, r5
 800295e:	f04f 0000 	mov.w	r0, #0
 8002962:	f04f 0100 	mov.w	r1, #0
 8002966:	0159      	lsls	r1, r3, #5
 8002968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800296c:	0150      	lsls	r0, r2, #5
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4621      	mov	r1, r4
 8002974:	1a51      	subs	r1, r2, r1
 8002976:	6439      	str	r1, [r7, #64]	; 0x40
 8002978:	4629      	mov	r1, r5
 800297a:	eb63 0301 	sbc.w	r3, r3, r1
 800297e:	647b      	str	r3, [r7, #68]	; 0x44
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800298c:	4649      	mov	r1, r9
 800298e:	018b      	lsls	r3, r1, #6
 8002990:	4641      	mov	r1, r8
 8002992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002996:	4641      	mov	r1, r8
 8002998:	018a      	lsls	r2, r1, #6
 800299a:	4641      	mov	r1, r8
 800299c:	1a51      	subs	r1, r2, r1
 800299e:	63b9      	str	r1, [r7, #56]	; 0x38
 80029a0:	4649      	mov	r1, r9
 80029a2:	eb63 0301 	sbc.w	r3, r3, r1
 80029a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80029b4:	4649      	mov	r1, r9
 80029b6:	00cb      	lsls	r3, r1, #3
 80029b8:	4641      	mov	r1, r8
 80029ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029be:	4641      	mov	r1, r8
 80029c0:	00ca      	lsls	r2, r1, #3
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	4622      	mov	r2, r4
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	633b      	str	r3, [r7, #48]	; 0x30
 80029ce:	462b      	mov	r3, r5
 80029d0:	460a      	mov	r2, r1
 80029d2:	eb42 0303 	adc.w	r3, r2, r3
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029e4:	4629      	mov	r1, r5
 80029e6:	024b      	lsls	r3, r1, #9
 80029e8:	4621      	mov	r1, r4
 80029ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029ee:	4621      	mov	r1, r4
 80029f0:	024a      	lsls	r2, r1, #9
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002a08:	f7fe f936 	bl	8000c78 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4613      	mov	r3, r2
 8002a12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a16:	e067      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a18:	4b75      	ldr	r3, [pc, #468]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a24:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a32:	2300      	movs	r3, #0
 8002a34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	f04f 0000 	mov.w	r0, #0
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	0159      	lsls	r1, r3, #5
 8002a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4c:	0150      	lsls	r0, r2, #5
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4621      	mov	r1, r4
 8002a54:	1a51      	subs	r1, r2, r1
 8002a56:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a58:	4629      	mov	r1, r5
 8002a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	018b      	lsls	r3, r1, #6
 8002a70:	4641      	mov	r1, r8
 8002a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a76:	4641      	mov	r1, r8
 8002a78:	018a      	lsls	r2, r1, #6
 8002a7a:	4641      	mov	r1, r8
 8002a7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a80:	4649      	mov	r1, r9
 8002a82:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a9a:	4692      	mov	sl, r2
 8002a9c:	469b      	mov	fp, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	eb1a 0303 	adds.w	r3, sl, r3
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002aba:	4629      	mov	r1, r5
 8002abc:	028b      	lsls	r3, r1, #10
 8002abe:	4621      	mov	r1, r4
 8002ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	028a      	lsls	r2, r1, #10
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ad4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ad6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ada:	f7fe f8cd 	bl	8000c78 <__aeabi_uldivmod>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae8:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b0a:	e0eb      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b18:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d06b      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b24:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b36:	663b      	str	r3, [r7, #96]	; 0x60
 8002b38:	2300      	movs	r3, #0
 8002b3a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002b40:	4622      	mov	r2, r4
 8002b42:	462b      	mov	r3, r5
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	0159      	lsls	r1, r3, #5
 8002b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b52:	0150      	lsls	r0, r2, #5
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4621      	mov	r1, r4
 8002b5a:	1a51      	subs	r1, r2, r1
 8002b5c:	61b9      	str	r1, [r7, #24]
 8002b5e:	4629      	mov	r1, r5
 8002b60:	eb63 0301 	sbc.w	r3, r3, r1
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b72:	4659      	mov	r1, fp
 8002b74:	018b      	lsls	r3, r1, #6
 8002b76:	4651      	mov	r1, sl
 8002b78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7c:	4651      	mov	r1, sl
 8002b7e:	018a      	lsls	r2, r1, #6
 8002b80:	4651      	mov	r1, sl
 8002b82:	ebb2 0801 	subs.w	r8, r2, r1
 8002b86:	4659      	mov	r1, fp
 8002b88:	eb63 0901 	sbc.w	r9, r3, r1
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ba0:	4690      	mov	r8, r2
 8002ba2:	4699      	mov	r9, r3
 8002ba4:	4623      	mov	r3, r4
 8002ba6:	eb18 0303 	adds.w	r3, r8, r3
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	462b      	mov	r3, r5
 8002bae:	eb49 0303 	adc.w	r3, r9, r3
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	024b      	lsls	r3, r1, #9
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bca:	4621      	mov	r1, r4
 8002bcc:	024a      	lsls	r2, r1, #9
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bda:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002bdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002be0:	f7fe f84a 	bl	8000c78 <__aeabi_uldivmod>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4613      	mov	r3, r2
 8002bea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bee:	e065      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x420>
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	00f42400 	.word	0x00f42400
 8002bf8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfc:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	4611      	mov	r1, r2
 8002c08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8002c0e:	2300      	movs	r3, #0
 8002c10:	657b      	str	r3, [r7, #84]	; 0x54
 8002c12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002c16:	4642      	mov	r2, r8
 8002c18:	464b      	mov	r3, r9
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	0159      	lsls	r1, r3, #5
 8002c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c28:	0150      	lsls	r0, r2, #5
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4641      	mov	r1, r8
 8002c30:	1a51      	subs	r1, r2, r1
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	4649      	mov	r1, r9
 8002c36:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c48:	4659      	mov	r1, fp
 8002c4a:	018b      	lsls	r3, r1, #6
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c52:	4651      	mov	r1, sl
 8002c54:	018a      	lsls	r2, r1, #6
 8002c56:	4651      	mov	r1, sl
 8002c58:	1a54      	subs	r4, r2, r1
 8002c5a:	4659      	mov	r1, fp
 8002c5c:	eb63 0501 	sbc.w	r5, r3, r1
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	00eb      	lsls	r3, r5, #3
 8002c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6e:	00e2      	lsls	r2, r4, #3
 8002c70:	4614      	mov	r4, r2
 8002c72:	461d      	mov	r5, r3
 8002c74:	4643      	mov	r3, r8
 8002c76:	18e3      	adds	r3, r4, r3
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	eb45 0303 	adc.w	r3, r5, r3
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8e:	4629      	mov	r1, r5
 8002c90:	028b      	lsls	r3, r1, #10
 8002c92:	4621      	mov	r1, r4
 8002c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c98:	4621      	mov	r1, r4
 8002c9a:	028a      	lsls	r2, r1, #10
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002caa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cae:	f7fd ffe3 	bl	8000c78 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cbc:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0f1b      	lsrs	r3, r3, #28
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cda:	e003      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ce2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	37b8      	adds	r7, #184	; 0xb8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	00f42400 	.word	0x00f42400

08002cfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e28d      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8083 	beq.w	8002e22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d1c:	4b94      	ldr	r3, [pc, #592]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d019      	beq.n	8002d5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d28:	4b91      	ldr	r3, [pc, #580]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d34:	4b8e      	ldr	r3, [pc, #568]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d40:	d00c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d42:	4b8b      	ldr	r3, [pc, #556]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d112      	bne.n	8002d74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4e:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d5a:	d10b      	bne.n	8002d74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	4b84      	ldr	r3, [pc, #528]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d05b      	beq.n	8002e20 <HAL_RCC_OscConfig+0x124>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d157      	bne.n	8002e20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e25a      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7c:	d106      	bne.n	8002d8c <HAL_RCC_OscConfig+0x90>
 8002d7e:	4b7c      	ldr	r3, [pc, #496]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7b      	ldr	r2, [pc, #492]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e01d      	b.n	8002dc8 <HAL_RCC_OscConfig+0xcc>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0xb4>
 8002d96:	4b76      	ldr	r3, [pc, #472]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a75      	ldr	r2, [pc, #468]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b73      	ldr	r3, [pc, #460]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a72      	ldr	r2, [pc, #456]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0xcc>
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6e      	ldr	r2, [pc, #440]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b6c      	ldr	r3, [pc, #432]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a6b      	ldr	r2, [pc, #428]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fdaa 	bl	8001928 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7fe fda6 	bl	8001928 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e21f      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b61      	ldr	r3, [pc, #388]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0xdc>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe fd96 	bl	8001928 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e00:	f7fe fd92 	bl	8001928 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e20b      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	4b57      	ldr	r3, [pc, #348]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x104>
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d06f      	beq.n	8002f0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e2e:	4b50      	ldr	r3, [pc, #320]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e3a:	4b4d      	ldr	r3, [pc, #308]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d105      	bne.n	8002e52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e46:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e52:	4b47      	ldr	r3, [pc, #284]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	d11c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5e:	4b44      	ldr	r3, [pc, #272]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d116      	bne.n	8002e98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x186>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1d3      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4937      	ldr	r1, [pc, #220]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	e03a      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCC_OscConfig+0x278>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fd3f 	bl	8001928 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eae:	f7fe fd3b 	bl	8001928 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e1b4      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4925      	ldr	r1, [pc, #148]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
 8002ee0:	e015      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x278>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fd1e 	bl	8001928 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fd1a 	bl	8001928 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e193      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d036      	beq.n	8002f88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCC_OscConfig+0x27c>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7fe fcfe 	bl	8001928 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe fcfa 	bl	8001928 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e173      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x234>
 8002f4e:	e01b      	b.n	8002f88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fe fce7 	bl	8001928 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5c:	e00e      	b.n	8002f7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5e:	f7fe fce3 	bl	8001928 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d907      	bls.n	8002f7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e15c      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
 8002f70:	40023800 	.word	0x40023800
 8002f74:	42470000 	.word	0x42470000
 8002f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	4b8a      	ldr	r3, [pc, #552]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1ea      	bne.n	8002f5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8097 	beq.w	80030c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b83      	ldr	r3, [pc, #524]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	4b7f      	ldr	r3, [pc, #508]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a7e      	ldr	r2, [pc, #504]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	4b79      	ldr	r3, [pc, #484]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d118      	bne.n	8003004 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd2:	4b76      	ldr	r3, [pc, #472]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a75      	ldr	r2, [pc, #468]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fde:	f7fe fca3 	bl	8001928 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe6:	f7fe fc9f 	bl	8001928 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e118      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x31e>
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a65      	ldr	r2, [pc, #404]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x358>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x340>
 8003022:	4b61      	ldr	r3, [pc, #388]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a60      	ldr	r2, [pc, #384]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a5d      	ldr	r2, [pc, #372]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x358>
 800303c:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a59      	ldr	r2, [pc, #356]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
 8003048:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fe fc64 	bl	8001928 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe fc60 	bl	8001928 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0d7      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ee      	beq.n	8003064 <HAL_RCC_OscConfig+0x368>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fc4e 	bl	8001928 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe fc4a 	bl	8001928 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0c1      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a6:	4b40      	ldr	r3, [pc, #256]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ee      	bne.n	8003090 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b8:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	4a3a      	ldr	r2, [pc, #232]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80ad 	beq.w	8003228 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d060      	beq.n	800319c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d145      	bne.n	800316e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <HAL_RCC_OscConfig+0x4b4>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fc1e 	bl	8001928 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe fc1a 	bl	8001928 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e093      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	019b      	lsls	r3, r3, #6
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	3b01      	subs	r3, #1
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	071b      	lsls	r3, r3, #28
 800313a:	491b      	ldr	r1, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x4b4>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe fbef 	bl	8001928 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314e:	f7fe fbeb 	bl	8001928 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e064      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x452>
 800316c:	e05c      	b.n	8003228 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_RCC_OscConfig+0x4b4>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe fbd8 	bl	8001928 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fbd4 	bl	8001928 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e04d      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x480>
 800319a:	e045      	b.n	8003228 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e040      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40007000 	.word	0x40007000
 80031b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_RCC_OscConfig+0x538>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d030      	beq.n	8003224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d129      	bne.n	8003224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d122      	bne.n	8003224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d119      	bne.n	8003224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d10f      	bne.n	8003224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d107      	bne.n	8003224 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800

08003238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e042      	b.n	80032d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe fa8a 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2224      	movs	r2, #36	; 0x24
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800327a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f973 	bl	8003568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d175      	bne.n	80033e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_UART_Transmit+0x2c>
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e06e      	b.n	80033e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2221      	movs	r2, #33	; 0x21
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003316:	f7fe fb07 	bl	8001928 <HAL_GetTick>
 800331a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003330:	d108      	bne.n	8003344 <HAL_UART_Transmit+0x6c>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	e003      	b.n	800334c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800334c:	e02e      	b.n	80033ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	2180      	movs	r1, #128	; 0x80
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f848 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e03a      	b.n	80033e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	3302      	adds	r3, #2
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	e007      	b.n	800339e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	781a      	ldrb	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	3301      	adds	r3, #1
 800339c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1cb      	bne.n	800334e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	2140      	movs	r1, #64	; 0x40
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f814 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e006      	b.n	80033e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	e03b      	b.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d037      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003408:	f7fe fa8e 	bl	8001928 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	6a3a      	ldr	r2, [r7, #32]
 8003414:	429a      	cmp	r2, r3
 8003416:	d302      	bcc.n	800341e <UART_WaitOnFlagUntilTimeout+0x30>
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e03a      	b.n	8003498 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d023      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b80      	cmp	r3, #128	; 0x80
 8003434:	d020      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d01d      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b08      	cmp	r3, #8
 8003448:	d116      	bne.n	8003478 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f81d 	bl	80034a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2208      	movs	r2, #8
 800346a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e00f      	b.n	8003498 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	429a      	cmp	r2, r3
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	429a      	cmp	r2, r3
 8003494:	d0b4      	beq.n	8003400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b095      	sub	sp, #84	; 0x54
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034c8:	643a      	str	r2, [r7, #64]	; 0x40
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e5      	bne.n	80034a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3314      	adds	r3, #20
 80034e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e5      	bne.n	80034dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	2b01      	cmp	r3, #1
 8003516:	d119      	bne.n	800354c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	60bb      	str	r3, [r7, #8]
   return(result);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f023 0310 	bic.w	r3, r3, #16
 800352e:	647b      	str	r3, [r7, #68]	; 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003538:	61ba      	str	r2, [r7, #24]
 800353a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	6979      	ldr	r1, [r7, #20]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	613b      	str	r3, [r7, #16]
   return(result);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e5      	bne.n	8003518 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
}
 800355a:	bf00      	nop
 800355c:	3754      	adds	r7, #84	; 0x54
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800356c:	b0c0      	sub	sp, #256	; 0x100
 800356e:	af00      	add	r7, sp, #0
 8003570:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003584:	68d9      	ldr	r1, [r3, #12]
 8003586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	ea40 0301 	orr.w	r3, r0, r1
 8003590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	431a      	orrs	r2, r3
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035c0:	f021 010c 	bic.w	r1, r1, #12
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035ce:	430b      	orrs	r3, r1
 80035d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	6999      	ldr	r1, [r3, #24]
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	ea40 0301 	orr.w	r3, r0, r1
 80035ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4b8f      	ldr	r3, [pc, #572]	; (8003834 <UART_SetConfig+0x2cc>)
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d005      	beq.n	8003608 <UART_SetConfig+0xa0>
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b8d      	ldr	r3, [pc, #564]	; (8003838 <UART_SetConfig+0x2d0>)
 8003604:	429a      	cmp	r2, r3
 8003606:	d104      	bne.n	8003612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003608:	f7ff f934 	bl	8002874 <HAL_RCC_GetPCLK2Freq>
 800360c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003610:	e003      	b.n	800361a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003612:	f7ff f91b 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003616:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800361a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003624:	f040 810c 	bne.w	8003840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800362c:	2200      	movs	r2, #0
 800362e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003632:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800363a:	4622      	mov	r2, r4
 800363c:	462b      	mov	r3, r5
 800363e:	1891      	adds	r1, r2, r2
 8003640:	65b9      	str	r1, [r7, #88]	; 0x58
 8003642:	415b      	adcs	r3, r3
 8003644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800364a:	4621      	mov	r1, r4
 800364c:	eb12 0801 	adds.w	r8, r2, r1
 8003650:	4629      	mov	r1, r5
 8003652:	eb43 0901 	adc.w	r9, r3, r1
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800366a:	4690      	mov	r8, r2
 800366c:	4699      	mov	r9, r3
 800366e:	4623      	mov	r3, r4
 8003670:	eb18 0303 	adds.w	r3, r8, r3
 8003674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003678:	462b      	mov	r3, r5
 800367a:	eb49 0303 	adc.w	r3, r9, r3
 800367e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800368e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003696:	460b      	mov	r3, r1
 8003698:	18db      	adds	r3, r3, r3
 800369a:	653b      	str	r3, [r7, #80]	; 0x50
 800369c:	4613      	mov	r3, r2
 800369e:	eb42 0303 	adc.w	r3, r2, r3
 80036a2:	657b      	str	r3, [r7, #84]	; 0x54
 80036a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036ac:	f7fd fae4 	bl	8000c78 <__aeabi_uldivmod>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4b61      	ldr	r3, [pc, #388]	; (800383c <UART_SetConfig+0x2d4>)
 80036b6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	011c      	lsls	r4, r3, #4
 80036be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036d0:	4642      	mov	r2, r8
 80036d2:	464b      	mov	r3, r9
 80036d4:	1891      	adds	r1, r2, r2
 80036d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80036d8:	415b      	adcs	r3, r3
 80036da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036e0:	4641      	mov	r1, r8
 80036e2:	eb12 0a01 	adds.w	sl, r2, r1
 80036e6:	4649      	mov	r1, r9
 80036e8:	eb43 0b01 	adc.w	fp, r3, r1
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003700:	4692      	mov	sl, r2
 8003702:	469b      	mov	fp, r3
 8003704:	4643      	mov	r3, r8
 8003706:	eb1a 0303 	adds.w	r3, sl, r3
 800370a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800370e:	464b      	mov	r3, r9
 8003710:	eb4b 0303 	adc.w	r3, fp, r3
 8003714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003724:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800372c:	460b      	mov	r3, r1
 800372e:	18db      	adds	r3, r3, r3
 8003730:	643b      	str	r3, [r7, #64]	; 0x40
 8003732:	4613      	mov	r3, r2
 8003734:	eb42 0303 	adc.w	r3, r2, r3
 8003738:	647b      	str	r3, [r7, #68]	; 0x44
 800373a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800373e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003742:	f7fd fa99 	bl	8000c78 <__aeabi_uldivmod>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4611      	mov	r1, r2
 800374c:	4b3b      	ldr	r3, [pc, #236]	; (800383c <UART_SetConfig+0x2d4>)
 800374e:	fba3 2301 	umull	r2, r3, r3, r1
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	2264      	movs	r2, #100	; 0x64
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	1acb      	subs	r3, r1, r3
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003762:	4b36      	ldr	r3, [pc, #216]	; (800383c <UART_SetConfig+0x2d4>)
 8003764:	fba3 2302 	umull	r2, r3, r3, r2
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003770:	441c      	add	r4, r3
 8003772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003776:	2200      	movs	r2, #0
 8003778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800377c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003784:	4642      	mov	r2, r8
 8003786:	464b      	mov	r3, r9
 8003788:	1891      	adds	r1, r2, r2
 800378a:	63b9      	str	r1, [r7, #56]	; 0x38
 800378c:	415b      	adcs	r3, r3
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003794:	4641      	mov	r1, r8
 8003796:	1851      	adds	r1, r2, r1
 8003798:	6339      	str	r1, [r7, #48]	; 0x30
 800379a:	4649      	mov	r1, r9
 800379c:	414b      	adcs	r3, r1
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037ac:	4659      	mov	r1, fp
 80037ae:	00cb      	lsls	r3, r1, #3
 80037b0:	4651      	mov	r1, sl
 80037b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b6:	4651      	mov	r1, sl
 80037b8:	00ca      	lsls	r2, r1, #3
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	4642      	mov	r2, r8
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037c8:	464b      	mov	r3, r9
 80037ca:	460a      	mov	r2, r1
 80037cc:	eb42 0303 	adc.w	r3, r2, r3
 80037d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037e8:	460b      	mov	r3, r1
 80037ea:	18db      	adds	r3, r3, r3
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ee:	4613      	mov	r3, r2
 80037f0:	eb42 0303 	adc.w	r3, r2, r3
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037fe:	f7fd fa3b 	bl	8000c78 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <UART_SetConfig+0x2d4>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2164      	movs	r1, #100	; 0x64
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <UART_SetConfig+0x2d4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	f003 0207 	and.w	r2, r3, #7
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4422      	add	r2, r4
 800382e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003830:	e106      	b.n	8003a40 <UART_SetConfig+0x4d8>
 8003832:	bf00      	nop
 8003834:	40011000 	.word	0x40011000
 8003838:	40011400 	.word	0x40011400
 800383c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800384a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800384e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003852:	4642      	mov	r2, r8
 8003854:	464b      	mov	r3, r9
 8003856:	1891      	adds	r1, r2, r2
 8003858:	6239      	str	r1, [r7, #32]
 800385a:	415b      	adcs	r3, r3
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
 800385e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003862:	4641      	mov	r1, r8
 8003864:	1854      	adds	r4, r2, r1
 8003866:	4649      	mov	r1, r9
 8003868:	eb43 0501 	adc.w	r5, r3, r1
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	00eb      	lsls	r3, r5, #3
 8003876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800387a:	00e2      	lsls	r2, r4, #3
 800387c:	4614      	mov	r4, r2
 800387e:	461d      	mov	r5, r3
 8003880:	4643      	mov	r3, r8
 8003882:	18e3      	adds	r3, r4, r3
 8003884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003888:	464b      	mov	r3, r9
 800388a:	eb45 0303 	adc.w	r3, r5, r3
 800388e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800389e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038ae:	4629      	mov	r1, r5
 80038b0:	008b      	lsls	r3, r1, #2
 80038b2:	4621      	mov	r1, r4
 80038b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038b8:	4621      	mov	r1, r4
 80038ba:	008a      	lsls	r2, r1, #2
 80038bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038c0:	f7fd f9da 	bl	8000c78 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4b60      	ldr	r3, [pc, #384]	; (8003a4c <UART_SetConfig+0x4e4>)
 80038ca:	fba3 2302 	umull	r2, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	011c      	lsls	r4, r3, #4
 80038d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038e4:	4642      	mov	r2, r8
 80038e6:	464b      	mov	r3, r9
 80038e8:	1891      	adds	r1, r2, r2
 80038ea:	61b9      	str	r1, [r7, #24]
 80038ec:	415b      	adcs	r3, r3
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f4:	4641      	mov	r1, r8
 80038f6:	1851      	adds	r1, r2, r1
 80038f8:	6139      	str	r1, [r7, #16]
 80038fa:	4649      	mov	r1, r9
 80038fc:	414b      	adcs	r3, r1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800390c:	4659      	mov	r1, fp
 800390e:	00cb      	lsls	r3, r1, #3
 8003910:	4651      	mov	r1, sl
 8003912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003916:	4651      	mov	r1, sl
 8003918:	00ca      	lsls	r2, r1, #3
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	4603      	mov	r3, r0
 8003920:	4642      	mov	r2, r8
 8003922:	189b      	adds	r3, r3, r2
 8003924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003928:	464b      	mov	r3, r9
 800392a:	460a      	mov	r2, r1
 800392c:	eb42 0303 	adc.w	r3, r2, r3
 8003930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	67bb      	str	r3, [r7, #120]	; 0x78
 800393e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800394c:	4649      	mov	r1, r9
 800394e:	008b      	lsls	r3, r1, #2
 8003950:	4641      	mov	r1, r8
 8003952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003956:	4641      	mov	r1, r8
 8003958:	008a      	lsls	r2, r1, #2
 800395a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800395e:	f7fd f98b 	bl	8000c78 <__aeabi_uldivmod>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4611      	mov	r1, r2
 8003968:	4b38      	ldr	r3, [pc, #224]	; (8003a4c <UART_SetConfig+0x4e4>)
 800396a:	fba3 2301 	umull	r2, r3, r3, r1
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2264      	movs	r2, #100	; 0x64
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	1acb      	subs	r3, r1, r3
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	3332      	adds	r3, #50	; 0x32
 800397c:	4a33      	ldr	r2, [pc, #204]	; (8003a4c <UART_SetConfig+0x4e4>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003988:	441c      	add	r4, r3
 800398a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398e:	2200      	movs	r2, #0
 8003990:	673b      	str	r3, [r7, #112]	; 0x70
 8003992:	677a      	str	r2, [r7, #116]	; 0x74
 8003994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003998:	4642      	mov	r2, r8
 800399a:	464b      	mov	r3, r9
 800399c:	1891      	adds	r1, r2, r2
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	415b      	adcs	r3, r3
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039a8:	4641      	mov	r1, r8
 80039aa:	1851      	adds	r1, r2, r1
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	4649      	mov	r1, r9
 80039b0:	414b      	adcs	r3, r1
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039c0:	4659      	mov	r1, fp
 80039c2:	00cb      	lsls	r3, r1, #3
 80039c4:	4651      	mov	r1, sl
 80039c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ca:	4651      	mov	r1, sl
 80039cc:	00ca      	lsls	r2, r1, #3
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	4642      	mov	r2, r8
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039da:	464b      	mov	r3, r9
 80039dc:	460a      	mov	r2, r1
 80039de:	eb42 0303 	adc.w	r3, r2, r3
 80039e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	663b      	str	r3, [r7, #96]	; 0x60
 80039ee:	667a      	str	r2, [r7, #100]	; 0x64
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039fc:	4649      	mov	r1, r9
 80039fe:	008b      	lsls	r3, r1, #2
 8003a00:	4641      	mov	r1, r8
 8003a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a06:	4641      	mov	r1, r8
 8003a08:	008a      	lsls	r2, r1, #2
 8003a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a0e:	f7fd f933 	bl	8000c78 <__aeabi_uldivmod>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <UART_SetConfig+0x4e4>)
 8003a18:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	2164      	movs	r1, #100	; 0x64
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	3332      	adds	r3, #50	; 0x32
 8003a2a:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <UART_SetConfig+0x4e4>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4422      	add	r2, r4
 8003a3e:	609a      	str	r2, [r3, #8]
}
 8003a40:	bf00      	nop
 8003a42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a46:	46bd      	mov	sp, r7
 8003a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4c:	51eb851f 	.word	0x51eb851f

08003a50 <siprintf>:
 8003a50:	b40e      	push	{r1, r2, r3}
 8003a52:	b500      	push	{lr}
 8003a54:	b09c      	sub	sp, #112	; 0x70
 8003a56:	ab1d      	add	r3, sp, #116	; 0x74
 8003a58:	9002      	str	r0, [sp, #8]
 8003a5a:	9006      	str	r0, [sp, #24]
 8003a5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a60:	4809      	ldr	r0, [pc, #36]	; (8003a88 <siprintf+0x38>)
 8003a62:	9107      	str	r1, [sp, #28]
 8003a64:	9104      	str	r1, [sp, #16]
 8003a66:	4909      	ldr	r1, [pc, #36]	; (8003a8c <siprintf+0x3c>)
 8003a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a6c:	9105      	str	r1, [sp, #20]
 8003a6e:	6800      	ldr	r0, [r0, #0]
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	a902      	add	r1, sp, #8
 8003a74:	f000 f992 	bl	8003d9c <_svfiprintf_r>
 8003a78:	9b02      	ldr	r3, [sp, #8]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	b01c      	add	sp, #112	; 0x70
 8003a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a84:	b003      	add	sp, #12
 8003a86:	4770      	bx	lr
 8003a88:	20000058 	.word	0x20000058
 8003a8c:	ffff0208 	.word	0xffff0208

08003a90 <memset>:
 8003a90:	4402      	add	r2, r0
 8003a92:	4603      	mov	r3, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <__errno>:
 8003aa0:	4b01      	ldr	r3, [pc, #4]	; (8003aa8 <__errno+0x8>)
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000058 	.word	0x20000058

08003aac <__libc_init_array>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	4d0d      	ldr	r5, [pc, #52]	; (8003ae4 <__libc_init_array+0x38>)
 8003ab0:	4c0d      	ldr	r4, [pc, #52]	; (8003ae8 <__libc_init_array+0x3c>)
 8003ab2:	1b64      	subs	r4, r4, r5
 8003ab4:	10a4      	asrs	r4, r4, #2
 8003ab6:	2600      	movs	r6, #0
 8003ab8:	42a6      	cmp	r6, r4
 8003aba:	d109      	bne.n	8003ad0 <__libc_init_array+0x24>
 8003abc:	4d0b      	ldr	r5, [pc, #44]	; (8003aec <__libc_init_array+0x40>)
 8003abe:	4c0c      	ldr	r4, [pc, #48]	; (8003af0 <__libc_init_array+0x44>)
 8003ac0:	f001 fba2 	bl	8005208 <_init>
 8003ac4:	1b64      	subs	r4, r4, r5
 8003ac6:	10a4      	asrs	r4, r4, #2
 8003ac8:	2600      	movs	r6, #0
 8003aca:	42a6      	cmp	r6, r4
 8003acc:	d105      	bne.n	8003ada <__libc_init_array+0x2e>
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad4:	4798      	blx	r3
 8003ad6:	3601      	adds	r6, #1
 8003ad8:	e7ee      	b.n	8003ab8 <__libc_init_array+0xc>
 8003ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ade:	4798      	blx	r3
 8003ae0:	3601      	adds	r6, #1
 8003ae2:	e7f2      	b.n	8003aca <__libc_init_array+0x1e>
 8003ae4:	080052d0 	.word	0x080052d0
 8003ae8:	080052d0 	.word	0x080052d0
 8003aec:	080052d0 	.word	0x080052d0
 8003af0:	080052d4 	.word	0x080052d4

08003af4 <__retarget_lock_acquire_recursive>:
 8003af4:	4770      	bx	lr

08003af6 <__retarget_lock_release_recursive>:
 8003af6:	4770      	bx	lr

08003af8 <_free_r>:
 8003af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003afa:	2900      	cmp	r1, #0
 8003afc:	d044      	beq.n	8003b88 <_free_r+0x90>
 8003afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b02:	9001      	str	r0, [sp, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f1a1 0404 	sub.w	r4, r1, #4
 8003b0a:	bfb8      	it	lt
 8003b0c:	18e4      	addlt	r4, r4, r3
 8003b0e:	f000 f8df 	bl	8003cd0 <__malloc_lock>
 8003b12:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <_free_r+0x94>)
 8003b14:	9801      	ldr	r0, [sp, #4]
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	b933      	cbnz	r3, 8003b28 <_free_r+0x30>
 8003b1a:	6063      	str	r3, [r4, #4]
 8003b1c:	6014      	str	r4, [r2, #0]
 8003b1e:	b003      	add	sp, #12
 8003b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b24:	f000 b8da 	b.w	8003cdc <__malloc_unlock>
 8003b28:	42a3      	cmp	r3, r4
 8003b2a:	d908      	bls.n	8003b3e <_free_r+0x46>
 8003b2c:	6825      	ldr	r5, [r4, #0]
 8003b2e:	1961      	adds	r1, r4, r5
 8003b30:	428b      	cmp	r3, r1
 8003b32:	bf01      	itttt	eq
 8003b34:	6819      	ldreq	r1, [r3, #0]
 8003b36:	685b      	ldreq	r3, [r3, #4]
 8003b38:	1949      	addeq	r1, r1, r5
 8003b3a:	6021      	streq	r1, [r4, #0]
 8003b3c:	e7ed      	b.n	8003b1a <_free_r+0x22>
 8003b3e:	461a      	mov	r2, r3
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b10b      	cbz	r3, 8003b48 <_free_r+0x50>
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	d9fa      	bls.n	8003b3e <_free_r+0x46>
 8003b48:	6811      	ldr	r1, [r2, #0]
 8003b4a:	1855      	adds	r5, r2, r1
 8003b4c:	42a5      	cmp	r5, r4
 8003b4e:	d10b      	bne.n	8003b68 <_free_r+0x70>
 8003b50:	6824      	ldr	r4, [r4, #0]
 8003b52:	4421      	add	r1, r4
 8003b54:	1854      	adds	r4, r2, r1
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	6011      	str	r1, [r2, #0]
 8003b5a:	d1e0      	bne.n	8003b1e <_free_r+0x26>
 8003b5c:	681c      	ldr	r4, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	6053      	str	r3, [r2, #4]
 8003b62:	440c      	add	r4, r1
 8003b64:	6014      	str	r4, [r2, #0]
 8003b66:	e7da      	b.n	8003b1e <_free_r+0x26>
 8003b68:	d902      	bls.n	8003b70 <_free_r+0x78>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	6003      	str	r3, [r0, #0]
 8003b6e:	e7d6      	b.n	8003b1e <_free_r+0x26>
 8003b70:	6825      	ldr	r5, [r4, #0]
 8003b72:	1961      	adds	r1, r4, r5
 8003b74:	428b      	cmp	r3, r1
 8003b76:	bf04      	itt	eq
 8003b78:	6819      	ldreq	r1, [r3, #0]
 8003b7a:	685b      	ldreq	r3, [r3, #4]
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	bf04      	itt	eq
 8003b80:	1949      	addeq	r1, r1, r5
 8003b82:	6021      	streq	r1, [r4, #0]
 8003b84:	6054      	str	r4, [r2, #4]
 8003b86:	e7ca      	b.n	8003b1e <_free_r+0x26>
 8003b88:	b003      	add	sp, #12
 8003b8a:	bd30      	pop	{r4, r5, pc}
 8003b8c:	20000264 	.word	0x20000264

08003b90 <sbrk_aligned>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	4e0e      	ldr	r6, [pc, #56]	; (8003bcc <sbrk_aligned+0x3c>)
 8003b94:	460c      	mov	r4, r1
 8003b96:	6831      	ldr	r1, [r6, #0]
 8003b98:	4605      	mov	r5, r0
 8003b9a:	b911      	cbnz	r1, 8003ba2 <sbrk_aligned+0x12>
 8003b9c:	f000 fba6 	bl	80042ec <_sbrk_r>
 8003ba0:	6030      	str	r0, [r6, #0]
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	f000 fba1 	bl	80042ec <_sbrk_r>
 8003baa:	1c43      	adds	r3, r0, #1
 8003bac:	d00a      	beq.n	8003bc4 <sbrk_aligned+0x34>
 8003bae:	1cc4      	adds	r4, r0, #3
 8003bb0:	f024 0403 	bic.w	r4, r4, #3
 8003bb4:	42a0      	cmp	r0, r4
 8003bb6:	d007      	beq.n	8003bc8 <sbrk_aligned+0x38>
 8003bb8:	1a21      	subs	r1, r4, r0
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f000 fb96 	bl	80042ec <_sbrk_r>
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d101      	bne.n	8003bc8 <sbrk_aligned+0x38>
 8003bc4:	f04f 34ff 	mov.w	r4, #4294967295
 8003bc8:	4620      	mov	r0, r4
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	20000268 	.word	0x20000268

08003bd0 <_malloc_r>:
 8003bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bd4:	1ccd      	adds	r5, r1, #3
 8003bd6:	f025 0503 	bic.w	r5, r5, #3
 8003bda:	3508      	adds	r5, #8
 8003bdc:	2d0c      	cmp	r5, #12
 8003bde:	bf38      	it	cc
 8003be0:	250c      	movcc	r5, #12
 8003be2:	2d00      	cmp	r5, #0
 8003be4:	4607      	mov	r7, r0
 8003be6:	db01      	blt.n	8003bec <_malloc_r+0x1c>
 8003be8:	42a9      	cmp	r1, r5
 8003bea:	d905      	bls.n	8003bf8 <_malloc_r+0x28>
 8003bec:	230c      	movs	r3, #12
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	2600      	movs	r6, #0
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bf8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ccc <_malloc_r+0xfc>
 8003bfc:	f000 f868 	bl	8003cd0 <__malloc_lock>
 8003c00:	f8d8 3000 	ldr.w	r3, [r8]
 8003c04:	461c      	mov	r4, r3
 8003c06:	bb5c      	cbnz	r4, 8003c60 <_malloc_r+0x90>
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f7ff ffc0 	bl	8003b90 <sbrk_aligned>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	4604      	mov	r4, r0
 8003c14:	d155      	bne.n	8003cc2 <_malloc_r+0xf2>
 8003c16:	f8d8 4000 	ldr.w	r4, [r8]
 8003c1a:	4626      	mov	r6, r4
 8003c1c:	2e00      	cmp	r6, #0
 8003c1e:	d145      	bne.n	8003cac <_malloc_r+0xdc>
 8003c20:	2c00      	cmp	r4, #0
 8003c22:	d048      	beq.n	8003cb6 <_malloc_r+0xe6>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	4631      	mov	r1, r6
 8003c28:	4638      	mov	r0, r7
 8003c2a:	eb04 0903 	add.w	r9, r4, r3
 8003c2e:	f000 fb5d 	bl	80042ec <_sbrk_r>
 8003c32:	4581      	cmp	r9, r0
 8003c34:	d13f      	bne.n	8003cb6 <_malloc_r+0xe6>
 8003c36:	6821      	ldr	r1, [r4, #0]
 8003c38:	1a6d      	subs	r5, r5, r1
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	f7ff ffa7 	bl	8003b90 <sbrk_aligned>
 8003c42:	3001      	adds	r0, #1
 8003c44:	d037      	beq.n	8003cb6 <_malloc_r+0xe6>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	442b      	add	r3, r5
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d038      	beq.n	8003cc6 <_malloc_r+0xf6>
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	42a2      	cmp	r2, r4
 8003c58:	d12b      	bne.n	8003cb2 <_malloc_r+0xe2>
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	e00f      	b.n	8003c80 <_malloc_r+0xb0>
 8003c60:	6822      	ldr	r2, [r4, #0]
 8003c62:	1b52      	subs	r2, r2, r5
 8003c64:	d41f      	bmi.n	8003ca6 <_malloc_r+0xd6>
 8003c66:	2a0b      	cmp	r2, #11
 8003c68:	d917      	bls.n	8003c9a <_malloc_r+0xca>
 8003c6a:	1961      	adds	r1, r4, r5
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	6025      	str	r5, [r4, #0]
 8003c70:	bf18      	it	ne
 8003c72:	6059      	strne	r1, [r3, #4]
 8003c74:	6863      	ldr	r3, [r4, #4]
 8003c76:	bf08      	it	eq
 8003c78:	f8c8 1000 	streq.w	r1, [r8]
 8003c7c:	5162      	str	r2, [r4, r5]
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	4638      	mov	r0, r7
 8003c82:	f104 060b 	add.w	r6, r4, #11
 8003c86:	f000 f829 	bl	8003cdc <__malloc_unlock>
 8003c8a:	f026 0607 	bic.w	r6, r6, #7
 8003c8e:	1d23      	adds	r3, r4, #4
 8003c90:	1af2      	subs	r2, r6, r3
 8003c92:	d0ae      	beq.n	8003bf2 <_malloc_r+0x22>
 8003c94:	1b9b      	subs	r3, r3, r6
 8003c96:	50a3      	str	r3, [r4, r2]
 8003c98:	e7ab      	b.n	8003bf2 <_malloc_r+0x22>
 8003c9a:	42a3      	cmp	r3, r4
 8003c9c:	6862      	ldr	r2, [r4, #4]
 8003c9e:	d1dd      	bne.n	8003c5c <_malloc_r+0x8c>
 8003ca0:	f8c8 2000 	str.w	r2, [r8]
 8003ca4:	e7ec      	b.n	8003c80 <_malloc_r+0xb0>
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	6864      	ldr	r4, [r4, #4]
 8003caa:	e7ac      	b.n	8003c06 <_malloc_r+0x36>
 8003cac:	4634      	mov	r4, r6
 8003cae:	6876      	ldr	r6, [r6, #4]
 8003cb0:	e7b4      	b.n	8003c1c <_malloc_r+0x4c>
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	e7cc      	b.n	8003c50 <_malloc_r+0x80>
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f000 f80e 	bl	8003cdc <__malloc_unlock>
 8003cc0:	e797      	b.n	8003bf2 <_malloc_r+0x22>
 8003cc2:	6025      	str	r5, [r4, #0]
 8003cc4:	e7dc      	b.n	8003c80 <_malloc_r+0xb0>
 8003cc6:	605b      	str	r3, [r3, #4]
 8003cc8:	deff      	udf	#255	; 0xff
 8003cca:	bf00      	nop
 8003ccc:	20000264 	.word	0x20000264

08003cd0 <__malloc_lock>:
 8003cd0:	4801      	ldr	r0, [pc, #4]	; (8003cd8 <__malloc_lock+0x8>)
 8003cd2:	f7ff bf0f 	b.w	8003af4 <__retarget_lock_acquire_recursive>
 8003cd6:	bf00      	nop
 8003cd8:	20000260 	.word	0x20000260

08003cdc <__malloc_unlock>:
 8003cdc:	4801      	ldr	r0, [pc, #4]	; (8003ce4 <__malloc_unlock+0x8>)
 8003cde:	f7ff bf0a 	b.w	8003af6 <__retarget_lock_release_recursive>
 8003ce2:	bf00      	nop
 8003ce4:	20000260 	.word	0x20000260

08003ce8 <__ssputs_r>:
 8003ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	688e      	ldr	r6, [r1, #8]
 8003cee:	461f      	mov	r7, r3
 8003cf0:	42be      	cmp	r6, r7
 8003cf2:	680b      	ldr	r3, [r1, #0]
 8003cf4:	4682      	mov	sl, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	4690      	mov	r8, r2
 8003cfa:	d82c      	bhi.n	8003d56 <__ssputs_r+0x6e>
 8003cfc:	898a      	ldrh	r2, [r1, #12]
 8003cfe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d02:	d026      	beq.n	8003d52 <__ssputs_r+0x6a>
 8003d04:	6965      	ldr	r5, [r4, #20]
 8003d06:	6909      	ldr	r1, [r1, #16]
 8003d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d0c:	eba3 0901 	sub.w	r9, r3, r1
 8003d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d14:	1c7b      	adds	r3, r7, #1
 8003d16:	444b      	add	r3, r9
 8003d18:	106d      	asrs	r5, r5, #1
 8003d1a:	429d      	cmp	r5, r3
 8003d1c:	bf38      	it	cc
 8003d1e:	461d      	movcc	r5, r3
 8003d20:	0553      	lsls	r3, r2, #21
 8003d22:	d527      	bpl.n	8003d74 <__ssputs_r+0x8c>
 8003d24:	4629      	mov	r1, r5
 8003d26:	f7ff ff53 	bl	8003bd0 <_malloc_r>
 8003d2a:	4606      	mov	r6, r0
 8003d2c:	b360      	cbz	r0, 8003d88 <__ssputs_r+0xa0>
 8003d2e:	6921      	ldr	r1, [r4, #16]
 8003d30:	464a      	mov	r2, r9
 8003d32:	f000 faeb 	bl	800430c <memcpy>
 8003d36:	89a3      	ldrh	r3, [r4, #12]
 8003d38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d40:	81a3      	strh	r3, [r4, #12]
 8003d42:	6126      	str	r6, [r4, #16]
 8003d44:	6165      	str	r5, [r4, #20]
 8003d46:	444e      	add	r6, r9
 8003d48:	eba5 0509 	sub.w	r5, r5, r9
 8003d4c:	6026      	str	r6, [r4, #0]
 8003d4e:	60a5      	str	r5, [r4, #8]
 8003d50:	463e      	mov	r6, r7
 8003d52:	42be      	cmp	r6, r7
 8003d54:	d900      	bls.n	8003d58 <__ssputs_r+0x70>
 8003d56:	463e      	mov	r6, r7
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	4632      	mov	r2, r6
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	f000 faab 	bl	80042b8 <memmove>
 8003d62:	68a3      	ldr	r3, [r4, #8]
 8003d64:	1b9b      	subs	r3, r3, r6
 8003d66:	60a3      	str	r3, [r4, #8]
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	4433      	add	r3, r6
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	2000      	movs	r0, #0
 8003d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d74:	462a      	mov	r2, r5
 8003d76:	f000 fad7 	bl	8004328 <_realloc_r>
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d1e0      	bne.n	8003d42 <__ssputs_r+0x5a>
 8003d80:	6921      	ldr	r1, [r4, #16]
 8003d82:	4650      	mov	r0, sl
 8003d84:	f7ff feb8 	bl	8003af8 <_free_r>
 8003d88:	230c      	movs	r3, #12
 8003d8a:	f8ca 3000 	str.w	r3, [sl]
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9a:	e7e9      	b.n	8003d70 <__ssputs_r+0x88>

08003d9c <_svfiprintf_r>:
 8003d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da0:	4698      	mov	r8, r3
 8003da2:	898b      	ldrh	r3, [r1, #12]
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	b09d      	sub	sp, #116	; 0x74
 8003da8:	4607      	mov	r7, r0
 8003daa:	460d      	mov	r5, r1
 8003dac:	4614      	mov	r4, r2
 8003dae:	d50e      	bpl.n	8003dce <_svfiprintf_r+0x32>
 8003db0:	690b      	ldr	r3, [r1, #16]
 8003db2:	b963      	cbnz	r3, 8003dce <_svfiprintf_r+0x32>
 8003db4:	2140      	movs	r1, #64	; 0x40
 8003db6:	f7ff ff0b 	bl	8003bd0 <_malloc_r>
 8003dba:	6028      	str	r0, [r5, #0]
 8003dbc:	6128      	str	r0, [r5, #16]
 8003dbe:	b920      	cbnz	r0, 8003dca <_svfiprintf_r+0x2e>
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	e0d0      	b.n	8003f6c <_svfiprintf_r+0x1d0>
 8003dca:	2340      	movs	r3, #64	; 0x40
 8003dcc:	616b      	str	r3, [r5, #20]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ddc:	2330      	movs	r3, #48	; 0x30
 8003dde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f84 <_svfiprintf_r+0x1e8>
 8003de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003de6:	f04f 0901 	mov.w	r9, #1
 8003dea:	4623      	mov	r3, r4
 8003dec:	469a      	mov	sl, r3
 8003dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003df2:	b10a      	cbz	r2, 8003df8 <_svfiprintf_r+0x5c>
 8003df4:	2a25      	cmp	r2, #37	; 0x25
 8003df6:	d1f9      	bne.n	8003dec <_svfiprintf_r+0x50>
 8003df8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dfc:	d00b      	beq.n	8003e16 <_svfiprintf_r+0x7a>
 8003dfe:	465b      	mov	r3, fp
 8003e00:	4622      	mov	r2, r4
 8003e02:	4629      	mov	r1, r5
 8003e04:	4638      	mov	r0, r7
 8003e06:	f7ff ff6f 	bl	8003ce8 <__ssputs_r>
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	f000 80a9 	beq.w	8003f62 <_svfiprintf_r+0x1c6>
 8003e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e12:	445a      	add	r2, fp
 8003e14:	9209      	str	r2, [sp, #36]	; 0x24
 8003e16:	f89a 3000 	ldrb.w	r3, [sl]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80a1 	beq.w	8003f62 <_svfiprintf_r+0x1c6>
 8003e20:	2300      	movs	r3, #0
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295
 8003e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e2a:	f10a 0a01 	add.w	sl, sl, #1
 8003e2e:	9304      	str	r3, [sp, #16]
 8003e30:	9307      	str	r3, [sp, #28]
 8003e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e36:	931a      	str	r3, [sp, #104]	; 0x68
 8003e38:	4654      	mov	r4, sl
 8003e3a:	2205      	movs	r2, #5
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	4850      	ldr	r0, [pc, #320]	; (8003f84 <_svfiprintf_r+0x1e8>)
 8003e42:	f7fc f9e5 	bl	8000210 <memchr>
 8003e46:	9a04      	ldr	r2, [sp, #16]
 8003e48:	b9d8      	cbnz	r0, 8003e82 <_svfiprintf_r+0xe6>
 8003e4a:	06d0      	lsls	r0, r2, #27
 8003e4c:	bf44      	itt	mi
 8003e4e:	2320      	movmi	r3, #32
 8003e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e54:	0711      	lsls	r1, r2, #28
 8003e56:	bf44      	itt	mi
 8003e58:	232b      	movmi	r3, #43	; 0x2b
 8003e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e62:	2b2a      	cmp	r3, #42	; 0x2a
 8003e64:	d015      	beq.n	8003e92 <_svfiprintf_r+0xf6>
 8003e66:	9a07      	ldr	r2, [sp, #28]
 8003e68:	4654      	mov	r4, sl
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f04f 0c0a 	mov.w	ip, #10
 8003e70:	4621      	mov	r1, r4
 8003e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e76:	3b30      	subs	r3, #48	; 0x30
 8003e78:	2b09      	cmp	r3, #9
 8003e7a:	d94d      	bls.n	8003f18 <_svfiprintf_r+0x17c>
 8003e7c:	b1b0      	cbz	r0, 8003eac <_svfiprintf_r+0x110>
 8003e7e:	9207      	str	r2, [sp, #28]
 8003e80:	e014      	b.n	8003eac <_svfiprintf_r+0x110>
 8003e82:	eba0 0308 	sub.w	r3, r0, r8
 8003e86:	fa09 f303 	lsl.w	r3, r9, r3
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	9304      	str	r3, [sp, #16]
 8003e8e:	46a2      	mov	sl, r4
 8003e90:	e7d2      	b.n	8003e38 <_svfiprintf_r+0x9c>
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	1d19      	adds	r1, r3, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	9103      	str	r1, [sp, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bfbb      	ittet	lt
 8003e9e:	425b      	neglt	r3, r3
 8003ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ea4:	9307      	strge	r3, [sp, #28]
 8003ea6:	9307      	strlt	r3, [sp, #28]
 8003ea8:	bfb8      	it	lt
 8003eaa:	9204      	strlt	r2, [sp, #16]
 8003eac:	7823      	ldrb	r3, [r4, #0]
 8003eae:	2b2e      	cmp	r3, #46	; 0x2e
 8003eb0:	d10c      	bne.n	8003ecc <_svfiprintf_r+0x130>
 8003eb2:	7863      	ldrb	r3, [r4, #1]
 8003eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb6:	d134      	bne.n	8003f22 <_svfiprintf_r+0x186>
 8003eb8:	9b03      	ldr	r3, [sp, #12]
 8003eba:	1d1a      	adds	r2, r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bfb8      	it	lt
 8003ec4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ec8:	3402      	adds	r4, #2
 8003eca:	9305      	str	r3, [sp, #20]
 8003ecc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003f94 <_svfiprintf_r+0x1f8>
 8003ed0:	7821      	ldrb	r1, [r4, #0]
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	4650      	mov	r0, sl
 8003ed6:	f7fc f99b 	bl	8000210 <memchr>
 8003eda:	b138      	cbz	r0, 8003eec <_svfiprintf_r+0x150>
 8003edc:	9b04      	ldr	r3, [sp, #16]
 8003ede:	eba0 000a 	sub.w	r0, r0, sl
 8003ee2:	2240      	movs	r2, #64	; 0x40
 8003ee4:	4082      	lsls	r2, r0
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	3401      	adds	r4, #1
 8003eea:	9304      	str	r3, [sp, #16]
 8003eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef0:	4825      	ldr	r0, [pc, #148]	; (8003f88 <_svfiprintf_r+0x1ec>)
 8003ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ef6:	2206      	movs	r2, #6
 8003ef8:	f7fc f98a 	bl	8000210 <memchr>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d038      	beq.n	8003f72 <_svfiprintf_r+0x1d6>
 8003f00:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <_svfiprintf_r+0x1f0>)
 8003f02:	bb1b      	cbnz	r3, 8003f4c <_svfiprintf_r+0x1b0>
 8003f04:	9b03      	ldr	r3, [sp, #12]
 8003f06:	3307      	adds	r3, #7
 8003f08:	f023 0307 	bic.w	r3, r3, #7
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f12:	4433      	add	r3, r6
 8003f14:	9309      	str	r3, [sp, #36]	; 0x24
 8003f16:	e768      	b.n	8003dea <_svfiprintf_r+0x4e>
 8003f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	2001      	movs	r0, #1
 8003f20:	e7a6      	b.n	8003e70 <_svfiprintf_r+0xd4>
 8003f22:	2300      	movs	r3, #0
 8003f24:	3401      	adds	r4, #1
 8003f26:	9305      	str	r3, [sp, #20]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f04f 0c0a 	mov.w	ip, #10
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f34:	3a30      	subs	r2, #48	; 0x30
 8003f36:	2a09      	cmp	r2, #9
 8003f38:	d903      	bls.n	8003f42 <_svfiprintf_r+0x1a6>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0c6      	beq.n	8003ecc <_svfiprintf_r+0x130>
 8003f3e:	9105      	str	r1, [sp, #20]
 8003f40:	e7c4      	b.n	8003ecc <_svfiprintf_r+0x130>
 8003f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f46:	4604      	mov	r4, r0
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e7f0      	b.n	8003f2e <_svfiprintf_r+0x192>
 8003f4c:	ab03      	add	r3, sp, #12
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	462a      	mov	r2, r5
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <_svfiprintf_r+0x1f4>)
 8003f54:	a904      	add	r1, sp, #16
 8003f56:	4638      	mov	r0, r7
 8003f58:	f3af 8000 	nop.w
 8003f5c:	1c42      	adds	r2, r0, #1
 8003f5e:	4606      	mov	r6, r0
 8003f60:	d1d6      	bne.n	8003f10 <_svfiprintf_r+0x174>
 8003f62:	89ab      	ldrh	r3, [r5, #12]
 8003f64:	065b      	lsls	r3, r3, #25
 8003f66:	f53f af2d 	bmi.w	8003dc4 <_svfiprintf_r+0x28>
 8003f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f6c:	b01d      	add	sp, #116	; 0x74
 8003f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f72:	ab03      	add	r3, sp, #12
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	462a      	mov	r2, r5
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <_svfiprintf_r+0x1f4>)
 8003f7a:	a904      	add	r1, sp, #16
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	f000 f879 	bl	8004074 <_printf_i>
 8003f82:	e7eb      	b.n	8003f5c <_svfiprintf_r+0x1c0>
 8003f84:	08005260 	.word	0x08005260
 8003f88:	0800526a 	.word	0x0800526a
 8003f8c:	00000000 	.word	0x00000000
 8003f90:	08003ce9 	.word	0x08003ce9
 8003f94:	08005266 	.word	0x08005266

08003f98 <_printf_common>:
 8003f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f9c:	4616      	mov	r6, r2
 8003f9e:	4699      	mov	r9, r3
 8003fa0:	688a      	ldr	r2, [r1, #8]
 8003fa2:	690b      	ldr	r3, [r1, #16]
 8003fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	bfb8      	it	lt
 8003fac:	4613      	movlt	r3, r2
 8003fae:	6033      	str	r3, [r6, #0]
 8003fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	b10a      	cbz	r2, 8003fbe <_printf_common+0x26>
 8003fba:	3301      	adds	r3, #1
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	0699      	lsls	r1, r3, #26
 8003fc2:	bf42      	ittt	mi
 8003fc4:	6833      	ldrmi	r3, [r6, #0]
 8003fc6:	3302      	addmi	r3, #2
 8003fc8:	6033      	strmi	r3, [r6, #0]
 8003fca:	6825      	ldr	r5, [r4, #0]
 8003fcc:	f015 0506 	ands.w	r5, r5, #6
 8003fd0:	d106      	bne.n	8003fe0 <_printf_common+0x48>
 8003fd2:	f104 0a19 	add.w	sl, r4, #25
 8003fd6:	68e3      	ldr	r3, [r4, #12]
 8003fd8:	6832      	ldr	r2, [r6, #0]
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	42ab      	cmp	r3, r5
 8003fde:	dc26      	bgt.n	800402e <_printf_common+0x96>
 8003fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fe4:	1e13      	subs	r3, r2, #0
 8003fe6:	6822      	ldr	r2, [r4, #0]
 8003fe8:	bf18      	it	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	0692      	lsls	r2, r2, #26
 8003fee:	d42b      	bmi.n	8004048 <_printf_common+0xb0>
 8003ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	47c0      	blx	r8
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d01e      	beq.n	800403c <_printf_common+0xa4>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	f003 0306 	and.w	r3, r3, #6
 8004006:	2b04      	cmp	r3, #4
 8004008:	bf02      	ittt	eq
 800400a:	68e5      	ldreq	r5, [r4, #12]
 800400c:	6833      	ldreq	r3, [r6, #0]
 800400e:	1aed      	subeq	r5, r5, r3
 8004010:	68a3      	ldr	r3, [r4, #8]
 8004012:	bf0c      	ite	eq
 8004014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004018:	2500      	movne	r5, #0
 800401a:	4293      	cmp	r3, r2
 800401c:	bfc4      	itt	gt
 800401e:	1a9b      	subgt	r3, r3, r2
 8004020:	18ed      	addgt	r5, r5, r3
 8004022:	2600      	movs	r6, #0
 8004024:	341a      	adds	r4, #26
 8004026:	42b5      	cmp	r5, r6
 8004028:	d11a      	bne.n	8004060 <_printf_common+0xc8>
 800402a:	2000      	movs	r0, #0
 800402c:	e008      	b.n	8004040 <_printf_common+0xa8>
 800402e:	2301      	movs	r3, #1
 8004030:	4652      	mov	r2, sl
 8004032:	4649      	mov	r1, r9
 8004034:	4638      	mov	r0, r7
 8004036:	47c0      	blx	r8
 8004038:	3001      	adds	r0, #1
 800403a:	d103      	bne.n	8004044 <_printf_common+0xac>
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004044:	3501      	adds	r5, #1
 8004046:	e7c6      	b.n	8003fd6 <_printf_common+0x3e>
 8004048:	18e1      	adds	r1, r4, r3
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	2030      	movs	r0, #48	; 0x30
 800404e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004052:	4422      	add	r2, r4
 8004054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800405c:	3302      	adds	r3, #2
 800405e:	e7c7      	b.n	8003ff0 <_printf_common+0x58>
 8004060:	2301      	movs	r3, #1
 8004062:	4622      	mov	r2, r4
 8004064:	4649      	mov	r1, r9
 8004066:	4638      	mov	r0, r7
 8004068:	47c0      	blx	r8
 800406a:	3001      	adds	r0, #1
 800406c:	d0e6      	beq.n	800403c <_printf_common+0xa4>
 800406e:	3601      	adds	r6, #1
 8004070:	e7d9      	b.n	8004026 <_printf_common+0x8e>
	...

08004074 <_printf_i>:
 8004074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004078:	7e0f      	ldrb	r7, [r1, #24]
 800407a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800407c:	2f78      	cmp	r7, #120	; 0x78
 800407e:	4691      	mov	r9, r2
 8004080:	4680      	mov	r8, r0
 8004082:	460c      	mov	r4, r1
 8004084:	469a      	mov	sl, r3
 8004086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800408a:	d807      	bhi.n	800409c <_printf_i+0x28>
 800408c:	2f62      	cmp	r7, #98	; 0x62
 800408e:	d80a      	bhi.n	80040a6 <_printf_i+0x32>
 8004090:	2f00      	cmp	r7, #0
 8004092:	f000 80d4 	beq.w	800423e <_printf_i+0x1ca>
 8004096:	2f58      	cmp	r7, #88	; 0x58
 8004098:	f000 80c0 	beq.w	800421c <_printf_i+0x1a8>
 800409c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040a4:	e03a      	b.n	800411c <_printf_i+0xa8>
 80040a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040aa:	2b15      	cmp	r3, #21
 80040ac:	d8f6      	bhi.n	800409c <_printf_i+0x28>
 80040ae:	a101      	add	r1, pc, #4	; (adr r1, 80040b4 <_printf_i+0x40>)
 80040b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b4:	0800410d 	.word	0x0800410d
 80040b8:	08004121 	.word	0x08004121
 80040bc:	0800409d 	.word	0x0800409d
 80040c0:	0800409d 	.word	0x0800409d
 80040c4:	0800409d 	.word	0x0800409d
 80040c8:	0800409d 	.word	0x0800409d
 80040cc:	08004121 	.word	0x08004121
 80040d0:	0800409d 	.word	0x0800409d
 80040d4:	0800409d 	.word	0x0800409d
 80040d8:	0800409d 	.word	0x0800409d
 80040dc:	0800409d 	.word	0x0800409d
 80040e0:	08004225 	.word	0x08004225
 80040e4:	0800414d 	.word	0x0800414d
 80040e8:	080041df 	.word	0x080041df
 80040ec:	0800409d 	.word	0x0800409d
 80040f0:	0800409d 	.word	0x0800409d
 80040f4:	08004247 	.word	0x08004247
 80040f8:	0800409d 	.word	0x0800409d
 80040fc:	0800414d 	.word	0x0800414d
 8004100:	0800409d 	.word	0x0800409d
 8004104:	0800409d 	.word	0x0800409d
 8004108:	080041e7 	.word	0x080041e7
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	1d1a      	adds	r2, r3, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	602a      	str	r2, [r5, #0]
 8004114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800411c:	2301      	movs	r3, #1
 800411e:	e09f      	b.n	8004260 <_printf_i+0x1ec>
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	682b      	ldr	r3, [r5, #0]
 8004124:	0607      	lsls	r7, r0, #24
 8004126:	f103 0104 	add.w	r1, r3, #4
 800412a:	6029      	str	r1, [r5, #0]
 800412c:	d501      	bpl.n	8004132 <_printf_i+0xbe>
 800412e:	681e      	ldr	r6, [r3, #0]
 8004130:	e003      	b.n	800413a <_printf_i+0xc6>
 8004132:	0646      	lsls	r6, r0, #25
 8004134:	d5fb      	bpl.n	800412e <_printf_i+0xba>
 8004136:	f9b3 6000 	ldrsh.w	r6, [r3]
 800413a:	2e00      	cmp	r6, #0
 800413c:	da03      	bge.n	8004146 <_printf_i+0xd2>
 800413e:	232d      	movs	r3, #45	; 0x2d
 8004140:	4276      	negs	r6, r6
 8004142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004146:	485a      	ldr	r0, [pc, #360]	; (80042b0 <_printf_i+0x23c>)
 8004148:	230a      	movs	r3, #10
 800414a:	e012      	b.n	8004172 <_printf_i+0xfe>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	6820      	ldr	r0, [r4, #0]
 8004150:	1d19      	adds	r1, r3, #4
 8004152:	6029      	str	r1, [r5, #0]
 8004154:	0605      	lsls	r5, r0, #24
 8004156:	d501      	bpl.n	800415c <_printf_i+0xe8>
 8004158:	681e      	ldr	r6, [r3, #0]
 800415a:	e002      	b.n	8004162 <_printf_i+0xee>
 800415c:	0641      	lsls	r1, r0, #25
 800415e:	d5fb      	bpl.n	8004158 <_printf_i+0xe4>
 8004160:	881e      	ldrh	r6, [r3, #0]
 8004162:	4853      	ldr	r0, [pc, #332]	; (80042b0 <_printf_i+0x23c>)
 8004164:	2f6f      	cmp	r7, #111	; 0x6f
 8004166:	bf0c      	ite	eq
 8004168:	2308      	moveq	r3, #8
 800416a:	230a      	movne	r3, #10
 800416c:	2100      	movs	r1, #0
 800416e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004172:	6865      	ldr	r5, [r4, #4]
 8004174:	60a5      	str	r5, [r4, #8]
 8004176:	2d00      	cmp	r5, #0
 8004178:	bfa2      	ittt	ge
 800417a:	6821      	ldrge	r1, [r4, #0]
 800417c:	f021 0104 	bicge.w	r1, r1, #4
 8004180:	6021      	strge	r1, [r4, #0]
 8004182:	b90e      	cbnz	r6, 8004188 <_printf_i+0x114>
 8004184:	2d00      	cmp	r5, #0
 8004186:	d04b      	beq.n	8004220 <_printf_i+0x1ac>
 8004188:	4615      	mov	r5, r2
 800418a:	fbb6 f1f3 	udiv	r1, r6, r3
 800418e:	fb03 6711 	mls	r7, r3, r1, r6
 8004192:	5dc7      	ldrb	r7, [r0, r7]
 8004194:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004198:	4637      	mov	r7, r6
 800419a:	42bb      	cmp	r3, r7
 800419c:	460e      	mov	r6, r1
 800419e:	d9f4      	bls.n	800418a <_printf_i+0x116>
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d10b      	bne.n	80041bc <_printf_i+0x148>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	07de      	lsls	r6, r3, #31
 80041a8:	d508      	bpl.n	80041bc <_printf_i+0x148>
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	6861      	ldr	r1, [r4, #4]
 80041ae:	4299      	cmp	r1, r3
 80041b0:	bfde      	ittt	le
 80041b2:	2330      	movle	r3, #48	; 0x30
 80041b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041bc:	1b52      	subs	r2, r2, r5
 80041be:	6122      	str	r2, [r4, #16]
 80041c0:	f8cd a000 	str.w	sl, [sp]
 80041c4:	464b      	mov	r3, r9
 80041c6:	aa03      	add	r2, sp, #12
 80041c8:	4621      	mov	r1, r4
 80041ca:	4640      	mov	r0, r8
 80041cc:	f7ff fee4 	bl	8003f98 <_printf_common>
 80041d0:	3001      	adds	r0, #1
 80041d2:	d14a      	bne.n	800426a <_printf_i+0x1f6>
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	b004      	add	sp, #16
 80041da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	f043 0320 	orr.w	r3, r3, #32
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	4833      	ldr	r0, [pc, #204]	; (80042b4 <_printf_i+0x240>)
 80041e8:	2778      	movs	r7, #120	; 0x78
 80041ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	6829      	ldr	r1, [r5, #0]
 80041f2:	061f      	lsls	r7, r3, #24
 80041f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80041f8:	d402      	bmi.n	8004200 <_printf_i+0x18c>
 80041fa:	065f      	lsls	r7, r3, #25
 80041fc:	bf48      	it	mi
 80041fe:	b2b6      	uxthmi	r6, r6
 8004200:	07df      	lsls	r7, r3, #31
 8004202:	bf48      	it	mi
 8004204:	f043 0320 	orrmi.w	r3, r3, #32
 8004208:	6029      	str	r1, [r5, #0]
 800420a:	bf48      	it	mi
 800420c:	6023      	strmi	r3, [r4, #0]
 800420e:	b91e      	cbnz	r6, 8004218 <_printf_i+0x1a4>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	f023 0320 	bic.w	r3, r3, #32
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	2310      	movs	r3, #16
 800421a:	e7a7      	b.n	800416c <_printf_i+0xf8>
 800421c:	4824      	ldr	r0, [pc, #144]	; (80042b0 <_printf_i+0x23c>)
 800421e:	e7e4      	b.n	80041ea <_printf_i+0x176>
 8004220:	4615      	mov	r5, r2
 8004222:	e7bd      	b.n	80041a0 <_printf_i+0x12c>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	6826      	ldr	r6, [r4, #0]
 8004228:	6961      	ldr	r1, [r4, #20]
 800422a:	1d18      	adds	r0, r3, #4
 800422c:	6028      	str	r0, [r5, #0]
 800422e:	0635      	lsls	r5, r6, #24
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	d501      	bpl.n	8004238 <_printf_i+0x1c4>
 8004234:	6019      	str	r1, [r3, #0]
 8004236:	e002      	b.n	800423e <_printf_i+0x1ca>
 8004238:	0670      	lsls	r0, r6, #25
 800423a:	d5fb      	bpl.n	8004234 <_printf_i+0x1c0>
 800423c:	8019      	strh	r1, [r3, #0]
 800423e:	2300      	movs	r3, #0
 8004240:	6123      	str	r3, [r4, #16]
 8004242:	4615      	mov	r5, r2
 8004244:	e7bc      	b.n	80041c0 <_printf_i+0x14c>
 8004246:	682b      	ldr	r3, [r5, #0]
 8004248:	1d1a      	adds	r2, r3, #4
 800424a:	602a      	str	r2, [r5, #0]
 800424c:	681d      	ldr	r5, [r3, #0]
 800424e:	6862      	ldr	r2, [r4, #4]
 8004250:	2100      	movs	r1, #0
 8004252:	4628      	mov	r0, r5
 8004254:	f7fb ffdc 	bl	8000210 <memchr>
 8004258:	b108      	cbz	r0, 800425e <_printf_i+0x1ea>
 800425a:	1b40      	subs	r0, r0, r5
 800425c:	6060      	str	r0, [r4, #4]
 800425e:	6863      	ldr	r3, [r4, #4]
 8004260:	6123      	str	r3, [r4, #16]
 8004262:	2300      	movs	r3, #0
 8004264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004268:	e7aa      	b.n	80041c0 <_printf_i+0x14c>
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	462a      	mov	r2, r5
 800426e:	4649      	mov	r1, r9
 8004270:	4640      	mov	r0, r8
 8004272:	47d0      	blx	sl
 8004274:	3001      	adds	r0, #1
 8004276:	d0ad      	beq.n	80041d4 <_printf_i+0x160>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	079b      	lsls	r3, r3, #30
 800427c:	d413      	bmi.n	80042a6 <_printf_i+0x232>
 800427e:	68e0      	ldr	r0, [r4, #12]
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	4298      	cmp	r0, r3
 8004284:	bfb8      	it	lt
 8004286:	4618      	movlt	r0, r3
 8004288:	e7a6      	b.n	80041d8 <_printf_i+0x164>
 800428a:	2301      	movs	r3, #1
 800428c:	4632      	mov	r2, r6
 800428e:	4649      	mov	r1, r9
 8004290:	4640      	mov	r0, r8
 8004292:	47d0      	blx	sl
 8004294:	3001      	adds	r0, #1
 8004296:	d09d      	beq.n	80041d4 <_printf_i+0x160>
 8004298:	3501      	adds	r5, #1
 800429a:	68e3      	ldr	r3, [r4, #12]
 800429c:	9903      	ldr	r1, [sp, #12]
 800429e:	1a5b      	subs	r3, r3, r1
 80042a0:	42ab      	cmp	r3, r5
 80042a2:	dcf2      	bgt.n	800428a <_printf_i+0x216>
 80042a4:	e7eb      	b.n	800427e <_printf_i+0x20a>
 80042a6:	2500      	movs	r5, #0
 80042a8:	f104 0619 	add.w	r6, r4, #25
 80042ac:	e7f5      	b.n	800429a <_printf_i+0x226>
 80042ae:	bf00      	nop
 80042b0:	08005271 	.word	0x08005271
 80042b4:	08005282 	.word	0x08005282

080042b8 <memmove>:
 80042b8:	4288      	cmp	r0, r1
 80042ba:	b510      	push	{r4, lr}
 80042bc:	eb01 0402 	add.w	r4, r1, r2
 80042c0:	d902      	bls.n	80042c8 <memmove+0x10>
 80042c2:	4284      	cmp	r4, r0
 80042c4:	4623      	mov	r3, r4
 80042c6:	d807      	bhi.n	80042d8 <memmove+0x20>
 80042c8:	1e43      	subs	r3, r0, #1
 80042ca:	42a1      	cmp	r1, r4
 80042cc:	d008      	beq.n	80042e0 <memmove+0x28>
 80042ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042d6:	e7f8      	b.n	80042ca <memmove+0x12>
 80042d8:	4402      	add	r2, r0
 80042da:	4601      	mov	r1, r0
 80042dc:	428a      	cmp	r2, r1
 80042de:	d100      	bne.n	80042e2 <memmove+0x2a>
 80042e0:	bd10      	pop	{r4, pc}
 80042e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042ea:	e7f7      	b.n	80042dc <memmove+0x24>

080042ec <_sbrk_r>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	4d06      	ldr	r5, [pc, #24]	; (8004308 <_sbrk_r+0x1c>)
 80042f0:	2300      	movs	r3, #0
 80042f2:	4604      	mov	r4, r0
 80042f4:	4608      	mov	r0, r1
 80042f6:	602b      	str	r3, [r5, #0]
 80042f8:	f7fd f9cc 	bl	8001694 <_sbrk>
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	d102      	bne.n	8004306 <_sbrk_r+0x1a>
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	b103      	cbz	r3, 8004306 <_sbrk_r+0x1a>
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	bd38      	pop	{r3, r4, r5, pc}
 8004308:	2000025c 	.word	0x2000025c

0800430c <memcpy>:
 800430c:	440a      	add	r2, r1
 800430e:	4291      	cmp	r1, r2
 8004310:	f100 33ff 	add.w	r3, r0, #4294967295
 8004314:	d100      	bne.n	8004318 <memcpy+0xc>
 8004316:	4770      	bx	lr
 8004318:	b510      	push	{r4, lr}
 800431a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800431e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004322:	4291      	cmp	r1, r2
 8004324:	d1f9      	bne.n	800431a <memcpy+0xe>
 8004326:	bd10      	pop	{r4, pc}

08004328 <_realloc_r>:
 8004328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800432c:	4680      	mov	r8, r0
 800432e:	4614      	mov	r4, r2
 8004330:	460e      	mov	r6, r1
 8004332:	b921      	cbnz	r1, 800433e <_realloc_r+0x16>
 8004334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004338:	4611      	mov	r1, r2
 800433a:	f7ff bc49 	b.w	8003bd0 <_malloc_r>
 800433e:	b92a      	cbnz	r2, 800434c <_realloc_r+0x24>
 8004340:	f7ff fbda 	bl	8003af8 <_free_r>
 8004344:	4625      	mov	r5, r4
 8004346:	4628      	mov	r0, r5
 8004348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800434c:	f000 f81b 	bl	8004386 <_malloc_usable_size_r>
 8004350:	4284      	cmp	r4, r0
 8004352:	4607      	mov	r7, r0
 8004354:	d802      	bhi.n	800435c <_realloc_r+0x34>
 8004356:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800435a:	d812      	bhi.n	8004382 <_realloc_r+0x5a>
 800435c:	4621      	mov	r1, r4
 800435e:	4640      	mov	r0, r8
 8004360:	f7ff fc36 	bl	8003bd0 <_malloc_r>
 8004364:	4605      	mov	r5, r0
 8004366:	2800      	cmp	r0, #0
 8004368:	d0ed      	beq.n	8004346 <_realloc_r+0x1e>
 800436a:	42bc      	cmp	r4, r7
 800436c:	4622      	mov	r2, r4
 800436e:	4631      	mov	r1, r6
 8004370:	bf28      	it	cs
 8004372:	463a      	movcs	r2, r7
 8004374:	f7ff ffca 	bl	800430c <memcpy>
 8004378:	4631      	mov	r1, r6
 800437a:	4640      	mov	r0, r8
 800437c:	f7ff fbbc 	bl	8003af8 <_free_r>
 8004380:	e7e1      	b.n	8004346 <_realloc_r+0x1e>
 8004382:	4635      	mov	r5, r6
 8004384:	e7df      	b.n	8004346 <_realloc_r+0x1e>

08004386 <_malloc_usable_size_r>:
 8004386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800438a:	1f18      	subs	r0, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	bfbc      	itt	lt
 8004390:	580b      	ldrlt	r3, [r1, r0]
 8004392:	18c0      	addlt	r0, r0, r3
 8004394:	4770      	bx	lr
	...

08004398 <pow>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	ed2d 8b02 	vpush	{d8}
 800439e:	eeb0 8a40 	vmov.f32	s16, s0
 80043a2:	eef0 8a60 	vmov.f32	s17, s1
 80043a6:	ec55 4b11 	vmov	r4, r5, d1
 80043aa:	f000 f871 	bl	8004490 <__ieee754_pow>
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	4620      	mov	r0, r4
 80043b4:	4629      	mov	r1, r5
 80043b6:	ec57 6b10 	vmov	r6, r7, d0
 80043ba:	f7fc fbcf 	bl	8000b5c <__aeabi_dcmpun>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d13b      	bne.n	800443a <pow+0xa2>
 80043c2:	ec51 0b18 	vmov	r0, r1, d8
 80043c6:	2200      	movs	r2, #0
 80043c8:	2300      	movs	r3, #0
 80043ca:	f7fc fb95 	bl	8000af8 <__aeabi_dcmpeq>
 80043ce:	b1b8      	cbz	r0, 8004400 <pow+0x68>
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	4620      	mov	r0, r4
 80043d6:	4629      	mov	r1, r5
 80043d8:	f7fc fb8e 	bl	8000af8 <__aeabi_dcmpeq>
 80043dc:	2800      	cmp	r0, #0
 80043de:	d146      	bne.n	800446e <pow+0xd6>
 80043e0:	ec45 4b10 	vmov	d0, r4, r5
 80043e4:	f000 f848 	bl	8004478 <finite>
 80043e8:	b338      	cbz	r0, 800443a <pow+0xa2>
 80043ea:	2200      	movs	r2, #0
 80043ec:	2300      	movs	r3, #0
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fc fb8b 	bl	8000b0c <__aeabi_dcmplt>
 80043f6:	b300      	cbz	r0, 800443a <pow+0xa2>
 80043f8:	f7ff fb52 	bl	8003aa0 <__errno>
 80043fc:	2322      	movs	r3, #34	; 0x22
 80043fe:	e01b      	b.n	8004438 <pow+0xa0>
 8004400:	ec47 6b10 	vmov	d0, r6, r7
 8004404:	f000 f838 	bl	8004478 <finite>
 8004408:	b9e0      	cbnz	r0, 8004444 <pow+0xac>
 800440a:	eeb0 0a48 	vmov.f32	s0, s16
 800440e:	eef0 0a68 	vmov.f32	s1, s17
 8004412:	f000 f831 	bl	8004478 <finite>
 8004416:	b1a8      	cbz	r0, 8004444 <pow+0xac>
 8004418:	ec45 4b10 	vmov	d0, r4, r5
 800441c:	f000 f82c 	bl	8004478 <finite>
 8004420:	b180      	cbz	r0, 8004444 <pow+0xac>
 8004422:	4632      	mov	r2, r6
 8004424:	463b      	mov	r3, r7
 8004426:	4630      	mov	r0, r6
 8004428:	4639      	mov	r1, r7
 800442a:	f7fc fb97 	bl	8000b5c <__aeabi_dcmpun>
 800442e:	2800      	cmp	r0, #0
 8004430:	d0e2      	beq.n	80043f8 <pow+0x60>
 8004432:	f7ff fb35 	bl	8003aa0 <__errno>
 8004436:	2321      	movs	r3, #33	; 0x21
 8004438:	6003      	str	r3, [r0, #0]
 800443a:	ecbd 8b02 	vpop	{d8}
 800443e:	ec47 6b10 	vmov	d0, r6, r7
 8004442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004444:	2200      	movs	r2, #0
 8004446:	2300      	movs	r3, #0
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	f7fc fb54 	bl	8000af8 <__aeabi_dcmpeq>
 8004450:	2800      	cmp	r0, #0
 8004452:	d0f2      	beq.n	800443a <pow+0xa2>
 8004454:	eeb0 0a48 	vmov.f32	s0, s16
 8004458:	eef0 0a68 	vmov.f32	s1, s17
 800445c:	f000 f80c 	bl	8004478 <finite>
 8004460:	2800      	cmp	r0, #0
 8004462:	d0ea      	beq.n	800443a <pow+0xa2>
 8004464:	ec45 4b10 	vmov	d0, r4, r5
 8004468:	f000 f806 	bl	8004478 <finite>
 800446c:	e7c3      	b.n	80043f6 <pow+0x5e>
 800446e:	4f01      	ldr	r7, [pc, #4]	; (8004474 <pow+0xdc>)
 8004470:	2600      	movs	r6, #0
 8004472:	e7e2      	b.n	800443a <pow+0xa2>
 8004474:	3ff00000 	.word	0x3ff00000

08004478 <finite>:
 8004478:	b082      	sub	sp, #8
 800447a:	ed8d 0b00 	vstr	d0, [sp]
 800447e:	9801      	ldr	r0, [sp, #4]
 8004480:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004484:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004488:	0fc0      	lsrs	r0, r0, #31
 800448a:	b002      	add	sp, #8
 800448c:	4770      	bx	lr
	...

08004490 <__ieee754_pow>:
 8004490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004494:	ed2d 8b06 	vpush	{d8-d10}
 8004498:	b089      	sub	sp, #36	; 0x24
 800449a:	ed8d 1b00 	vstr	d1, [sp]
 800449e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80044a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80044a6:	ea58 0102 	orrs.w	r1, r8, r2
 80044aa:	ec57 6b10 	vmov	r6, r7, d0
 80044ae:	d115      	bne.n	80044dc <__ieee754_pow+0x4c>
 80044b0:	19b3      	adds	r3, r6, r6
 80044b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80044b6:	4152      	adcs	r2, r2
 80044b8:	4299      	cmp	r1, r3
 80044ba:	4b89      	ldr	r3, [pc, #548]	; (80046e0 <__ieee754_pow+0x250>)
 80044bc:	4193      	sbcs	r3, r2
 80044be:	f080 84d1 	bcs.w	8004e64 <__ieee754_pow+0x9d4>
 80044c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044c6:	4630      	mov	r0, r6
 80044c8:	4639      	mov	r1, r7
 80044ca:	f7fb fef7 	bl	80002bc <__adddf3>
 80044ce:	ec41 0b10 	vmov	d0, r0, r1
 80044d2:	b009      	add	sp, #36	; 0x24
 80044d4:	ecbd 8b06 	vpop	{d8-d10}
 80044d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044dc:	4b81      	ldr	r3, [pc, #516]	; (80046e4 <__ieee754_pow+0x254>)
 80044de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80044e2:	429c      	cmp	r4, r3
 80044e4:	ee10 aa10 	vmov	sl, s0
 80044e8:	463d      	mov	r5, r7
 80044ea:	dc06      	bgt.n	80044fa <__ieee754_pow+0x6a>
 80044ec:	d101      	bne.n	80044f2 <__ieee754_pow+0x62>
 80044ee:	2e00      	cmp	r6, #0
 80044f0:	d1e7      	bne.n	80044c2 <__ieee754_pow+0x32>
 80044f2:	4598      	cmp	r8, r3
 80044f4:	dc01      	bgt.n	80044fa <__ieee754_pow+0x6a>
 80044f6:	d10f      	bne.n	8004518 <__ieee754_pow+0x88>
 80044f8:	b172      	cbz	r2, 8004518 <__ieee754_pow+0x88>
 80044fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80044fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004502:	ea55 050a 	orrs.w	r5, r5, sl
 8004506:	d1dc      	bne.n	80044c2 <__ieee754_pow+0x32>
 8004508:	e9dd 3200 	ldrd	r3, r2, [sp]
 800450c:	18db      	adds	r3, r3, r3
 800450e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004512:	4152      	adcs	r2, r2
 8004514:	429d      	cmp	r5, r3
 8004516:	e7d0      	b.n	80044ba <__ieee754_pow+0x2a>
 8004518:	2d00      	cmp	r5, #0
 800451a:	da3b      	bge.n	8004594 <__ieee754_pow+0x104>
 800451c:	4b72      	ldr	r3, [pc, #456]	; (80046e8 <__ieee754_pow+0x258>)
 800451e:	4598      	cmp	r8, r3
 8004520:	dc51      	bgt.n	80045c6 <__ieee754_pow+0x136>
 8004522:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004526:	4598      	cmp	r8, r3
 8004528:	f340 84ab 	ble.w	8004e82 <__ieee754_pow+0x9f2>
 800452c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004530:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004534:	2b14      	cmp	r3, #20
 8004536:	dd0f      	ble.n	8004558 <__ieee754_pow+0xc8>
 8004538:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800453c:	fa22 f103 	lsr.w	r1, r2, r3
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	4293      	cmp	r3, r2
 8004546:	f040 849c 	bne.w	8004e82 <__ieee754_pow+0x9f2>
 800454a:	f001 0101 	and.w	r1, r1, #1
 800454e:	f1c1 0302 	rsb	r3, r1, #2
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	b182      	cbz	r2, 8004578 <__ieee754_pow+0xe8>
 8004556:	e05f      	b.n	8004618 <__ieee754_pow+0x188>
 8004558:	2a00      	cmp	r2, #0
 800455a:	d15b      	bne.n	8004614 <__ieee754_pow+0x184>
 800455c:	f1c3 0314 	rsb	r3, r3, #20
 8004560:	fa48 f103 	asr.w	r1, r8, r3
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	4543      	cmp	r3, r8
 800456a:	f040 8487 	bne.w	8004e7c <__ieee754_pow+0x9ec>
 800456e:	f001 0101 	and.w	r1, r1, #1
 8004572:	f1c1 0302 	rsb	r3, r1, #2
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <__ieee754_pow+0x25c>)
 800457a:	4598      	cmp	r8, r3
 800457c:	d132      	bne.n	80045e4 <__ieee754_pow+0x154>
 800457e:	f1b9 0f00 	cmp.w	r9, #0
 8004582:	f280 8477 	bge.w	8004e74 <__ieee754_pow+0x9e4>
 8004586:	4959      	ldr	r1, [pc, #356]	; (80046ec <__ieee754_pow+0x25c>)
 8004588:	4632      	mov	r2, r6
 800458a:	463b      	mov	r3, r7
 800458c:	2000      	movs	r0, #0
 800458e:	f7fc f975 	bl	800087c <__aeabi_ddiv>
 8004592:	e79c      	b.n	80044ce <__ieee754_pow+0x3e>
 8004594:	2300      	movs	r3, #0
 8004596:	9304      	str	r3, [sp, #16]
 8004598:	2a00      	cmp	r2, #0
 800459a:	d13d      	bne.n	8004618 <__ieee754_pow+0x188>
 800459c:	4b51      	ldr	r3, [pc, #324]	; (80046e4 <__ieee754_pow+0x254>)
 800459e:	4598      	cmp	r8, r3
 80045a0:	d1ea      	bne.n	8004578 <__ieee754_pow+0xe8>
 80045a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80045a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80045aa:	ea53 030a 	orrs.w	r3, r3, sl
 80045ae:	f000 8459 	beq.w	8004e64 <__ieee754_pow+0x9d4>
 80045b2:	4b4f      	ldr	r3, [pc, #316]	; (80046f0 <__ieee754_pow+0x260>)
 80045b4:	429c      	cmp	r4, r3
 80045b6:	dd08      	ble.n	80045ca <__ieee754_pow+0x13a>
 80045b8:	f1b9 0f00 	cmp.w	r9, #0
 80045bc:	f2c0 8456 	blt.w	8004e6c <__ieee754_pow+0x9dc>
 80045c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045c4:	e783      	b.n	80044ce <__ieee754_pow+0x3e>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e7e5      	b.n	8004596 <__ieee754_pow+0x106>
 80045ca:	f1b9 0f00 	cmp.w	r9, #0
 80045ce:	f04f 0000 	mov.w	r0, #0
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	f6bf af7a 	bge.w	80044ce <__ieee754_pow+0x3e>
 80045da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80045de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80045e2:	e774      	b.n	80044ce <__ieee754_pow+0x3e>
 80045e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80045e8:	d106      	bne.n	80045f8 <__ieee754_pow+0x168>
 80045ea:	4632      	mov	r2, r6
 80045ec:	463b      	mov	r3, r7
 80045ee:	4630      	mov	r0, r6
 80045f0:	4639      	mov	r1, r7
 80045f2:	f7fc f819 	bl	8000628 <__aeabi_dmul>
 80045f6:	e76a      	b.n	80044ce <__ieee754_pow+0x3e>
 80045f8:	4b3e      	ldr	r3, [pc, #248]	; (80046f4 <__ieee754_pow+0x264>)
 80045fa:	4599      	cmp	r9, r3
 80045fc:	d10c      	bne.n	8004618 <__ieee754_pow+0x188>
 80045fe:	2d00      	cmp	r5, #0
 8004600:	db0a      	blt.n	8004618 <__ieee754_pow+0x188>
 8004602:	ec47 6b10 	vmov	d0, r6, r7
 8004606:	b009      	add	sp, #36	; 0x24
 8004608:	ecbd 8b06 	vpop	{d8-d10}
 800460c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	f000 bd20 	b.w	8005054 <__ieee754_sqrt>
 8004614:	2300      	movs	r3, #0
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	ec47 6b10 	vmov	d0, r6, r7
 800461c:	f000 fc62 	bl	8004ee4 <fabs>
 8004620:	ec51 0b10 	vmov	r0, r1, d0
 8004624:	f1ba 0f00 	cmp.w	sl, #0
 8004628:	d129      	bne.n	800467e <__ieee754_pow+0x1ee>
 800462a:	b124      	cbz	r4, 8004636 <__ieee754_pow+0x1a6>
 800462c:	4b2f      	ldr	r3, [pc, #188]	; (80046ec <__ieee754_pow+0x25c>)
 800462e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004632:	429a      	cmp	r2, r3
 8004634:	d123      	bne.n	800467e <__ieee754_pow+0x1ee>
 8004636:	f1b9 0f00 	cmp.w	r9, #0
 800463a:	da05      	bge.n	8004648 <__ieee754_pow+0x1b8>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	2000      	movs	r0, #0
 8004642:	492a      	ldr	r1, [pc, #168]	; (80046ec <__ieee754_pow+0x25c>)
 8004644:	f7fc f91a 	bl	800087c <__aeabi_ddiv>
 8004648:	2d00      	cmp	r5, #0
 800464a:	f6bf af40 	bge.w	80044ce <__ieee754_pow+0x3e>
 800464e:	9b04      	ldr	r3, [sp, #16]
 8004650:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004654:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004658:	431c      	orrs	r4, r3
 800465a:	d108      	bne.n	800466e <__ieee754_pow+0x1de>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	f7fb fe28 	bl	80002b8 <__aeabi_dsub>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	e78f      	b.n	800458e <__ieee754_pow+0xfe>
 800466e:	9b04      	ldr	r3, [sp, #16]
 8004670:	2b01      	cmp	r3, #1
 8004672:	f47f af2c 	bne.w	80044ce <__ieee754_pow+0x3e>
 8004676:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800467a:	4619      	mov	r1, r3
 800467c:	e727      	b.n	80044ce <__ieee754_pow+0x3e>
 800467e:	0feb      	lsrs	r3, r5, #31
 8004680:	3b01      	subs	r3, #1
 8004682:	9306      	str	r3, [sp, #24]
 8004684:	9a06      	ldr	r2, [sp, #24]
 8004686:	9b04      	ldr	r3, [sp, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	d102      	bne.n	8004692 <__ieee754_pow+0x202>
 800468c:	4632      	mov	r2, r6
 800468e:	463b      	mov	r3, r7
 8004690:	e7e6      	b.n	8004660 <__ieee754_pow+0x1d0>
 8004692:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <__ieee754_pow+0x268>)
 8004694:	4598      	cmp	r8, r3
 8004696:	f340 80fb 	ble.w	8004890 <__ieee754_pow+0x400>
 800469a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800469e:	4598      	cmp	r8, r3
 80046a0:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <__ieee754_pow+0x260>)
 80046a2:	dd0c      	ble.n	80046be <__ieee754_pow+0x22e>
 80046a4:	429c      	cmp	r4, r3
 80046a6:	dc0f      	bgt.n	80046c8 <__ieee754_pow+0x238>
 80046a8:	f1b9 0f00 	cmp.w	r9, #0
 80046ac:	da0f      	bge.n	80046ce <__ieee754_pow+0x23e>
 80046ae:	2000      	movs	r0, #0
 80046b0:	b009      	add	sp, #36	; 0x24
 80046b2:	ecbd 8b06 	vpop	{d8-d10}
 80046b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	f000 bcc2 	b.w	8005042 <__math_oflow>
 80046be:	429c      	cmp	r4, r3
 80046c0:	dbf2      	blt.n	80046a8 <__ieee754_pow+0x218>
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <__ieee754_pow+0x25c>)
 80046c4:	429c      	cmp	r4, r3
 80046c6:	dd19      	ble.n	80046fc <__ieee754_pow+0x26c>
 80046c8:	f1b9 0f00 	cmp.w	r9, #0
 80046cc:	dcef      	bgt.n	80046ae <__ieee754_pow+0x21e>
 80046ce:	2000      	movs	r0, #0
 80046d0:	b009      	add	sp, #36	; 0x24
 80046d2:	ecbd 8b06 	vpop	{d8-d10}
 80046d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046da:	f000 bca9 	b.w	8005030 <__math_uflow>
 80046de:	bf00      	nop
 80046e0:	fff00000 	.word	0xfff00000
 80046e4:	7ff00000 	.word	0x7ff00000
 80046e8:	433fffff 	.word	0x433fffff
 80046ec:	3ff00000 	.word	0x3ff00000
 80046f0:	3fefffff 	.word	0x3fefffff
 80046f4:	3fe00000 	.word	0x3fe00000
 80046f8:	41e00000 	.word	0x41e00000
 80046fc:	4b60      	ldr	r3, [pc, #384]	; (8004880 <__ieee754_pow+0x3f0>)
 80046fe:	2200      	movs	r2, #0
 8004700:	f7fb fdda 	bl	80002b8 <__aeabi_dsub>
 8004704:	a354      	add	r3, pc, #336	; (adr r3, 8004858 <__ieee754_pow+0x3c8>)
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	4604      	mov	r4, r0
 800470c:	460d      	mov	r5, r1
 800470e:	f7fb ff8b 	bl	8000628 <__aeabi_dmul>
 8004712:	a353      	add	r3, pc, #332	; (adr r3, 8004860 <__ieee754_pow+0x3d0>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	4606      	mov	r6, r0
 800471a:	460f      	mov	r7, r1
 800471c:	4620      	mov	r0, r4
 800471e:	4629      	mov	r1, r5
 8004720:	f7fb ff82 	bl	8000628 <__aeabi_dmul>
 8004724:	4b57      	ldr	r3, [pc, #348]	; (8004884 <__ieee754_pow+0x3f4>)
 8004726:	4682      	mov	sl, r0
 8004728:	468b      	mov	fp, r1
 800472a:	2200      	movs	r2, #0
 800472c:	4620      	mov	r0, r4
 800472e:	4629      	mov	r1, r5
 8004730:	f7fb ff7a 	bl	8000628 <__aeabi_dmul>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	a14b      	add	r1, pc, #300	; (adr r1, 8004868 <__ieee754_pow+0x3d8>)
 800473a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800473e:	f7fb fdbb 	bl	80002b8 <__aeabi_dsub>
 8004742:	4622      	mov	r2, r4
 8004744:	462b      	mov	r3, r5
 8004746:	f7fb ff6f 	bl	8000628 <__aeabi_dmul>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	2000      	movs	r0, #0
 8004750:	494d      	ldr	r1, [pc, #308]	; (8004888 <__ieee754_pow+0x3f8>)
 8004752:	f7fb fdb1 	bl	80002b8 <__aeabi_dsub>
 8004756:	4622      	mov	r2, r4
 8004758:	4680      	mov	r8, r0
 800475a:	4689      	mov	r9, r1
 800475c:	462b      	mov	r3, r5
 800475e:	4620      	mov	r0, r4
 8004760:	4629      	mov	r1, r5
 8004762:	f7fb ff61 	bl	8000628 <__aeabi_dmul>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4640      	mov	r0, r8
 800476c:	4649      	mov	r1, r9
 800476e:	f7fb ff5b 	bl	8000628 <__aeabi_dmul>
 8004772:	a33f      	add	r3, pc, #252	; (adr r3, 8004870 <__ieee754_pow+0x3e0>)
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f7fb ff56 	bl	8000628 <__aeabi_dmul>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4650      	mov	r0, sl
 8004782:	4659      	mov	r1, fp
 8004784:	f7fb fd98 	bl	80002b8 <__aeabi_dsub>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4680      	mov	r8, r0
 800478e:	4689      	mov	r9, r1
 8004790:	4630      	mov	r0, r6
 8004792:	4639      	mov	r1, r7
 8004794:	f7fb fd92 	bl	80002bc <__adddf3>
 8004798:	2000      	movs	r0, #0
 800479a:	4632      	mov	r2, r6
 800479c:	463b      	mov	r3, r7
 800479e:	4604      	mov	r4, r0
 80047a0:	460d      	mov	r5, r1
 80047a2:	f7fb fd89 	bl	80002b8 <__aeabi_dsub>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4640      	mov	r0, r8
 80047ac:	4649      	mov	r1, r9
 80047ae:	f7fb fd83 	bl	80002b8 <__aeabi_dsub>
 80047b2:	9b04      	ldr	r3, [sp, #16]
 80047b4:	9a06      	ldr	r2, [sp, #24]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	4313      	orrs	r3, r2
 80047ba:	4682      	mov	sl, r0
 80047bc:	468b      	mov	fp, r1
 80047be:	f040 81e7 	bne.w	8004b90 <__ieee754_pow+0x700>
 80047c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004878 <__ieee754_pow+0x3e8>
 80047c6:	eeb0 8a47 	vmov.f32	s16, s14
 80047ca:	eef0 8a67 	vmov.f32	s17, s15
 80047ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80047d2:	2600      	movs	r6, #0
 80047d4:	4632      	mov	r2, r6
 80047d6:	463b      	mov	r3, r7
 80047d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047dc:	f7fb fd6c 	bl	80002b8 <__aeabi_dsub>
 80047e0:	4622      	mov	r2, r4
 80047e2:	462b      	mov	r3, r5
 80047e4:	f7fb ff20 	bl	8000628 <__aeabi_dmul>
 80047e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047ec:	4680      	mov	r8, r0
 80047ee:	4689      	mov	r9, r1
 80047f0:	4650      	mov	r0, sl
 80047f2:	4659      	mov	r1, fp
 80047f4:	f7fb ff18 	bl	8000628 <__aeabi_dmul>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4640      	mov	r0, r8
 80047fe:	4649      	mov	r1, r9
 8004800:	f7fb fd5c 	bl	80002bc <__adddf3>
 8004804:	4632      	mov	r2, r6
 8004806:	463b      	mov	r3, r7
 8004808:	4680      	mov	r8, r0
 800480a:	4689      	mov	r9, r1
 800480c:	4620      	mov	r0, r4
 800480e:	4629      	mov	r1, r5
 8004810:	f7fb ff0a 	bl	8000628 <__aeabi_dmul>
 8004814:	460b      	mov	r3, r1
 8004816:	4604      	mov	r4, r0
 8004818:	460d      	mov	r5, r1
 800481a:	4602      	mov	r2, r0
 800481c:	4649      	mov	r1, r9
 800481e:	4640      	mov	r0, r8
 8004820:	f7fb fd4c 	bl	80002bc <__adddf3>
 8004824:	4b19      	ldr	r3, [pc, #100]	; (800488c <__ieee754_pow+0x3fc>)
 8004826:	4299      	cmp	r1, r3
 8004828:	ec45 4b19 	vmov	d9, r4, r5
 800482c:	4606      	mov	r6, r0
 800482e:	460f      	mov	r7, r1
 8004830:	468b      	mov	fp, r1
 8004832:	f340 82f0 	ble.w	8004e16 <__ieee754_pow+0x986>
 8004836:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800483a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800483e:	4303      	orrs	r3, r0
 8004840:	f000 81e4 	beq.w	8004c0c <__ieee754_pow+0x77c>
 8004844:	ec51 0b18 	vmov	r0, r1, d8
 8004848:	2200      	movs	r2, #0
 800484a:	2300      	movs	r3, #0
 800484c:	f7fc f95e 	bl	8000b0c <__aeabi_dcmplt>
 8004850:	3800      	subs	r0, #0
 8004852:	bf18      	it	ne
 8004854:	2001      	movne	r0, #1
 8004856:	e72b      	b.n	80046b0 <__ieee754_pow+0x220>
 8004858:	60000000 	.word	0x60000000
 800485c:	3ff71547 	.word	0x3ff71547
 8004860:	f85ddf44 	.word	0xf85ddf44
 8004864:	3e54ae0b 	.word	0x3e54ae0b
 8004868:	55555555 	.word	0x55555555
 800486c:	3fd55555 	.word	0x3fd55555
 8004870:	652b82fe 	.word	0x652b82fe
 8004874:	3ff71547 	.word	0x3ff71547
 8004878:	00000000 	.word	0x00000000
 800487c:	bff00000 	.word	0xbff00000
 8004880:	3ff00000 	.word	0x3ff00000
 8004884:	3fd00000 	.word	0x3fd00000
 8004888:	3fe00000 	.word	0x3fe00000
 800488c:	408fffff 	.word	0x408fffff
 8004890:	4bd5      	ldr	r3, [pc, #852]	; (8004be8 <__ieee754_pow+0x758>)
 8004892:	402b      	ands	r3, r5
 8004894:	2200      	movs	r2, #0
 8004896:	b92b      	cbnz	r3, 80048a4 <__ieee754_pow+0x414>
 8004898:	4bd4      	ldr	r3, [pc, #848]	; (8004bec <__ieee754_pow+0x75c>)
 800489a:	f7fb fec5 	bl	8000628 <__aeabi_dmul>
 800489e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80048a2:	460c      	mov	r4, r1
 80048a4:	1523      	asrs	r3, r4, #20
 80048a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80048aa:	4413      	add	r3, r2
 80048ac:	9305      	str	r3, [sp, #20]
 80048ae:	4bd0      	ldr	r3, [pc, #832]	; (8004bf0 <__ieee754_pow+0x760>)
 80048b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80048b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80048b8:	429c      	cmp	r4, r3
 80048ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80048be:	dd08      	ble.n	80048d2 <__ieee754_pow+0x442>
 80048c0:	4bcc      	ldr	r3, [pc, #816]	; (8004bf4 <__ieee754_pow+0x764>)
 80048c2:	429c      	cmp	r4, r3
 80048c4:	f340 8162 	ble.w	8004b8c <__ieee754_pow+0x6fc>
 80048c8:	9b05      	ldr	r3, [sp, #20]
 80048ca:	3301      	adds	r3, #1
 80048cc:	9305      	str	r3, [sp, #20]
 80048ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80048d2:	2400      	movs	r4, #0
 80048d4:	00e3      	lsls	r3, r4, #3
 80048d6:	9307      	str	r3, [sp, #28]
 80048d8:	4bc7      	ldr	r3, [pc, #796]	; (8004bf8 <__ieee754_pow+0x768>)
 80048da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80048de:	ed93 7b00 	vldr	d7, [r3]
 80048e2:	4629      	mov	r1, r5
 80048e4:	ec53 2b17 	vmov	r2, r3, d7
 80048e8:	eeb0 9a47 	vmov.f32	s18, s14
 80048ec:	eef0 9a67 	vmov.f32	s19, s15
 80048f0:	4682      	mov	sl, r0
 80048f2:	f7fb fce1 	bl	80002b8 <__aeabi_dsub>
 80048f6:	4652      	mov	r2, sl
 80048f8:	4606      	mov	r6, r0
 80048fa:	460f      	mov	r7, r1
 80048fc:	462b      	mov	r3, r5
 80048fe:	ec51 0b19 	vmov	r0, r1, d9
 8004902:	f7fb fcdb 	bl	80002bc <__adddf3>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	2000      	movs	r0, #0
 800490c:	49bb      	ldr	r1, [pc, #748]	; (8004bfc <__ieee754_pow+0x76c>)
 800490e:	f7fb ffb5 	bl	800087c <__aeabi_ddiv>
 8004912:	ec41 0b1a 	vmov	d10, r0, r1
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4630      	mov	r0, r6
 800491c:	4639      	mov	r1, r7
 800491e:	f7fb fe83 	bl	8000628 <__aeabi_dmul>
 8004922:	2300      	movs	r3, #0
 8004924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004928:	9302      	str	r3, [sp, #8]
 800492a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800492e:	46ab      	mov	fp, r5
 8004930:	106d      	asrs	r5, r5, #1
 8004932:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004936:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800493a:	ec41 0b18 	vmov	d8, r0, r1
 800493e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004942:	2200      	movs	r2, #0
 8004944:	4640      	mov	r0, r8
 8004946:	4649      	mov	r1, r9
 8004948:	4614      	mov	r4, r2
 800494a:	461d      	mov	r5, r3
 800494c:	f7fb fe6c 	bl	8000628 <__aeabi_dmul>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4630      	mov	r0, r6
 8004956:	4639      	mov	r1, r7
 8004958:	f7fb fcae 	bl	80002b8 <__aeabi_dsub>
 800495c:	ec53 2b19 	vmov	r2, r3, d9
 8004960:	4606      	mov	r6, r0
 8004962:	460f      	mov	r7, r1
 8004964:	4620      	mov	r0, r4
 8004966:	4629      	mov	r1, r5
 8004968:	f7fb fca6 	bl	80002b8 <__aeabi_dsub>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4650      	mov	r0, sl
 8004972:	4659      	mov	r1, fp
 8004974:	f7fb fca0 	bl	80002b8 <__aeabi_dsub>
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	f7fb fe54 	bl	8000628 <__aeabi_dmul>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4630      	mov	r0, r6
 8004986:	4639      	mov	r1, r7
 8004988:	f7fb fc96 	bl	80002b8 <__aeabi_dsub>
 800498c:	ec53 2b1a 	vmov	r2, r3, d10
 8004990:	f7fb fe4a 	bl	8000628 <__aeabi_dmul>
 8004994:	ec53 2b18 	vmov	r2, r3, d8
 8004998:	ec41 0b19 	vmov	d9, r0, r1
 800499c:	ec51 0b18 	vmov	r0, r1, d8
 80049a0:	f7fb fe42 	bl	8000628 <__aeabi_dmul>
 80049a4:	a37c      	add	r3, pc, #496	; (adr r3, 8004b98 <__ieee754_pow+0x708>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	4604      	mov	r4, r0
 80049ac:	460d      	mov	r5, r1
 80049ae:	f7fb fe3b 	bl	8000628 <__aeabi_dmul>
 80049b2:	a37b      	add	r3, pc, #492	; (adr r3, 8004ba0 <__ieee754_pow+0x710>)
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f7fb fc80 	bl	80002bc <__adddf3>
 80049bc:	4622      	mov	r2, r4
 80049be:	462b      	mov	r3, r5
 80049c0:	f7fb fe32 	bl	8000628 <__aeabi_dmul>
 80049c4:	a378      	add	r3, pc, #480	; (adr r3, 8004ba8 <__ieee754_pow+0x718>)
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f7fb fc77 	bl	80002bc <__adddf3>
 80049ce:	4622      	mov	r2, r4
 80049d0:	462b      	mov	r3, r5
 80049d2:	f7fb fe29 	bl	8000628 <__aeabi_dmul>
 80049d6:	a376      	add	r3, pc, #472	; (adr r3, 8004bb0 <__ieee754_pow+0x720>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f7fb fc6e 	bl	80002bc <__adddf3>
 80049e0:	4622      	mov	r2, r4
 80049e2:	462b      	mov	r3, r5
 80049e4:	f7fb fe20 	bl	8000628 <__aeabi_dmul>
 80049e8:	a373      	add	r3, pc, #460	; (adr r3, 8004bb8 <__ieee754_pow+0x728>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fb fc65 	bl	80002bc <__adddf3>
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	f7fb fe17 	bl	8000628 <__aeabi_dmul>
 80049fa:	a371      	add	r3, pc, #452	; (adr r3, 8004bc0 <__ieee754_pow+0x730>)
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f7fb fc5c 	bl	80002bc <__adddf3>
 8004a04:	4622      	mov	r2, r4
 8004a06:	4606      	mov	r6, r0
 8004a08:	460f      	mov	r7, r1
 8004a0a:	462b      	mov	r3, r5
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7fb fe0a 	bl	8000628 <__aeabi_dmul>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4630      	mov	r0, r6
 8004a1a:	4639      	mov	r1, r7
 8004a1c:	f7fb fe04 	bl	8000628 <__aeabi_dmul>
 8004a20:	4642      	mov	r2, r8
 8004a22:	4604      	mov	r4, r0
 8004a24:	460d      	mov	r5, r1
 8004a26:	464b      	mov	r3, r9
 8004a28:	ec51 0b18 	vmov	r0, r1, d8
 8004a2c:	f7fb fc46 	bl	80002bc <__adddf3>
 8004a30:	ec53 2b19 	vmov	r2, r3, d9
 8004a34:	f7fb fdf8 	bl	8000628 <__aeabi_dmul>
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	f7fb fc3e 	bl	80002bc <__adddf3>
 8004a40:	4642      	mov	r2, r8
 8004a42:	4682      	mov	sl, r0
 8004a44:	468b      	mov	fp, r1
 8004a46:	464b      	mov	r3, r9
 8004a48:	4640      	mov	r0, r8
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	f7fb fdec 	bl	8000628 <__aeabi_dmul>
 8004a50:	4b6b      	ldr	r3, [pc, #428]	; (8004c00 <__ieee754_pow+0x770>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	4606      	mov	r6, r0
 8004a56:	460f      	mov	r7, r1
 8004a58:	f7fb fc30 	bl	80002bc <__adddf3>
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	465b      	mov	r3, fp
 8004a60:	f7fb fc2c 	bl	80002bc <__adddf3>
 8004a64:	2000      	movs	r0, #0
 8004a66:	4604      	mov	r4, r0
 8004a68:	460d      	mov	r5, r1
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4640      	mov	r0, r8
 8004a70:	4649      	mov	r1, r9
 8004a72:	f7fb fdd9 	bl	8000628 <__aeabi_dmul>
 8004a76:	4b62      	ldr	r3, [pc, #392]	; (8004c00 <__ieee754_pow+0x770>)
 8004a78:	4680      	mov	r8, r0
 8004a7a:	4689      	mov	r9, r1
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4620      	mov	r0, r4
 8004a80:	4629      	mov	r1, r5
 8004a82:	f7fb fc19 	bl	80002b8 <__aeabi_dsub>
 8004a86:	4632      	mov	r2, r6
 8004a88:	463b      	mov	r3, r7
 8004a8a:	f7fb fc15 	bl	80002b8 <__aeabi_dsub>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4650      	mov	r0, sl
 8004a94:	4659      	mov	r1, fp
 8004a96:	f7fb fc0f 	bl	80002b8 <__aeabi_dsub>
 8004a9a:	ec53 2b18 	vmov	r2, r3, d8
 8004a9e:	f7fb fdc3 	bl	8000628 <__aeabi_dmul>
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	460f      	mov	r7, r1
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	ec51 0b19 	vmov	r0, r1, d9
 8004aae:	f7fb fdbb 	bl	8000628 <__aeabi_dmul>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	4639      	mov	r1, r7
 8004aba:	f7fb fbff 	bl	80002bc <__adddf3>
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460f      	mov	r7, r1
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	4649      	mov	r1, r9
 8004aca:	f7fb fbf7 	bl	80002bc <__adddf3>
 8004ace:	a33e      	add	r3, pc, #248	; (adr r3, 8004bc8 <__ieee754_pow+0x738>)
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	460d      	mov	r5, r1
 8004ada:	f7fb fda5 	bl	8000628 <__aeabi_dmul>
 8004ade:	4642      	mov	r2, r8
 8004ae0:	ec41 0b18 	vmov	d8, r0, r1
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	4629      	mov	r1, r5
 8004aea:	f7fb fbe5 	bl	80002b8 <__aeabi_dsub>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4630      	mov	r0, r6
 8004af4:	4639      	mov	r1, r7
 8004af6:	f7fb fbdf 	bl	80002b8 <__aeabi_dsub>
 8004afa:	a335      	add	r3, pc, #212	; (adr r3, 8004bd0 <__ieee754_pow+0x740>)
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	f7fb fd92 	bl	8000628 <__aeabi_dmul>
 8004b04:	a334      	add	r3, pc, #208	; (adr r3, 8004bd8 <__ieee754_pow+0x748>)
 8004b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	460f      	mov	r7, r1
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7fb fd89 	bl	8000628 <__aeabi_dmul>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	4639      	mov	r1, r7
 8004b1e:	f7fb fbcd 	bl	80002bc <__adddf3>
 8004b22:	9a07      	ldr	r2, [sp, #28]
 8004b24:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <__ieee754_pow+0x774>)
 8004b26:	4413      	add	r3, r2
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f7fb fbc6 	bl	80002bc <__adddf3>
 8004b30:	4682      	mov	sl, r0
 8004b32:	9805      	ldr	r0, [sp, #20]
 8004b34:	468b      	mov	fp, r1
 8004b36:	f7fb fd0d 	bl	8000554 <__aeabi_i2d>
 8004b3a:	9a07      	ldr	r2, [sp, #28]
 8004b3c:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <__ieee754_pow+0x778>)
 8004b3e:	4413      	add	r3, r2
 8004b40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b44:	4606      	mov	r6, r0
 8004b46:	460f      	mov	r7, r1
 8004b48:	4652      	mov	r2, sl
 8004b4a:	465b      	mov	r3, fp
 8004b4c:	ec51 0b18 	vmov	r0, r1, d8
 8004b50:	f7fb fbb4 	bl	80002bc <__adddf3>
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	f7fb fbb0 	bl	80002bc <__adddf3>
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	463b      	mov	r3, r7
 8004b60:	f7fb fbac 	bl	80002bc <__adddf3>
 8004b64:	2000      	movs	r0, #0
 8004b66:	4632      	mov	r2, r6
 8004b68:	463b      	mov	r3, r7
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	f7fb fba3 	bl	80002b8 <__aeabi_dsub>
 8004b72:	4642      	mov	r2, r8
 8004b74:	464b      	mov	r3, r9
 8004b76:	f7fb fb9f 	bl	80002b8 <__aeabi_dsub>
 8004b7a:	ec53 2b18 	vmov	r2, r3, d8
 8004b7e:	f7fb fb9b 	bl	80002b8 <__aeabi_dsub>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4650      	mov	r0, sl
 8004b88:	4659      	mov	r1, fp
 8004b8a:	e610      	b.n	80047ae <__ieee754_pow+0x31e>
 8004b8c:	2401      	movs	r4, #1
 8004b8e:	e6a1      	b.n	80048d4 <__ieee754_pow+0x444>
 8004b90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004be0 <__ieee754_pow+0x750>
 8004b94:	e617      	b.n	80047c6 <__ieee754_pow+0x336>
 8004b96:	bf00      	nop
 8004b98:	4a454eef 	.word	0x4a454eef
 8004b9c:	3fca7e28 	.word	0x3fca7e28
 8004ba0:	93c9db65 	.word	0x93c9db65
 8004ba4:	3fcd864a 	.word	0x3fcd864a
 8004ba8:	a91d4101 	.word	0xa91d4101
 8004bac:	3fd17460 	.word	0x3fd17460
 8004bb0:	518f264d 	.word	0x518f264d
 8004bb4:	3fd55555 	.word	0x3fd55555
 8004bb8:	db6fabff 	.word	0xdb6fabff
 8004bbc:	3fdb6db6 	.word	0x3fdb6db6
 8004bc0:	33333303 	.word	0x33333303
 8004bc4:	3fe33333 	.word	0x3fe33333
 8004bc8:	e0000000 	.word	0xe0000000
 8004bcc:	3feec709 	.word	0x3feec709
 8004bd0:	dc3a03fd 	.word	0xdc3a03fd
 8004bd4:	3feec709 	.word	0x3feec709
 8004bd8:	145b01f5 	.word	0x145b01f5
 8004bdc:	be3e2fe0 	.word	0xbe3e2fe0
 8004be0:	00000000 	.word	0x00000000
 8004be4:	3ff00000 	.word	0x3ff00000
 8004be8:	7ff00000 	.word	0x7ff00000
 8004bec:	43400000 	.word	0x43400000
 8004bf0:	0003988e 	.word	0x0003988e
 8004bf4:	000bb679 	.word	0x000bb679
 8004bf8:	08005298 	.word	0x08005298
 8004bfc:	3ff00000 	.word	0x3ff00000
 8004c00:	40080000 	.word	0x40080000
 8004c04:	080052b8 	.word	0x080052b8
 8004c08:	080052a8 	.word	0x080052a8
 8004c0c:	a3b3      	add	r3, pc, #716	; (adr r3, 8004edc <__ieee754_pow+0xa4c>)
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	4640      	mov	r0, r8
 8004c14:	4649      	mov	r1, r9
 8004c16:	f7fb fb51 	bl	80002bc <__adddf3>
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	ec41 0b1a 	vmov	d10, r0, r1
 8004c20:	462b      	mov	r3, r5
 8004c22:	4630      	mov	r0, r6
 8004c24:	4639      	mov	r1, r7
 8004c26:	f7fb fb47 	bl	80002b8 <__aeabi_dsub>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	ec51 0b1a 	vmov	r0, r1, d10
 8004c32:	f7fb ff89 	bl	8000b48 <__aeabi_dcmpgt>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	f47f ae04 	bne.w	8004844 <__ieee754_pow+0x3b4>
 8004c3c:	4aa2      	ldr	r2, [pc, #648]	; (8004ec8 <__ieee754_pow+0xa38>)
 8004c3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c42:	4293      	cmp	r3, r2
 8004c44:	f340 8107 	ble.w	8004e56 <__ieee754_pow+0x9c6>
 8004c48:	151b      	asrs	r3, r3, #20
 8004c4a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004c4e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004c52:	fa4a fa03 	asr.w	sl, sl, r3
 8004c56:	44da      	add	sl, fp
 8004c58:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004c5c:	489b      	ldr	r0, [pc, #620]	; (8004ecc <__ieee754_pow+0xa3c>)
 8004c5e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004c62:	4108      	asrs	r0, r1
 8004c64:	ea00 030a 	and.w	r3, r0, sl
 8004c68:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004c6c:	f1c1 0114 	rsb	r1, r1, #20
 8004c70:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004c74:	fa4a fa01 	asr.w	sl, sl, r1
 8004c78:	f1bb 0f00 	cmp.w	fp, #0
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	4620      	mov	r0, r4
 8004c82:	4629      	mov	r1, r5
 8004c84:	bfb8      	it	lt
 8004c86:	f1ca 0a00 	rsblt	sl, sl, #0
 8004c8a:	f7fb fb15 	bl	80002b8 <__aeabi_dsub>
 8004c8e:	ec41 0b19 	vmov	d9, r0, r1
 8004c92:	4642      	mov	r2, r8
 8004c94:	464b      	mov	r3, r9
 8004c96:	ec51 0b19 	vmov	r0, r1, d9
 8004c9a:	f7fb fb0f 	bl	80002bc <__adddf3>
 8004c9e:	a37a      	add	r3, pc, #488	; (adr r3, 8004e88 <__ieee754_pow+0x9f8>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	460d      	mov	r5, r1
 8004caa:	f7fb fcbd 	bl	8000628 <__aeabi_dmul>
 8004cae:	ec53 2b19 	vmov	r2, r3, d9
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	460f      	mov	r7, r1
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	f7fb fafd 	bl	80002b8 <__aeabi_dsub>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	f7fb faf7 	bl	80002b8 <__aeabi_dsub>
 8004cca:	a371      	add	r3, pc, #452	; (adr r3, 8004e90 <__ieee754_pow+0xa00>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fcaa 	bl	8000628 <__aeabi_dmul>
 8004cd4:	a370      	add	r3, pc, #448	; (adr r3, 8004e98 <__ieee754_pow+0xa08>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	4680      	mov	r8, r0
 8004cdc:	4689      	mov	r9, r1
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb fca1 	bl	8000628 <__aeabi_dmul>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4640      	mov	r0, r8
 8004cec:	4649      	mov	r1, r9
 8004cee:	f7fb fae5 	bl	80002bc <__adddf3>
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	4639      	mov	r1, r7
 8004cfe:	f7fb fadd 	bl	80002bc <__adddf3>
 8004d02:	4632      	mov	r2, r6
 8004d04:	463b      	mov	r3, r7
 8004d06:	4680      	mov	r8, r0
 8004d08:	4689      	mov	r9, r1
 8004d0a:	f7fb fad5 	bl	80002b8 <__aeabi_dsub>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4620      	mov	r0, r4
 8004d14:	4629      	mov	r1, r5
 8004d16:	f7fb facf 	bl	80002b8 <__aeabi_dsub>
 8004d1a:	4642      	mov	r2, r8
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	460f      	mov	r7, r1
 8004d20:	464b      	mov	r3, r9
 8004d22:	4640      	mov	r0, r8
 8004d24:	4649      	mov	r1, r9
 8004d26:	f7fb fc7f 	bl	8000628 <__aeabi_dmul>
 8004d2a:	a35d      	add	r3, pc, #372	; (adr r3, 8004ea0 <__ieee754_pow+0xa10>)
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	4604      	mov	r4, r0
 8004d32:	460d      	mov	r5, r1
 8004d34:	f7fb fc78 	bl	8000628 <__aeabi_dmul>
 8004d38:	a35b      	add	r3, pc, #364	; (adr r3, 8004ea8 <__ieee754_pow+0xa18>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fabb 	bl	80002b8 <__aeabi_dsub>
 8004d42:	4622      	mov	r2, r4
 8004d44:	462b      	mov	r3, r5
 8004d46:	f7fb fc6f 	bl	8000628 <__aeabi_dmul>
 8004d4a:	a359      	add	r3, pc, #356	; (adr r3, 8004eb0 <__ieee754_pow+0xa20>)
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f7fb fab4 	bl	80002bc <__adddf3>
 8004d54:	4622      	mov	r2, r4
 8004d56:	462b      	mov	r3, r5
 8004d58:	f7fb fc66 	bl	8000628 <__aeabi_dmul>
 8004d5c:	a356      	add	r3, pc, #344	; (adr r3, 8004eb8 <__ieee754_pow+0xa28>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f7fb faa9 	bl	80002b8 <__aeabi_dsub>
 8004d66:	4622      	mov	r2, r4
 8004d68:	462b      	mov	r3, r5
 8004d6a:	f7fb fc5d 	bl	8000628 <__aeabi_dmul>
 8004d6e:	a354      	add	r3, pc, #336	; (adr r3, 8004ec0 <__ieee754_pow+0xa30>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb faa2 	bl	80002bc <__adddf3>
 8004d78:	4622      	mov	r2, r4
 8004d7a:	462b      	mov	r3, r5
 8004d7c:	f7fb fc54 	bl	8000628 <__aeabi_dmul>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4640      	mov	r0, r8
 8004d86:	4649      	mov	r1, r9
 8004d88:	f7fb fa96 	bl	80002b8 <__aeabi_dsub>
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	460d      	mov	r5, r1
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4640      	mov	r0, r8
 8004d96:	4649      	mov	r1, r9
 8004d98:	f7fb fc46 	bl	8000628 <__aeabi_dmul>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	ec41 0b19 	vmov	d9, r0, r1
 8004da2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004da6:	4620      	mov	r0, r4
 8004da8:	4629      	mov	r1, r5
 8004daa:	f7fb fa85 	bl	80002b8 <__aeabi_dsub>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	ec51 0b19 	vmov	r0, r1, d9
 8004db6:	f7fb fd61 	bl	800087c <__aeabi_ddiv>
 8004dba:	4632      	mov	r2, r6
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	f7fb fc2f 	bl	8000628 <__aeabi_dmul>
 8004dca:	4632      	mov	r2, r6
 8004dcc:	463b      	mov	r3, r7
 8004dce:	f7fb fa75 	bl	80002bc <__adddf3>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	4629      	mov	r1, r5
 8004dda:	f7fb fa6d 	bl	80002b8 <__aeabi_dsub>
 8004dde:	4642      	mov	r2, r8
 8004de0:	464b      	mov	r3, r9
 8004de2:	f7fb fa69 	bl	80002b8 <__aeabi_dsub>
 8004de6:	460b      	mov	r3, r1
 8004de8:	4602      	mov	r2, r0
 8004dea:	4939      	ldr	r1, [pc, #228]	; (8004ed0 <__ieee754_pow+0xa40>)
 8004dec:	2000      	movs	r0, #0
 8004dee:	f7fb fa63 	bl	80002b8 <__aeabi_dsub>
 8004df2:	ec41 0b10 	vmov	d0, r0, r1
 8004df6:	ee10 3a90 	vmov	r3, s1
 8004dfa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e02:	da2b      	bge.n	8004e5c <__ieee754_pow+0x9cc>
 8004e04:	4650      	mov	r0, sl
 8004e06:	f000 f877 	bl	8004ef8 <scalbn>
 8004e0a:	ec51 0b10 	vmov	r0, r1, d0
 8004e0e:	ec53 2b18 	vmov	r2, r3, d8
 8004e12:	f7ff bbee 	b.w	80045f2 <__ieee754_pow+0x162>
 8004e16:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <__ieee754_pow+0xa44>)
 8004e18:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004e1c:	429e      	cmp	r6, r3
 8004e1e:	f77f af0d 	ble.w	8004c3c <__ieee754_pow+0x7ac>
 8004e22:	4b2d      	ldr	r3, [pc, #180]	; (8004ed8 <__ieee754_pow+0xa48>)
 8004e24:	440b      	add	r3, r1
 8004e26:	4303      	orrs	r3, r0
 8004e28:	d009      	beq.n	8004e3e <__ieee754_pow+0x9ae>
 8004e2a:	ec51 0b18 	vmov	r0, r1, d8
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2300      	movs	r3, #0
 8004e32:	f7fb fe6b 	bl	8000b0c <__aeabi_dcmplt>
 8004e36:	3800      	subs	r0, #0
 8004e38:	bf18      	it	ne
 8004e3a:	2001      	movne	r0, #1
 8004e3c:	e448      	b.n	80046d0 <__ieee754_pow+0x240>
 8004e3e:	4622      	mov	r2, r4
 8004e40:	462b      	mov	r3, r5
 8004e42:	f7fb fa39 	bl	80002b8 <__aeabi_dsub>
 8004e46:	4642      	mov	r2, r8
 8004e48:	464b      	mov	r3, r9
 8004e4a:	f7fb fe73 	bl	8000b34 <__aeabi_dcmpge>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	f43f aef4 	beq.w	8004c3c <__ieee754_pow+0x7ac>
 8004e54:	e7e9      	b.n	8004e2a <__ieee754_pow+0x99a>
 8004e56:	f04f 0a00 	mov.w	sl, #0
 8004e5a:	e71a      	b.n	8004c92 <__ieee754_pow+0x802>
 8004e5c:	ec51 0b10 	vmov	r0, r1, d0
 8004e60:	4619      	mov	r1, r3
 8004e62:	e7d4      	b.n	8004e0e <__ieee754_pow+0x97e>
 8004e64:	491a      	ldr	r1, [pc, #104]	; (8004ed0 <__ieee754_pow+0xa40>)
 8004e66:	2000      	movs	r0, #0
 8004e68:	f7ff bb31 	b.w	80044ce <__ieee754_pow+0x3e>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	f7ff bb2d 	b.w	80044ce <__ieee754_pow+0x3e>
 8004e74:	4630      	mov	r0, r6
 8004e76:	4639      	mov	r1, r7
 8004e78:	f7ff bb29 	b.w	80044ce <__ieee754_pow+0x3e>
 8004e7c:	9204      	str	r2, [sp, #16]
 8004e7e:	f7ff bb7b 	b.w	8004578 <__ieee754_pow+0xe8>
 8004e82:	2300      	movs	r3, #0
 8004e84:	f7ff bb65 	b.w	8004552 <__ieee754_pow+0xc2>
 8004e88:	00000000 	.word	0x00000000
 8004e8c:	3fe62e43 	.word	0x3fe62e43
 8004e90:	fefa39ef 	.word	0xfefa39ef
 8004e94:	3fe62e42 	.word	0x3fe62e42
 8004e98:	0ca86c39 	.word	0x0ca86c39
 8004e9c:	be205c61 	.word	0xbe205c61
 8004ea0:	72bea4d0 	.word	0x72bea4d0
 8004ea4:	3e663769 	.word	0x3e663769
 8004ea8:	c5d26bf1 	.word	0xc5d26bf1
 8004eac:	3ebbbd41 	.word	0x3ebbbd41
 8004eb0:	af25de2c 	.word	0xaf25de2c
 8004eb4:	3f11566a 	.word	0x3f11566a
 8004eb8:	16bebd93 	.word	0x16bebd93
 8004ebc:	3f66c16c 	.word	0x3f66c16c
 8004ec0:	5555553e 	.word	0x5555553e
 8004ec4:	3fc55555 	.word	0x3fc55555
 8004ec8:	3fe00000 	.word	0x3fe00000
 8004ecc:	fff00000 	.word	0xfff00000
 8004ed0:	3ff00000 	.word	0x3ff00000
 8004ed4:	4090cbff 	.word	0x4090cbff
 8004ed8:	3f6f3400 	.word	0x3f6f3400
 8004edc:	652b82fe 	.word	0x652b82fe
 8004ee0:	3c971547 	.word	0x3c971547

08004ee4 <fabs>:
 8004ee4:	ec51 0b10 	vmov	r0, r1, d0
 8004ee8:	ee10 2a10 	vmov	r2, s0
 8004eec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ef0:	ec43 2b10 	vmov	d0, r2, r3
 8004ef4:	4770      	bx	lr
	...

08004ef8 <scalbn>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	ec55 4b10 	vmov	r4, r5, d0
 8004efe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004f02:	4606      	mov	r6, r0
 8004f04:	462b      	mov	r3, r5
 8004f06:	b999      	cbnz	r1, 8004f30 <scalbn+0x38>
 8004f08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004f0c:	4323      	orrs	r3, r4
 8004f0e:	d03f      	beq.n	8004f90 <scalbn+0x98>
 8004f10:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <scalbn+0xf0>)
 8004f12:	4629      	mov	r1, r5
 8004f14:	ee10 0a10 	vmov	r0, s0
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f7fb fb85 	bl	8000628 <__aeabi_dmul>
 8004f1e:	4b33      	ldr	r3, [pc, #204]	; (8004fec <scalbn+0xf4>)
 8004f20:	429e      	cmp	r6, r3
 8004f22:	4604      	mov	r4, r0
 8004f24:	460d      	mov	r5, r1
 8004f26:	da10      	bge.n	8004f4a <scalbn+0x52>
 8004f28:	a327      	add	r3, pc, #156	; (adr r3, 8004fc8 <scalbn+0xd0>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	e01f      	b.n	8004f70 <scalbn+0x78>
 8004f30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004f34:	4291      	cmp	r1, r2
 8004f36:	d10c      	bne.n	8004f52 <scalbn+0x5a>
 8004f38:	ee10 2a10 	vmov	r2, s0
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	4629      	mov	r1, r5
 8004f40:	f7fb f9bc 	bl	80002bc <__adddf3>
 8004f44:	4604      	mov	r4, r0
 8004f46:	460d      	mov	r5, r1
 8004f48:	e022      	b.n	8004f90 <scalbn+0x98>
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004f50:	3936      	subs	r1, #54	; 0x36
 8004f52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004f56:	4296      	cmp	r6, r2
 8004f58:	dd0d      	ble.n	8004f76 <scalbn+0x7e>
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	a11c      	add	r1, pc, #112	; (adr r1, 8004fd0 <scalbn+0xd8>)
 8004f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f62:	da02      	bge.n	8004f6a <scalbn+0x72>
 8004f64:	a11c      	add	r1, pc, #112	; (adr r1, 8004fd8 <scalbn+0xe0>)
 8004f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f6a:	a319      	add	r3, pc, #100	; (adr r3, 8004fd0 <scalbn+0xd8>)
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f7fb fb5a 	bl	8000628 <__aeabi_dmul>
 8004f74:	e7e6      	b.n	8004f44 <scalbn+0x4c>
 8004f76:	1872      	adds	r2, r6, r1
 8004f78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004f7c:	428a      	cmp	r2, r1
 8004f7e:	dcec      	bgt.n	8004f5a <scalbn+0x62>
 8004f80:	2a00      	cmp	r2, #0
 8004f82:	dd08      	ble.n	8004f96 <scalbn+0x9e>
 8004f84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004f90:	ec45 4b10 	vmov	d0, r4, r5
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
 8004f96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004f9a:	da08      	bge.n	8004fae <scalbn+0xb6>
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	a10a      	add	r1, pc, #40	; (adr r1, 8004fc8 <scalbn+0xd0>)
 8004fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fa4:	dac0      	bge.n	8004f28 <scalbn+0x30>
 8004fa6:	a10e      	add	r1, pc, #56	; (adr r1, 8004fe0 <scalbn+0xe8>)
 8004fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fac:	e7bc      	b.n	8004f28 <scalbn+0x30>
 8004fae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004fb2:	3236      	adds	r2, #54	; 0x36
 8004fb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <scalbn+0xf8>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	e7d5      	b.n	8004f70 <scalbn+0x78>
 8004fc4:	f3af 8000 	nop.w
 8004fc8:	c2f8f359 	.word	0xc2f8f359
 8004fcc:	01a56e1f 	.word	0x01a56e1f
 8004fd0:	8800759c 	.word	0x8800759c
 8004fd4:	7e37e43c 	.word	0x7e37e43c
 8004fd8:	8800759c 	.word	0x8800759c
 8004fdc:	fe37e43c 	.word	0xfe37e43c
 8004fe0:	c2f8f359 	.word	0xc2f8f359
 8004fe4:	81a56e1f 	.word	0x81a56e1f
 8004fe8:	43500000 	.word	0x43500000
 8004fec:	ffff3cb0 	.word	0xffff3cb0
 8004ff0:	3c900000 	.word	0x3c900000

08004ff4 <with_errno>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	460d      	mov	r5, r1
 8004ffa:	4616      	mov	r6, r2
 8004ffc:	f7fe fd50 	bl	8003aa0 <__errno>
 8005000:	4629      	mov	r1, r5
 8005002:	6006      	str	r6, [r0, #0]
 8005004:	4620      	mov	r0, r4
 8005006:	bd70      	pop	{r4, r5, r6, pc}

08005008 <xflow>:
 8005008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800500a:	4614      	mov	r4, r2
 800500c:	461d      	mov	r5, r3
 800500e:	b108      	cbz	r0, 8005014 <xflow+0xc>
 8005010:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005014:	e9cd 2300 	strd	r2, r3, [sp]
 8005018:	e9dd 2300 	ldrd	r2, r3, [sp]
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb fb02 	bl	8000628 <__aeabi_dmul>
 8005024:	2222      	movs	r2, #34	; 0x22
 8005026:	b003      	add	sp, #12
 8005028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800502c:	f7ff bfe2 	b.w	8004ff4 <with_errno>

08005030 <__math_uflow>:
 8005030:	b508      	push	{r3, lr}
 8005032:	2200      	movs	r2, #0
 8005034:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005038:	f7ff ffe6 	bl	8005008 <xflow>
 800503c:	ec41 0b10 	vmov	d0, r0, r1
 8005040:	bd08      	pop	{r3, pc}

08005042 <__math_oflow>:
 8005042:	b508      	push	{r3, lr}
 8005044:	2200      	movs	r2, #0
 8005046:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800504a:	f7ff ffdd 	bl	8005008 <xflow>
 800504e:	ec41 0b10 	vmov	d0, r0, r1
 8005052:	bd08      	pop	{r3, pc}

08005054 <__ieee754_sqrt>:
 8005054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005058:	ec55 4b10 	vmov	r4, r5, d0
 800505c:	4e67      	ldr	r6, [pc, #412]	; (80051fc <__ieee754_sqrt+0x1a8>)
 800505e:	43ae      	bics	r6, r5
 8005060:	ee10 0a10 	vmov	r0, s0
 8005064:	ee10 2a10 	vmov	r2, s0
 8005068:	4629      	mov	r1, r5
 800506a:	462b      	mov	r3, r5
 800506c:	d10d      	bne.n	800508a <__ieee754_sqrt+0x36>
 800506e:	f7fb fadb 	bl	8000628 <__aeabi_dmul>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4620      	mov	r0, r4
 8005078:	4629      	mov	r1, r5
 800507a:	f7fb f91f 	bl	80002bc <__adddf3>
 800507e:	4604      	mov	r4, r0
 8005080:	460d      	mov	r5, r1
 8005082:	ec45 4b10 	vmov	d0, r4, r5
 8005086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508a:	2d00      	cmp	r5, #0
 800508c:	dc0b      	bgt.n	80050a6 <__ieee754_sqrt+0x52>
 800508e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005092:	4326      	orrs	r6, r4
 8005094:	d0f5      	beq.n	8005082 <__ieee754_sqrt+0x2e>
 8005096:	b135      	cbz	r5, 80050a6 <__ieee754_sqrt+0x52>
 8005098:	f7fb f90e 	bl	80002b8 <__aeabi_dsub>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	f7fb fbec 	bl	800087c <__aeabi_ddiv>
 80050a4:	e7eb      	b.n	800507e <__ieee754_sqrt+0x2a>
 80050a6:	1509      	asrs	r1, r1, #20
 80050a8:	f000 808d 	beq.w	80051c6 <__ieee754_sqrt+0x172>
 80050ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80050b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b8:	07c9      	lsls	r1, r1, #31
 80050ba:	bf5c      	itt	pl
 80050bc:	005b      	lslpl	r3, r3, #1
 80050be:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80050c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80050c6:	bf58      	it	pl
 80050c8:	0052      	lslpl	r2, r2, #1
 80050ca:	2500      	movs	r5, #0
 80050cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80050d0:	1076      	asrs	r6, r6, #1
 80050d2:	0052      	lsls	r2, r2, #1
 80050d4:	f04f 0e16 	mov.w	lr, #22
 80050d8:	46ac      	mov	ip, r5
 80050da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050de:	eb0c 0001 	add.w	r0, ip, r1
 80050e2:	4298      	cmp	r0, r3
 80050e4:	bfde      	ittt	le
 80050e6:	1a1b      	suble	r3, r3, r0
 80050e8:	eb00 0c01 	addle.w	ip, r0, r1
 80050ec:	186d      	addle	r5, r5, r1
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	f1be 0e01 	subs.w	lr, lr, #1
 80050f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80050f8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80050fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005100:	d1ed      	bne.n	80050de <__ieee754_sqrt+0x8a>
 8005102:	4674      	mov	r4, lr
 8005104:	2720      	movs	r7, #32
 8005106:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800510a:	4563      	cmp	r3, ip
 800510c:	eb01 000e 	add.w	r0, r1, lr
 8005110:	dc02      	bgt.n	8005118 <__ieee754_sqrt+0xc4>
 8005112:	d113      	bne.n	800513c <__ieee754_sqrt+0xe8>
 8005114:	4290      	cmp	r0, r2
 8005116:	d811      	bhi.n	800513c <__ieee754_sqrt+0xe8>
 8005118:	2800      	cmp	r0, #0
 800511a:	eb00 0e01 	add.w	lr, r0, r1
 800511e:	da57      	bge.n	80051d0 <__ieee754_sqrt+0x17c>
 8005120:	f1be 0f00 	cmp.w	lr, #0
 8005124:	db54      	blt.n	80051d0 <__ieee754_sqrt+0x17c>
 8005126:	f10c 0801 	add.w	r8, ip, #1
 800512a:	eba3 030c 	sub.w	r3, r3, ip
 800512e:	4290      	cmp	r0, r2
 8005130:	bf88      	it	hi
 8005132:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005136:	1a12      	subs	r2, r2, r0
 8005138:	440c      	add	r4, r1
 800513a:	46c4      	mov	ip, r8
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	3f01      	subs	r7, #1
 8005140:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005144:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005148:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800514c:	d1dd      	bne.n	800510a <__ieee754_sqrt+0xb6>
 800514e:	4313      	orrs	r3, r2
 8005150:	d01b      	beq.n	800518a <__ieee754_sqrt+0x136>
 8005152:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005200 <__ieee754_sqrt+0x1ac>
 8005156:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005204 <__ieee754_sqrt+0x1b0>
 800515a:	e9da 0100 	ldrd	r0, r1, [sl]
 800515e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005162:	f7fb f8a9 	bl	80002b8 <__aeabi_dsub>
 8005166:	e9da 8900 	ldrd	r8, r9, [sl]
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4640      	mov	r0, r8
 8005170:	4649      	mov	r1, r9
 8005172:	f7fb fcd5 	bl	8000b20 <__aeabi_dcmple>
 8005176:	b140      	cbz	r0, 800518a <__ieee754_sqrt+0x136>
 8005178:	f1b4 3fff 	cmp.w	r4, #4294967295
 800517c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005180:	e9db 2300 	ldrd	r2, r3, [fp]
 8005184:	d126      	bne.n	80051d4 <__ieee754_sqrt+0x180>
 8005186:	3501      	adds	r5, #1
 8005188:	463c      	mov	r4, r7
 800518a:	106a      	asrs	r2, r5, #1
 800518c:	0863      	lsrs	r3, r4, #1
 800518e:	07e9      	lsls	r1, r5, #31
 8005190:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005194:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005198:	bf48      	it	mi
 800519a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800519e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80051a2:	461c      	mov	r4, r3
 80051a4:	e76d      	b.n	8005082 <__ieee754_sqrt+0x2e>
 80051a6:	0ad3      	lsrs	r3, r2, #11
 80051a8:	3815      	subs	r0, #21
 80051aa:	0552      	lsls	r2, r2, #21
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0fa      	beq.n	80051a6 <__ieee754_sqrt+0x152>
 80051b0:	02dc      	lsls	r4, r3, #11
 80051b2:	d50a      	bpl.n	80051ca <__ieee754_sqrt+0x176>
 80051b4:	f1c1 0420 	rsb	r4, r1, #32
 80051b8:	fa22 f404 	lsr.w	r4, r2, r4
 80051bc:	1e4d      	subs	r5, r1, #1
 80051be:	408a      	lsls	r2, r1
 80051c0:	4323      	orrs	r3, r4
 80051c2:	1b41      	subs	r1, r0, r5
 80051c4:	e772      	b.n	80050ac <__ieee754_sqrt+0x58>
 80051c6:	4608      	mov	r0, r1
 80051c8:	e7f0      	b.n	80051ac <__ieee754_sqrt+0x158>
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	3101      	adds	r1, #1
 80051ce:	e7ef      	b.n	80051b0 <__ieee754_sqrt+0x15c>
 80051d0:	46e0      	mov	r8, ip
 80051d2:	e7aa      	b.n	800512a <__ieee754_sqrt+0xd6>
 80051d4:	f7fb f872 	bl	80002bc <__adddf3>
 80051d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4640      	mov	r0, r8
 80051e2:	4649      	mov	r1, r9
 80051e4:	f7fb fc92 	bl	8000b0c <__aeabi_dcmplt>
 80051e8:	b120      	cbz	r0, 80051f4 <__ieee754_sqrt+0x1a0>
 80051ea:	1ca0      	adds	r0, r4, #2
 80051ec:	bf08      	it	eq
 80051ee:	3501      	addeq	r5, #1
 80051f0:	3402      	adds	r4, #2
 80051f2:	e7ca      	b.n	800518a <__ieee754_sqrt+0x136>
 80051f4:	3401      	adds	r4, #1
 80051f6:	f024 0401 	bic.w	r4, r4, #1
 80051fa:	e7c6      	b.n	800518a <__ieee754_sqrt+0x136>
 80051fc:	7ff00000 	.word	0x7ff00000
 8005200:	20000060 	.word	0x20000060
 8005204:	20000068 	.word	0x20000068

08005208 <_init>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	bf00      	nop
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr

08005214 <_fini>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	bf00      	nop
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr
