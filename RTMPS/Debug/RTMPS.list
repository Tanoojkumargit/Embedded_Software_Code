
RTMPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08006ac8  08006ac8  00016ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca0  08006ca0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ca0  08006ca0  00016ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ca8  08006ca8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca8  08006ca8  00016ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006cb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000070  08006d20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08006d20  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcfa  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237b  00000000  00000000  0002dddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  00030158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f3  00000000  00000000  00030ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238e2  00000000  00000000  000315d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001129c  00000000  00000000  00054eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8590  00000000  00000000  00066151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003988  00000000  00000000  0013e6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0014206c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ab0 	.word	0x08006ab0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006ab0 	.word	0x08006ab0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <MX_ADC1_Init+0x98>)
 8000f98:	4a21      	ldr	r2, [pc, #132]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_ADC1_Init+0x98>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_ADC1_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_ADC1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_ADC1_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_ADC1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_ADC1_Init+0x98>)
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <MX_ADC1_Init+0xa0>)
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_ADC1_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_ADC1_Init+0x98>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_ADC1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_ADC1_Init+0x98>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_ADC1_Init+0x98>)
 8000fe6:	f001 fa4f 	bl	8002488 <HAL_ADC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ff0:	f000 ff80 	bl	8001ef4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_ADC1_Init+0x98>)
 8001006:	f001 fc21 	bl	800284c <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001010:	f000 ff70 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000008c 	.word	0x2000008c
 8001020:	40012000 	.word	0x40012000
 8001024:	0f000001 	.word	0x0f000001

08001028 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102e:	463b      	mov	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_ADC2_Init+0x98>)
 800103c:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <MX_ADC2_Init+0x9c>)
 800103e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_ADC2_Init+0x98>)
 8001042:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001046:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <MX_ADC2_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_ADC2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_ADC2_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_ADC2_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_ADC2_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_ADC2_Init+0x98>)
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <MX_ADC2_Init+0xa0>)
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_ADC2_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_ADC2_Init+0x98>)
 8001076:	2201      	movs	r2, #1
 8001078:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_ADC2_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_ADC2_Init+0x98>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <MX_ADC2_Init+0x98>)
 800108a:	f001 f9fd 	bl	8002488 <HAL_ADC_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001094:	f000 ff2e 	bl	8001ef4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001098:	2304      	movs	r3, #4
 800109a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_ADC2_Init+0x98>)
 80010aa:	f001 fbcf 	bl	800284c <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80010b4:	f000 ff1e 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200000d4 	.word	0x200000d4
 80010c4:	40012100 	.word	0x40012100
 80010c8:	0f000001 	.word	0x0f000001

080010cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a3b      	ldr	r2, [pc, #236]	; (80011d8 <HAL_ADC_MspInit+0x10c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d142      	bne.n	8001174 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <HAL_ADC_MspInit+0x110>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a39      	ldr	r2, [pc, #228]	; (80011dc <HAL_ADC_MspInit+0x110>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_ADC_MspInit+0x110>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_ADC_MspInit+0x110>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a32      	ldr	r2, [pc, #200]	; (80011dc <HAL_ADC_MspInit+0x110>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_ADC_MspInit+0x110>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_ADC_MspInit+0x110>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a2b      	ldr	r2, [pc, #172]	; (80011dc <HAL_ADC_MspInit+0x110>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ADC_MspInit+0x110>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = AC_Voltage_Pin|Temp_Sen_Pin|Vibration_Sen_Pin|Mains_Supply_Pin
 8001142:	231f      	movs	r3, #31
 8001144:	61fb      	str	r3, [r7, #28]
                          |DC_Current_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4822      	ldr	r0, [pc, #136]	; (80011e0 <HAL_ADC_MspInit+0x114>)
 8001156:	f001 fe8d 	bl	8002e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MQ_135_Pin|MQ_2_Pin|MQ_7_Pin|DC_Volt_Pin;
 800115a:	2393      	movs	r3, #147	; 0x93
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	481d      	ldr	r0, [pc, #116]	; (80011e4 <HAL_ADC_MspInit+0x118>)
 800116e:	f001 fe81 	bl	8002e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001172:	e02c      	b.n	80011ce <HAL_ADC_MspInit+0x102>
  else if(adcHandle->Instance==ADC2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_ADC_MspInit+0x11c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d127      	bne.n	80011ce <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_ADC_MspInit+0x110>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a15      	ldr	r2, [pc, #84]	; (80011dc <HAL_ADC_MspInit+0x110>)
 8001188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_ADC_MspInit+0x110>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_ADC_MspInit+0x110>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_ADC_MspInit+0x110>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_ADC_MspInit+0x110>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MQ_7_Pin;
 80011b6:	2310      	movs	r3, #16
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ba:	2303      	movs	r3, #3
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MQ_7_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4806      	ldr	r0, [pc, #24]	; (80011e4 <HAL_ADC_MspInit+0x118>)
 80011ca:	f001 fe53 	bl	8002e74 <HAL_GPIO_Init>
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40012000 	.word	0x40012000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40012100 	.word	0x40012100

080011ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b43      	ldr	r3, [pc, #268]	; (8001314 <MX_GPIO_Init+0x128>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a42      	ldr	r2, [pc, #264]	; (8001314 <MX_GPIO_Init+0x128>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <MX_GPIO_Init+0x128>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <MX_GPIO_Init+0x128>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a3b      	ldr	r2, [pc, #236]	; (8001314 <MX_GPIO_Init+0x128>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b39      	ldr	r3, [pc, #228]	; (8001314 <MX_GPIO_Init+0x128>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b35      	ldr	r3, [pc, #212]	; (8001314 <MX_GPIO_Init+0x128>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a34      	ldr	r2, [pc, #208]	; (8001314 <MX_GPIO_Init+0x128>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <MX_GPIO_Init+0x128>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <MX_GPIO_Init+0x128>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2d      	ldr	r2, [pc, #180]	; (8001314 <MX_GPIO_Init+0x128>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <MX_GPIO_Init+0x128>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2160      	movs	r1, #96	; 0x60
 8001276:	4828      	ldr	r0, [pc, #160]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001278:	f001 ff90 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2102      	movs	r1, #2
 8001280:	4826      	ldr	r0, [pc, #152]	; (800131c <MX_GPIO_Init+0x130>)
 8001282:	f001 ff8b 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800128c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4820      	ldr	r0, [pc, #128]	; (8001320 <MX_GPIO_Init+0x134>)
 800129e:	f001 fde9 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 80012a2:	2360      	movs	r3, #96	; 0x60
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4817      	ldr	r0, [pc, #92]	; (8001318 <MX_GPIO_Init+0x12c>)
 80012ba:	f001 fddb 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012be:	2320      	movs	r3, #32
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <MX_GPIO_Init+0x134>)
 80012d2:	f001 fdcf 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d6:	2301      	movs	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_GPIO_Init+0x130>)
 80012ea:	f001 fdc3 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ee:	2302      	movs	r3, #2
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_GPIO_Init+0x130>)
 8001306:	f001 fdb5 	bl	8002e74 <HAL_GPIO_Init>

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800

08001324 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_I2C1_Init+0x50>)
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <MX_I2C1_Init+0x54>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_I2C1_Init+0x50>)
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_I2C1_Init+0x58>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_I2C1_Init+0x50>)
 8001342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_I2C1_Init+0x50>)
 8001362:	f001 ff35 	bl	80031d0 <HAL_I2C_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800136c:	f000 fdc2 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000011c 	.word	0x2000011c
 8001378:	40005400 	.word	0x40005400
 800137c:	000186a0 	.word	0x000186a0

08001380 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C2_Init+0x50>)
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <MX_I2C2_Init+0x54>)
 8001388:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_I2C2_Init+0x50>)
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_I2C2_Init+0x58>)
 800138e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C2_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_I2C2_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_I2C2_Init+0x50>)
 800139e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_I2C2_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_I2C2_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_I2C2_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_I2C2_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_I2C2_Init+0x50>)
 80013be:	f001 ff07 	bl	80031d0 <HAL_I2C_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013c8:	f000 fd94 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000170 	.word	0x20000170
 80013d4:	40005800 	.word	0x40005800
 80013d8:	000186a0 	.word	0x000186a0

080013dc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_I2C3_Init+0x50>)
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <MX_I2C3_Init+0x54>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_I2C3_Init+0x50>)
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_I2C3_Init+0x58>)
 80013ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_I2C3_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_I2C3_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_I2C3_Init+0x50>)
 80013fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_I2C3_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_I2C3_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_I2C3_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_I2C3_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_I2C3_Init+0x50>)
 800141a:	f001 fed9 	bl	80031d0 <HAL_I2C_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001424:	f000 fd66 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200001c4 	.word	0x200001c4
 8001430:	40005c00 	.word	0x40005c00
 8001434:	000186a0 	.word	0x000186a0

08001438 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b090      	sub	sp, #64	; 0x40
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a6b      	ldr	r2, [pc, #428]	; (8001604 <HAL_I2C_MspInit+0x1cc>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d12d      	bne.n	80014b6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
 800145e:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a69      	ldr	r2, [pc, #420]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b67      	ldr	r3, [pc, #412]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 8001476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001490:	4619      	mov	r1, r3
 8001492:	485e      	ldr	r0, [pc, #376]	; (800160c <HAL_I2C_MspInit+0x1d4>)
 8001494:	f001 fcee 	bl	8002e74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
 800149c:	4b5a      	ldr	r3, [pc, #360]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a59      	ldr	r2, [pc, #356]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b57      	ldr	r3, [pc, #348]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014b4:	e0a2      	b.n	80015fc <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C2)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a55      	ldr	r2, [pc, #340]	; (8001610 <HAL_I2C_MspInit+0x1d8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d14c      	bne.n	800155a <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
 80014c4:	4b50      	ldr	r3, [pc, #320]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a4f      	ldr	r2, [pc, #316]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
 80014da:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	4b49      	ldr	r3, [pc, #292]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a48      	ldr	r2, [pc, #288]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Clamp_SCL_Pin;
 80014f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800150a:	2304      	movs	r3, #4
 800150c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Clamp_SCL_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001512:	4619      	mov	r1, r3
 8001514:	483d      	ldr	r0, [pc, #244]	; (800160c <HAL_I2C_MspInit+0x1d4>)
 8001516:	f001 fcad 	bl	8002e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Clamp_SDA_Pin;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800152c:	2304      	movs	r3, #4
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Clamp_SDA_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001534:	4619      	mov	r1, r3
 8001536:	4837      	ldr	r0, [pc, #220]	; (8001614 <HAL_I2C_MspInit+0x1dc>)
 8001538:	f001 fc9c 	bl	8002e74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a30      	ldr	r2, [pc, #192]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 8001546:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	69bb      	ldr	r3, [r7, #24]
}
 8001558:	e050      	b.n	80015fc <HAL_I2C_MspInit+0x1c4>
  else if(i2cHandle->Instance==I2C3)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <HAL_I2C_MspInit+0x1e0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d14b      	bne.n	80015fc <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	4a26      	ldr	r2, [pc, #152]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6313      	str	r3, [r2, #48]	; 0x30
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MPU_SDA_Pin;
 800159c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a2:	2312      	movs	r3, #18
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015ae:	2304      	movs	r3, #4
 80015b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MPU_SDA_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b6:	4619      	mov	r1, r3
 80015b8:	4816      	ldr	r0, [pc, #88]	; (8001614 <HAL_I2C_MspInit+0x1dc>)
 80015ba:	f001 fc5b 	bl	8002e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MPU_SCL_Pin;
 80015be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c4:	2312      	movs	r3, #18
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015d0:	2304      	movs	r3, #4
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(MPU_SCL_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d8:	4619      	mov	r1, r3
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <HAL_I2C_MspInit+0x1e4>)
 80015dc:	f001 fc4a 	bl	8002e74 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80015ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_I2C_MspInit+0x1d0>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3740      	adds	r7, #64	; 0x40
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40005400 	.word	0x40005400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400
 8001610:	40005800 	.word	0x40005800
 8001614:	40020800 	.word	0x40020800
 8001618:	40005c00 	.word	0x40005c00
 800161c:	40020000 	.word	0x40020000

08001620 <UART_Print>:
void SystemClock_Config(void);
extern UART_HandleTypeDef huart2;
uint32_t Read_ADC_Channel(ADC_HandleTypeDef* hadc, uint32_t channel);
void SystemClock_Config(void);

void UART_Print(UART_HandleTypeDef* huart, char* message) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800162a:	6838      	ldr	r0, [r7, #0]
 800162c:	f7fe fdf0 	bl	8000210 <strlen>
 8001630:	4603      	mov	r3, r0
 8001632:	b29a      	uxth	r2, r3
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f003 fa4c 	bl	8004ad8 <HAL_UART_Transmit>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <Read_ADC>:




//---------------------------------Voltage sensor----------------------------------------------------------------------
uint32_t Read_ADC(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <Read_ADC+0x2c>)
 800164e:	f000 ff5f 	bl	8002510 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001652:	f04f 31ff 	mov.w	r1, #4294967295
 8001656:	4807      	ldr	r0, [pc, #28]	; (8001674 <Read_ADC+0x2c>)
 8001658:	f001 f85f 	bl	800271a <HAL_ADC_PollForConversion>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d104      	bne.n	800166c <Read_ADC+0x24>
    return HAL_ADC_GetValue(&hadc1);
 8001662:	4804      	ldr	r0, [pc, #16]	; (8001674 <Read_ADC+0x2c>)
 8001664:	f001 f8e4 	bl	8002830 <HAL_ADC_GetValue>
 8001668:	4603      	mov	r3, r0
 800166a:	e000      	b.n	800166e <Read_ADC+0x26>
  }
  return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2000008c 	.word	0x2000008c

08001678 <running_average_filter>:
float running_average_filter(uint32_t* data, int size) {
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t sum = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	e00a      	b.n	80016a2 <running_average_filter+0x2a>
    sum += data[i];
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < size; i++) {
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3301      	adds	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbf0      	blt.n	800168c <running_average_filter+0x14>
  }
  return sum / (float)size;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016c2:	eef0 7a66 	vmov.f32	s15, s13
}
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	0000      	movs	r0, r0
	...

080016d8 <Convert_ADC_to_Voltage>:
float Convert_ADC_to_Voltage(uint32_t adc_value) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  // Convert the ADC value to a voltage
  float voltage = (adc_value * VREF) / ADC_RESOLUTION;
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe ff2f 	bl	8000544 <__aeabi_ui2d>
 80016e6:	a311      	add	r3, pc, #68	; (adr r3, 800172c <Convert_ADC_to_Voltage+0x54>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7fe ffa4 	bl	8000638 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <Convert_ADC_to_Voltage+0x50>)
 80016fe:	f7ff f8c5 	bl	800088c <__aeabi_ddiv>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff fa6d 	bl	8000be8 <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	60fb      	str	r3, [r7, #12]
  return voltage;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	ee07 3a90 	vmov	s15, r3
}
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	40700000 	.word	0x40700000
 800172c:	66666666 	.word	0x66666666
 8001730:	400a6666 	.word	0x400a6666
 8001734:	00000000 	.word	0x00000000

08001738 <Convert_Voltage_to_Input>:
float Convert_Voltage_to_Input(float voltage) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	ed87 0a01 	vstr	s0, [r7, #4]
  // Calculate the actual input voltage using the known sensor output voltage and the actual voltage
  float input_voltage = (voltage * VOLTAGE_INPUT) / SENSOR_VOUT;
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7fe ff20 	bl	8000588 <__aeabi_f2d>
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <Convert_Voltage_to_Input+0x58>)
 800174e:	f7fe ff73 	bl	8000638 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	a30b      	add	r3, pc, #44	; (adr r3, 8001788 <Convert_Voltage_to_Input+0x50>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7ff f894 	bl	800088c <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff fa3c 	bl	8000be8 <__aeabi_d2f>
 8001770:	4603      	mov	r3, r0
 8001772:	60fb      	str	r3, [r7, #12]
  // Apply calibration factor
  input_voltage *= CALIBRATION_FACTOR;
  return input_voltage;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	ee07 3a90 	vmov	s15, r3
}
 800177a:	eeb0 0a67 	vmov.f32	s0, s15
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	47ae147b 	.word	0x47ae147b
 800178c:	40047ae1 	.word	0x40047ae1
 8001790:	406f4000 	.word	0x406f4000
 8001794:	00000000 	.word	0x00000000

08001798 <FloatToString>:
void FloatToString(char* buffer, float value, int decimalPlaces) {
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017a4:	6079      	str	r1, [r7, #4]
  int integerPart = (int)value;
 80017a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ae:	ee17 3a90 	vmov	r3, s15
 80017b2:	617b      	str	r3, [r7, #20]
  int fractionPart = (int)((value - integerPart) * pow(10, decimalPlaces));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	ed97 7a02 	vldr	s14, [r7, #8]
 80017c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c6:	ee17 0a90 	vmov	r0, s15
 80017ca:	f7fe fedd 	bl	8000588 <__aeabi_f2d>
 80017ce:	4604      	mov	r4, r0
 80017d0:	460d      	mov	r5, r1
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe fec6 	bl	8000564 <__aeabi_i2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	ec43 2b11 	vmov	d1, r2, r3
 80017e0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001828 <FloatToString+0x90>
 80017e4:	f004 fa0c 	bl	8005c00 <pow>
 80017e8:	ec53 2b10 	vmov	r2, r3, d0
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe ff22 	bl	8000638 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f9cc 	bl	8000b98 <__aeabi_d2iz>
 8001800:	4603      	mov	r3, r0
 8001802:	613b      	str	r3, [r7, #16]
  sprintf(buffer, "%d.%0*d", integerPart, decimalPlaces, abs(fractionPart));
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b00      	cmp	r3, #0
 8001808:	bfb8      	it	lt
 800180a:	425b      	neglt	r3, r3
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	4907      	ldr	r1, [pc, #28]	; (8001830 <FloatToString+0x98>)
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f003 fd4f 	bl	80052b8 <siprintf>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bdb0      	pop	{r4, r5, r7, pc}
 8001822:	bf00      	nop
 8001824:	f3af 8000 	nop.w
 8001828:	00000000 	.word	0x00000000
 800182c:	40240000 	.word	0x40240000
 8001830:	08006ac8 	.word	0x08006ac8

08001834 <MPU6050_Read_Accel>:
    Data = 0x00;
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
  }
}

HAL_StatusTypeDef MPU6050_Read_Accel(I2C_HandleTypeDef *hi2c, int16_t *Accel_X, int16_t *Accel_Y, int16_t *Accel_Z) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af04      	add	r7, sp, #16
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
  uint8_t Rec_Data[6];
  HAL_StatusTypeDef ret;

  // Read 6 BYTES of data starting from ACCEL_XOUT_H register
  ret = HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 8001842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2306      	movs	r3, #6
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	223b      	movs	r2, #59	; 0x3b
 8001856:	21d0      	movs	r1, #208	; 0xd0
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f001 fdfd 	bl	8003458 <HAL_I2C_Mem_Read>
 800185e:	4603      	mov	r3, r0
 8001860:	75fb      	strb	r3, [r7, #23]

  if (ret == HAL_OK) {
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11a      	bne.n	800189e <MPU6050_Read_Accel+0x6a>
    *Accel_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001868:	7c3b      	ldrb	r3, [r7, #16]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b21a      	sxth	r2, r3
 800186e:	7c7b      	ldrb	r3, [r7, #17]
 8001870:	b21b      	sxth	r3, r3
 8001872:	4313      	orrs	r3, r2
 8001874:	b21a      	sxth	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	801a      	strh	r2, [r3, #0]
    *Accel_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800187a:	7cbb      	ldrb	r3, [r7, #18]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	7cfb      	ldrb	r3, [r7, #19]
 8001882:	b21b      	sxth	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b21a      	sxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	801a      	strh	r2, [r3, #0]
    *Accel_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800188c:	7d3b      	ldrb	r3, [r7, #20]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	7d7b      	ldrb	r3, [r7, #21]
 8001894:	b21b      	sxth	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	b21a      	sxth	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800189e:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <LowPassFilter>:

void LowPassFilter(int16_t *current, int16_t *previous, float alpha) {
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	ed87 0a01 	vstr	s0, [r7, #4]
  *previous = (int16_t)(alpha * (*current) + (1 - alpha) * (*previous));
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f2:	ee17 3a90 	vmov	r3, s15
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	801a      	strh	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <Calculate_Vibration_Percentage>:

void Calculate_Vibration_Percentage(int16_t Accel_X, int16_t Accel_Y, int16_t Accel_Z, int16_t prev_Accel_X, int16_t prev_Accel_Y, int16_t prev_Accel_Z, float *vibration_percentage) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	4604      	mov	r4, r0
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	80fb      	strh	r3, [r7, #6]
 800191a:	4603      	mov	r3, r0
 800191c:	80bb      	strh	r3, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	807b      	strh	r3, [r7, #2]
 8001922:	4613      	mov	r3, r2
 8001924:	803b      	strh	r3, [r7, #0]
  // Apply low-pass filter
  LowPassFilter(&Accel_X, &prev_Accel_X, ALPHA);
 8001926:	463a      	mov	r2, r7
 8001928:	1dbb      	adds	r3, r7, #6
 800192a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ffb9 	bl	80018a8 <LowPassFilter>
  LowPassFilter(&Accel_Y, &prev_Accel_Y, ALPHA);
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800193c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ffb1 	bl	80018a8 <LowPassFilter>
  LowPassFilter(&Accel_Z, &prev_Accel_Z, ALPHA);
 8001946:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800194a:	1cbb      	adds	r3, r7, #2
 800194c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ffa8 	bl	80018a8 <LowPassFilter>

  // Calculate the difference between the current and previous values
  float diff_X = (float)(Accel_X - prev_Accel_X) / ACCEL_SCALE;
 8001958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195c:	461a      	mov	r2, r3
 800195e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001a10 <Calculate_Vibration_Percentage+0x108>
 8001970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001974:	edc7 7a05 	vstr	s15, [r7, #20]
  float diff_Y = (float)(Accel_Y - prev_Accel_Y) / ACCEL_SCALE;
 8001978:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800197c:	461a      	mov	r2, r3
 800197e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198c:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001a10 <Calculate_Vibration_Percentage+0x108>
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	edc7 7a04 	vstr	s15, [r7, #16]
  float diff_Z = (float)(Accel_Z - prev_Accel_Z) / ACCEL_SCALE;
 8001998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800199c:	461a      	mov	r2, r3
 800199e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ac:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001a10 <Calculate_Vibration_Percentage+0x108>
 80019b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b4:	edc7 7a03 	vstr	s15, [r7, #12]

  // Calculate the magnitude of the differences
  float magnitude = sqrtf(diff_X * diff_X + diff_Y * diff_Y + diff_Z * diff_Z);
 80019b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	f004 f980 	bl	8005ce0 <sqrtf>
 80019e0:	ed87 0a02 	vstr	s0, [r7, #8]

  // Apply sensitivity multiplier
  magnitude *= SENSITIVITY_MULTIPLIER;
 80019e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a14 <Calculate_Vibration_Percentage+0x10c>
 80019ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f0:	edc7 7a02 	vstr	s15, [r7, #8]

  // Calculate the percentage of the vibration level
  *vibration_percentage = (magnitude / MAX_VIBRATION_LEVEL) * 100.0;  // Convert to percentage
 80019f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001a18 <Calculate_Vibration_Percentage+0x110>
 80019fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	edc3 7a00 	vstr	s15, [r3]
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd90      	pop	{r4, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	46800000 	.word	0x46800000
 8001a14:	42480000 	.word	0x42480000
 8001a18:	42c80000 	.word	0x42c80000

08001a1c <main>:
//}


//==================================================++++++++++++++++++++++++++++++++++++++++
int main(void)
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001a22:	af06      	add	r7, sp, #24

  HAL_Init();
 8001a24:	f000 fc9a 	bl	800235c <HAL_Init>
  SystemClock_Config();
 8001a28:	f000 f9f6 	bl	8001e18 <SystemClock_Config>

  MX_GPIO_Init();
 8001a2c:	f7ff fbde 	bl	80011ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a30:	f7ff faa8 	bl	8000f84 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a34:	f7ff faf8 	bl	8001028 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001a38:	f7ff fc74 	bl	8001324 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a3c:	f7ff fca0 	bl	8001380 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001a40:	f7ff fccc 	bl	80013dc <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001a44:	f000 fb90 	bl	8002168 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a48:	f000 fbb8 	bl	80021bc <MX_USART2_UART_Init>
  HAL_ADC_Start(&hadc1);
 8001a4c:	48c8      	ldr	r0, [pc, #800]	; (8001d70 <main+0x354>)
 8001a4e:	f000 fd5f 	bl	8002510 <HAL_ADC_Start>
		
		

		
		int16_t Accel_X, Accel_Y, Accel_Z;
	    int16_t prev_Accel_X = 0, prev_Accel_Y = 0, prev_Accel_Z = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8a7 31fc 	strh.w	r3, [r7, #508]	; 0x1fc
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8a7 31fa 	strh.w	r3, [r7, #506]	; 0x1fa
	    float vibration_percentage;
	    char uart_buf[100];
	    char float_buf[20];
	    int uart_buf_len;
	    uint8_t i2c_address = MPU6050_ADDR >> 1; // Print the 7-bit address
 8001a64:	2368      	movs	r3, #104	; 0x68
 8001a66:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9

	  uint8_t hours, minutes, seconds, day, month;
	     uint16_t year;

	     /* Read RTC time and date */
	     RTC_GetTime(&hours, &minutes, &seconds);
 8001a6a:	f207 12a9 	addw	r2, r7, #425	; 0x1a9
 8001a6e:	f507 71d5 	add.w	r1, r7, #426	; 0x1aa
 8001a72:	f207 13ab 	addw	r3, r7, #427	; 0x1ab
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fa42 	bl	8001f00 <RTC_GetTime>
	     RTC_GetDate(&day, &month, &year);
 8001a7c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8001a80:	f207 11a7 	addw	r1, r7, #423	; 0x1a7
 8001a84:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fa83 	bl	8001f94 <RTC_GetDate>
	     /* Print time and date over UART */
	     char buffer[50];
	     snprintf(buffer, sizeof(buffer), "Time: %02d:%02d:%02d, Date: %02d-%02d-%04d\r\n", hours, minutes, seconds, day, month, year);
 8001a8e:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8001a92:	461e      	mov	r6, r3
 8001a94:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8001a98:	f897 21a9 	ldrb.w	r2, [r7, #425]	; 0x1a9
 8001a9c:	f897 11a8 	ldrb.w	r1, [r7, #424]	; 0x1a8
 8001aa0:	f897 01a7 	ldrb.w	r0, [r7, #423]	; 0x1a7
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	f8b7 01a4 	ldrh.w	r0, [r7, #420]	; 0x1a4
 8001aaa:	4605      	mov	r5, r0
 8001aac:	1d38      	adds	r0, r7, #4
 8001aae:	9504      	str	r5, [sp, #16]
 8001ab0:	9403      	str	r4, [sp, #12]
 8001ab2:	9102      	str	r1, [sp, #8]
 8001ab4:	9201      	str	r2, [sp, #4]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	4633      	mov	r3, r6
 8001aba:	4aae      	ldr	r2, [pc, #696]	; (8001d74 <main+0x358>)
 8001abc:	2132      	movs	r1, #50	; 0x32
 8001abe:	f003 fbc7 	bl	8005250 <sniprintf>
	     HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fba3 	bl	8000210 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	1d39      	adds	r1, r7, #4
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	48a8      	ldr	r0, [pc, #672]	; (8001d78 <main+0x35c>)
 8001ad6:	f002 ffff 	bl	8004ad8 <HAL_UART_Transmit>


//----------------------------------MQ Sensors Logic---------------------------------------------------------
	     	 	mq135_value = Read_ADC_Channel(&hadc1, ADC_CHANNEL_0); // PA0
 8001ada:	2100      	movs	r1, #0
 8001adc:	48a4      	ldr	r0, [pc, #656]	; (8001d70 <main+0x354>)
 8001ade:	f000 f969 	bl	8001db4 <Read_ADC_Channel>
 8001ae2:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	            mq2_value = Read_ADC_Channel(&hadc1, ADC_CHANNEL_1);   // PA1
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	48a1      	ldr	r0, [pc, #644]	; (8001d70 <main+0x354>)
 8001aea:	f000 f963 	bl	8001db4 <Read_ADC_Channel>
 8001aee:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
	            mq7_value = Read_ADC_Channel(&hadc1, ADC_CHANNEL_4);   // PA4
 8001af2:	2104      	movs	r1, #4
 8001af4:	489e      	ldr	r0, [pc, #632]	; (8001d70 <main+0x354>)
 8001af6:	f000 f95d 	bl	8001db4 <Read_ADC_Channel>
 8001afa:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

	            sprintf(msg, "MQ-135: %lu\r\n", mq135_value);
 8001afe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b02:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001b06:	499d      	ldr	r1, [pc, #628]	; (8001d7c <main+0x360>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 fbd5 	bl	80052b8 <siprintf>
	            UART_Print(&huart2, msg);
 8001b0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b12:	4619      	mov	r1, r3
 8001b14:	4898      	ldr	r0, [pc, #608]	; (8001d78 <main+0x35c>)
 8001b16:	f7ff fd83 	bl	8001620 <UART_Print>

	            sprintf(msg, "MQ-2: %lu\r\n", mq2_value);
 8001b1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b1e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001b22:	4997      	ldr	r1, [pc, #604]	; (8001d80 <main+0x364>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fbc7 	bl	80052b8 <siprintf>
	            UART_Print(&huart2, msg);
 8001b2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4891      	ldr	r0, [pc, #580]	; (8001d78 <main+0x35c>)
 8001b32:	f7ff fd75 	bl	8001620 <UART_Print>

	            sprintf(msg, "MQ-7: %lu\r\n", mq7_value);
 8001b36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b3a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001b3e:	4991      	ldr	r1, [pc, #580]	; (8001d84 <main+0x368>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fbb9 	bl	80052b8 <siprintf>
	            UART_Print(&huart2, msg);
 8001b46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	488a      	ldr	r0, [pc, #552]	; (8001d78 <main+0x35c>)
 8001b4e:	f7ff fd67 	bl	8001620 <UART_Print>

	            // Check for specific conditions and print messages
	            if (mq135_value > THRESHOLD_MQ135) {
 8001b52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b5a:	d903      	bls.n	8001b64 <main+0x148>
	                UART_Print(&huart2, "Ammonia leakage detected!\r\n");
 8001b5c:	498a      	ldr	r1, [pc, #552]	; (8001d88 <main+0x36c>)
 8001b5e:	4886      	ldr	r0, [pc, #536]	; (8001d78 <main+0x35c>)
 8001b60:	f7ff fd5e 	bl	8001620 <UART_Print>
	            }

	            if (mq2_value > THRESHOLD_MQ2) {
 8001b64:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b6c:	d903      	bls.n	8001b76 <main+0x15a>
	                UART_Print(&huart2, "Smoke detected!\r\n");
 8001b6e:	4987      	ldr	r1, [pc, #540]	; (8001d8c <main+0x370>)
 8001b70:	4881      	ldr	r0, [pc, #516]	; (8001d78 <main+0x35c>)
 8001b72:	f7ff fd55 	bl	8001620 <UART_Print>
	            }

	            if (mq7_value > THRESHOLD_MQ7) {
 8001b76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b7a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001b7e:	d903      	bls.n	8001b88 <main+0x16c>
	                UART_Print(&huart2, "Flammable gas detected!\r\n");
 8001b80:	4983      	ldr	r1, [pc, #524]	; (8001d90 <main+0x374>)
 8001b82:	487d      	ldr	r0, [pc, #500]	; (8001d78 <main+0x35c>)
 8001b84:	f7ff fd4c 	bl	8001620 <UART_Print>



//----------------------------------MPU-6050 Logic----------------------------------------------

	            uart_buf_len = sprintf(uart_buf, "I2C Address: 0x%02X\r\n", i2c_address);
 8001b88:	f897 21f9 	ldrb.w	r2, [r7, #505]	; 0x1f9
 8001b8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b90:	4980      	ldr	r1, [pc, #512]	; (8001d94 <main+0x378>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fb90 	bl	80052b8 <siprintf>
 8001b98:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	              HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 8001b9c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001ba6:	2364      	movs	r3, #100	; 0x64
 8001ba8:	4873      	ldr	r0, [pc, #460]	; (8001d78 <main+0x35c>)
 8001baa:	f002 ff95 	bl	8004ad8 <HAL_UART_Transmit>
	              if (MPU6050_Read_Accel(&hi2c2, &Accel_X, &Accel_Y, &Accel_Z) == HAL_OK) {
 8001bae:	f507 73e3 	add.w	r3, r7, #454	; 0x1c6
 8001bb2:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8001bb6:	f507 71e5 	add.w	r1, r7, #458	; 0x1ca
 8001bba:	4877      	ldr	r0, [pc, #476]	; (8001d98 <main+0x37c>)
 8001bbc:	f7ff fe3a 	bl	8001834 <MPU6050_Read_Accel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d157      	bne.n	8001c76 <main+0x25a>

	                   Calculate_Vibration_Percentage(Accel_X, Accel_Y, Accel_Z, prev_Accel_X, prev_Accel_Y, prev_Accel_Z, &vibration_percentage);
 8001bc6:	f9b7 01ca 	ldrsh.w	r0, [r7, #458]	; 0x1ca
 8001bca:	f9b7 11c8 	ldrsh.w	r1, [r7, #456]	; 0x1c8
 8001bce:	f9b7 21c6 	ldrsh.w	r2, [r7, #454]	; 0x1c6
 8001bd2:	f9b7 41fe 	ldrsh.w	r4, [r7, #510]	; 0x1fe
 8001bd6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	f9b7 31fa 	ldrsh.w	r3, [r7, #506]	; 0x1fa
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	f9b7 31fc 	ldrsh.w	r3, [r7, #508]	; 0x1fc
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4623      	mov	r3, r4
 8001bea:	f7ff fe8d 	bl	8001908 <Calculate_Vibration_Percentage>

	                   uart_buf_len = sprintf(uart_buf, "Accel_X: %d, Accel_Y: %d, Accel_Z: %d\r\n", Accel_X, Accel_Y, Accel_Z);
 8001bee:	f9b7 31ca 	ldrsh.w	r3, [r7, #458]	; 0x1ca
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f9b7 31c8 	ldrsh.w	r3, [r7, #456]	; 0x1c8
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f9b7 31c6 	ldrsh.w	r3, [r7, #454]	; 0x1c6
 8001bfe:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	460b      	mov	r3, r1
 8001c06:	4965      	ldr	r1, [pc, #404]	; (8001d9c <main+0x380>)
 8001c08:	f003 fb56 	bl	80052b8 <siprintf>
 8001c0c:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	                   HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 8001c10:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001c1a:	2364      	movs	r3, #100	; 0x64
 8001c1c:	4856      	ldr	r0, [pc, #344]	; (8001d78 <main+0x35c>)
 8001c1e:	f002 ff5b 	bl	8004ad8 <HAL_UART_Transmit>

	                   FloatToString(float_buf, vibration_percentage, 2);
 8001c22:	edd7 7a70 	vldr	s15, [r7, #448]	; 0x1c0
 8001c26:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fdb1 	bl	8001798 <FloatToString>
	                   uart_buf_len = sprintf(uart_buf, "Vibration: %s%%\r\n", float_buf);
 8001c36:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001c3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c3e:	4958      	ldr	r1, [pc, #352]	; (8001da0 <main+0x384>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fb39 	bl	80052b8 <siprintf>
 8001c46:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	                   HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 8001c4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001c54:	2364      	movs	r3, #100	; 0x64
 8001c56:	4848      	ldr	r0, [pc, #288]	; (8001d78 <main+0x35c>)
 8001c58:	f002 ff3e 	bl	8004ad8 <HAL_UART_Transmit>

	                   // Update previous values
	                   prev_Accel_X = Accel_X;
 8001c5c:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	; 0x1ca
 8001c60:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
	                   prev_Accel_Y = Accel_Y;
 8001c64:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	; 0x1c8
 8001c68:	f8a7 31fc 	strh.w	r3, [r7, #508]	; 0x1fc
	                   prev_Accel_Z = Accel_Z;
 8001c6c:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
 8001c70:	f8a7 31fa 	strh.w	r3, [r7, #506]	; 0x1fa
 8001c74:	e010      	b.n	8001c98 <main+0x27c>
	                 } else {
	                   uart_buf_len = sprintf(uart_buf, "Error reading accelerometer data\r\n");
 8001c76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c7a:	494a      	ldr	r1, [pc, #296]	; (8001da4 <main+0x388>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fb1b 	bl	80052b8 <siprintf>
 8001c82:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	                   HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 8001c86:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001c90:	2364      	movs	r3, #100	; 0x64
 8001c92:	4839      	ldr	r0, [pc, #228]	; (8001d78 <main+0x35c>)
 8001c94:	f002 ff20 	bl	8004ad8 <HAL_UART_Transmit>
	                 }
					 //---------------------------------------------------------------------------------------------

//---------------------------------Voltage sensor logic-------------------------------------------------------------
for (int i = 0; i < SAMPLES_COUNT; i++) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001c9e:	e012      	b.n	8001cc6 <main+0x2aa>
      adc_values[i] = Read_ADC();
 8001ca0:	f7ff fcd2 	bl	8001648 <Read_ADC>
 8001ca4:	4601      	mov	r1, r0
 8001ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cae:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8001cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      HAL_Delay(10); // Small delay between samples to avoid rapid fluctuation
 8001cb6:	200a      	movs	r0, #10
 8001cb8:	f000 fbc2 	bl	8002440 <HAL_Delay>
for (int i = 0; i < SAMPLES_COUNT; i++) {
 8001cbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001cc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cca:	2b31      	cmp	r3, #49	; 0x31
 8001ccc:	dde8      	ble.n	8001ca0 <main+0x284>
    }

    adc_value = (uint32_t)running_average_filter(adc_values, SAMPLES_COUNT);
 8001cce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cd2:	2132      	movs	r1, #50	; 0x32
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fccf 	bl	8001678 <running_average_filter>
 8001cda:	eef0 7a40 	vmov.f32	s15, s0
 8001cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    raw_voltage = Convert_ADC_to_Voltage(adc_value);
 8001cea:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8001cee:	f7ff fcf3 	bl	80016d8 <Convert_ADC_to_Voltage>
 8001cf2:	ed87 0a78 	vstr	s0, [r7, #480]	; 0x1e0
    input_voltage = Convert_Voltage_to_Input(raw_voltage);
 8001cf6:	ed97 0a78 	vldr	s0, [r7, #480]	; 0x1e0
 8001cfa:	f7ff fd1d 	bl	8001738 <Convert_Voltage_to_Input>
 8001cfe:	ed87 0a81 	vstr	s0, [r7, #516]	; 0x204

    // Clamp the voltage to the known maximum
    if (input_voltage > VOLTAGE_INPUT) {
 8001d02:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8001d06:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001da8 <main+0x38c>
 8001d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d12:	dd02      	ble.n	8001d1a <main+0x2fe>
      input_voltage = VOLTAGE_INPUT;
 8001d14:	4b25      	ldr	r3, [pc, #148]	; (8001dac <main+0x390>)
 8001d16:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    }

    // Convert float to string
    FloatToString(voltage_str, input_voltage, 2);
 8001d1a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001d1e:	2102      	movs	r1, #2
 8001d20:	ed97 0a81 	vldr	s0, [r7, #516]	; 0x204
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fd37 	bl	8001798 <FloatToString>

    // Print the voltage, raw voltage, and ADC value
    uart_buf_len = sprintf(uart_buf, "ADC Value: %lu, Raw Voltage: %.2fV, Voltage: %sV\r\n", adc_value, raw_voltage, voltage_str);
 8001d2a:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8001d2e:	f7fe fc2b 	bl	8000588 <__aeabi_f2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001d3a:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8001d3e:	9102      	str	r1, [sp, #8]
 8001d40:	e9cd 2300 	strd	r2, r3, [sp]
 8001d44:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8001d48:	4919      	ldr	r1, [pc, #100]	; (8001db0 <main+0x394>)
 8001d4a:	f003 fab5 	bl	80052b8 <siprintf>
 8001d4e:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 8001d52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <main+0x35c>)
 8001d60:	f002 feba 	bl	8004ad8 <HAL_UART_Transmit>

//---------------------------------------------------------------------------------------------

	              HAL_Delay(1000);
 8001d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d68:	f000 fb6a 	bl	8002440 <HAL_Delay>
  {
 8001d6c:	e671      	b.n	8001a52 <main+0x36>
 8001d6e:	bf00      	nop
 8001d70:	2000008c 	.word	0x2000008c
 8001d74:	08006ad0 	.word	0x08006ad0
 8001d78:	20000264 	.word	0x20000264
 8001d7c:	08006b00 	.word	0x08006b00
 8001d80:	08006b10 	.word	0x08006b10
 8001d84:	08006b1c 	.word	0x08006b1c
 8001d88:	08006b28 	.word	0x08006b28
 8001d8c:	08006b44 	.word	0x08006b44
 8001d90:	08006b58 	.word	0x08006b58
 8001d94:	08006b74 	.word	0x08006b74
 8001d98:	20000170 	.word	0x20000170
 8001d9c:	08006b8c 	.word	0x08006b8c
 8001da0:	08006bb4 	.word	0x08006bb4
 8001da4:	08006bc8 	.word	0x08006bc8
 8001da8:	437a0000 	.word	0x437a0000
 8001dac:	437a0000 	.word	0x437a0000
 8001db0:	08006bec 	.word	0x08006bec

08001db4 <Read_ADC_Channel>:

}


//-----------------------------MQ Sensors Function----------------------------------------
uint32_t Read_ADC_Channel(ADC_HandleTypeDef* hadc, uint32_t channel) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]

    sConfig.Channel = channel;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1; // Use integer 1 directly
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fd34 	bl	800284c <HAL_ADC_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <Read_ADC_Channel+0x3a>
        Error_Handler();
 8001dea:	f000 f883 	bl	8001ef4 <Error_Handler>
    }

    HAL_ADC_Start(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fb8e 	bl	8002510 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fc8e 	bl	800271a <HAL_ADC_PollForConversion>
    uint32_t value = HAL_ADC_GetValue(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fd16 	bl	8002830 <HAL_ADC_GetValue>
 8001e04:	61f8      	str	r0, [r7, #28]
    HAL_ADC_Stop(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fc54 	bl	80026b4 <HAL_ADC_Stop>

    return value;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b094      	sub	sp, #80	; 0x50
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	2234      	movs	r2, #52	; 0x34
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fa66 	bl	80052f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <SystemClock_Config+0xd4>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	4a29      	ldr	r2, [pc, #164]	; (8001eec <SystemClock_Config+0xd4>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <SystemClock_Config+0xd4>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <SystemClock_Config+0xd8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e64:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <SystemClock_Config+0xd8>)
 8001e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <SystemClock_Config+0xd8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e80:	2310      	movs	r3, #16
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e84:	2302      	movs	r3, #2
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e96:	2304      	movs	r3, #4
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fb28 	bl	80044fc <HAL_RCC_OscConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001eb2:	f000 f81f 	bl	8001ef4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb6:	230f      	movs	r3, #15
 8001eb8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 ffc8 	bl	8003e68 <HAL_RCC_ClockConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001ede:	f000 f809 	bl	8001ef4 <Error_Handler>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3750      	adds	r7, #80	; 0x50
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40007000 	.word	0x40007000

08001ef4 <Error_Handler>:


void Error_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef8:	b672      	cpsid	i
}
 8001efa:	bf00      	nop

  __disable_irq();
  while (1)
 8001efc:	e7fe      	b.n	8001efc <Error_Handler+0x8>
	...

08001f00 <RTC_GetTime>:
  data[1] = (month / 10 << 4) | (month % 10);      // Convert to BCD
  data[2] = ((year % 100) / 10 << 4) | (year % 10);// Convert to BCD
  HAL_I2C_Mem_Write(&hi2c1, RTC_ADDRESS, 0x04, 1, data, 3, HAL_MAX_DELAY);
}

void RTC_GetTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint8_t data[3];
  HAL_I2C_Mem_Read(&hi2c1, RTC_ADDRESS, 0x00, 1, data, 3, HAL_MAX_DELAY);
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	2303      	movs	r3, #3
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	2200      	movs	r2, #0
 8001f20:	21d0      	movs	r1, #208	; 0xd0
 8001f22:	481b      	ldr	r0, [pc, #108]	; (8001f90 <RTC_GetTime+0x90>)
 8001f24:	f001 fa98 	bl	8003458 <HAL_I2C_Mem_Read>
  *seconds = (data[0] >> 4) * 10 + (data[0] & 0x0F);
 8001f28:	7d3b      	ldrb	r3, [r7, #20]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	7d3b      	ldrb	r3, [r7, #20]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	701a      	strb	r2, [r3, #0]
  *minutes = (data[1] >> 4) * 10 + (data[1] & 0x0F);
 8001f48:	7d7b      	ldrb	r3, [r7, #21]
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	7d7b      	ldrb	r3, [r7, #21]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	701a      	strb	r2, [r3, #0]
  *hours   = (data[2] >> 4) * 10 + (data[2] & 0x0F);
 8001f68:	7dbb      	ldrb	r3, [r7, #22]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	7dbb      	ldrb	r3, [r7, #22]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	701a      	strb	r2, [r3, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000011c 	.word	0x2000011c

08001f94 <RTC_GetDate>:

void RTC_GetDate(uint8_t *day, uint8_t *month, uint16_t *year) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af04      	add	r7, sp, #16
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint8_t data[3];
  HAL_I2C_Mem_Read(&hi2c1, RTC_ADDRESS, 0x04, 1, data, 3, HAL_MAX_DELAY);
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	21d0      	movs	r1, #208	; 0xd0
 8001fb6:	481e      	ldr	r0, [pc, #120]	; (8002030 <RTC_GetDate+0x9c>)
 8001fb8:	f001 fa4e 	bl	8003458 <HAL_I2C_Mem_Read>
  *day     = (data[0] >> 4) * 10 + (data[0] & 0x0F);
 8001fbc:	7d3b      	ldrb	r3, [r7, #20]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	7d3b      	ldrb	r3, [r7, #20]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	701a      	strb	r2, [r3, #0]
  *month   = (data[1] >> 4) * 10 + (data[1] & 0x0F);
 8001fdc:	7d7b      	ldrb	r3, [r7, #21]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	7d7b      	ldrb	r3, [r7, #21]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	701a      	strb	r2, [r3, #0]
  *year    = 2000 + (data[2] >> 4) * 10 + (data[2] & 0x0F);
 8001ffc:	7dbb      	ldrb	r3, [r7, #22]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	b2db      	uxtb	r3, r3
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	0092      	lsls	r2, r2, #2
 8002008:	4413      	add	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	7dbb      	ldrb	r3, [r7, #22]
 8002010:	b29b      	uxth	r3, r3
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	b29b      	uxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	801a      	strh	r2, [r3, #0]
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000011c 	.word	0x2000011c

08002034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_MspInit+0x4c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_MspInit+0x4c>)
 8002044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_MspInit+0x4c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_MspInit+0x4c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	4a08      	ldr	r2, [pc, #32]	; (8002080 <HAL_MspInit+0x4c>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_MspInit+0x4c>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002072:	2007      	movs	r0, #7
 8002074:	f000 feca 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800

08002084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002088:	e7fe      	b.n	8002088 <NMI_Handler+0x4>

0800208a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <HardFault_Handler+0x4>

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <MemManage_Handler+0x4>

08002096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <BusFault_Handler+0x4>

0800209c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <UsageFault_Handler+0x4>

080020a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d0:	f000 f996 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <_sbrk+0x5c>)
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <_sbrk+0x60>)
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <_sbrk+0x64>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <_sbrk+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d207      	bcs.n	8002118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002108:	f003 f8fe 	bl	8005308 <__errno>
 800210c:	4603      	mov	r3, r0
 800210e:	220c      	movs	r2, #12
 8002110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e009      	b.n	800212c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <_sbrk+0x64>)
 8002128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20020000 	.word	0x20020000
 8002138:	00000400 	.word	0x00000400
 800213c:	20000218 	.word	0x20000218
 8002140:	200003f8 	.word	0x200003f8

08002144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <SystemInit+0x20>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <SystemInit+0x20>)
 8002150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_USART1_UART_Init+0x4c>)
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <MX_USART1_UART_Init+0x50>)
 8002170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <MX_USART1_UART_Init+0x4c>)
 8002174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002178:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MX_USART1_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <MX_USART1_UART_Init+0x4c>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <MX_USART1_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <MX_USART1_UART_Init+0x4c>)
 800218e:	220c      	movs	r2, #12
 8002190:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <MX_USART1_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MX_USART1_UART_Init+0x4c>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_USART1_UART_Init+0x4c>)
 80021a0:	f002 fc4a 	bl	8004a38 <HAL_UART_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021aa:	f7ff fea3 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000021c 	.word	0x2000021c
 80021b8:	40011000 	.word	0x40011000

080021bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_USART2_UART_Init+0x4c>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <MX_USART2_UART_Init+0x50>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <MX_USART2_UART_Init+0x4c>)
 80021c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_USART2_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_USART2_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <MX_USART2_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_USART2_UART_Init+0x4c>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <MX_USART2_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_USART2_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_USART2_UART_Init+0x4c>)
 80021f4:	f002 fc20 	bl	8004a38 <HAL_UART_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021fe:	f7ff fe79 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000264 	.word	0x20000264
 800220c:	40004400 	.word	0x40004400

08002210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a32      	ldr	r2, [pc, #200]	; (80022f8 <HAL_UART_MspInit+0xe8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12d      	bne.n	800228e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_UART_MspInit+0xec>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a30      	ldr	r2, [pc, #192]	; (80022fc <HAL_UART_MspInit+0xec>)
 800223c:	f043 0310 	orr.w	r3, r3, #16
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <HAL_UART_MspInit+0xec>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_UART_MspInit+0xec>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a29      	ldr	r2, [pc, #164]	; (80022fc <HAL_UART_MspInit+0xec>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_UART_MspInit+0xec>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_TX_Pin|ESP_RX_Pin;
 800226a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800227c:	2307      	movs	r3, #7
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	481e      	ldr	r0, [pc, #120]	; (8002300 <HAL_UART_MspInit+0xf0>)
 8002288:	f000 fdf4 	bl	8002e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800228c:	e030      	b.n	80022f0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <HAL_UART_MspInit+0xf4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d12b      	bne.n	80022f0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_UART_MspInit+0xec>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_UART_MspInit+0xec>)
 80022a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a6:	6413      	str	r3, [r2, #64]	; 0x40
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_UART_MspInit+0xec>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_UART_MspInit+0xec>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <HAL_UART_MspInit+0xec>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6313      	str	r3, [r2, #48]	; 0x30
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_UART_MspInit+0xec>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022d0:	230c      	movs	r3, #12
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e0:	2307      	movs	r3, #7
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4619      	mov	r1, r3
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_UART_MspInit+0xf0>)
 80022ec:	f000 fdc2 	bl	8002e74 <HAL_GPIO_Init>
}
 80022f0:	bf00      	nop
 80022f2:	3730      	adds	r7, #48	; 0x30
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40011000 	.word	0x40011000
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000
 8002304:	40004400 	.word	0x40004400

08002308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002340 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800230c:	f7ff ff1a 	bl	8002144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002312:	490d      	ldr	r1, [pc, #52]	; (8002348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800231c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002328:	4c0a      	ldr	r4, [pc, #40]	; (8002354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002336:	f002 ffed 	bl	8005314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233a:	f7ff fb6f 	bl	8001a1c <main>
  bx  lr    
 800233e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002348:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800234c:	08006cb0 	.word	0x08006cb0
  ldr r2, =_sbss
 8002350:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002354:	200003f8 	.word	0x200003f8

08002358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC_IRQHandler>
	...

0800235c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_Init+0x40>)
 8002366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_Init+0x40>)
 8002372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_Init+0x40>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002384:	2003      	movs	r0, #3
 8002386:	f000 fd41 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238a:	2000      	movs	r0, #0
 800238c:	f000 f808 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002390:	f7ff fe50 	bl	8002034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fd4b 	bl	8002e5a <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f000 fd21 	bl	8002e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000008 	.word	0x20000008
 80023fc:	20000004 	.word	0x20000004

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008
 8002424:	200002ac 	.word	0x200002ac

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200002ac 	.word	0x200002ac

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008

08002488 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e033      	b.n	8002506 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fe10 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d118      	bne.n	80024f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024ce:	f023 0302 	bic.w	r3, r3, #2
 80024d2:	f043 0202 	orr.w	r2, r3, #2
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fae8 	bl	8002ab0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
 80024f6:	e001      	b.n	80024fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_ADC_Start+0x1a>
 8002526:	2302      	movs	r3, #2
 8002528:	e0b2      	b.n	8002690 <HAL_ADC_Start+0x180>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d018      	beq.n	8002572 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002550:	4b52      	ldr	r3, [pc, #328]	; (800269c <HAL_ADC_Start+0x18c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_ADC_Start+0x190>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0c9a      	lsrs	r2, r3, #18
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002564:	e002      	b.n	800256c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3b01      	subs	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d17a      	bne.n	8002676 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025be:	d106      	bne.n	80025ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f023 0206 	bic.w	r2, r3, #6
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025dc:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <HAL_ADC_Start+0x194>)
 80025de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025e8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d12a      	bne.n	800264c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <HAL_ADC_Start+0x198>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d015      	beq.n	800262c <HAL_ADC_Start+0x11c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a29      	ldr	r2, [pc, #164]	; (80026ac <HAL_ADC_Start+0x19c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d105      	bne.n	8002616 <HAL_ADC_Start+0x106>
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <HAL_ADC_Start+0x194>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <HAL_ADC_Start+0x1a0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d136      	bne.n	800268e <HAL_ADC_Start+0x17e>
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_ADC_Start+0x194>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d130      	bne.n	800268e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d129      	bne.n	800268e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	e020      	b.n	800268e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <HAL_ADC_Start+0x198>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d11b      	bne.n	800268e <HAL_ADC_Start+0x17e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d114      	bne.n	800268e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	e00b      	b.n	800268e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	20000000 	.word	0x20000000
 80026a0:	431bde83 	.word	0x431bde83
 80026a4:	40012300 	.word	0x40012300
 80026a8:	40012000 	.word	0x40012000
 80026ac:	40012100 	.word	0x40012100
 80026b0:	40012200 	.word	0x40012200

080026b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Stop+0x16>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e021      	b.n	800270e <HAL_ADC_Stop+0x5a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002736:	d113      	bne.n	8002760 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002746:	d10b      	bne.n	8002760 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e063      	b.n	8002828 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002760:	f7ff fe62 	bl	8002428 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002766:	e021      	b.n	80027ac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d01d      	beq.n	80027ac <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_ADC_PollForConversion+0x6c>
 8002776:	f7ff fe57 	bl	8002428 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d212      	bcs.n	80027ac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d00b      	beq.n	80027ac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f043 0204 	orr.w	r2, r3, #4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e03d      	b.n	8002828 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d1d6      	bne.n	8002768 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f06f 0212 	mvn.w	r2, #18
 80027c2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d123      	bne.n	8002826 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d11f      	bne.n	8002826 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d006      	beq.n	8002802 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d111      	bne.n	8002826 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1c>
 8002864:	2302      	movs	r3, #2
 8002866:	e113      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x244>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b09      	cmp	r3, #9
 8002876:	d925      	bls.n	80028c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68d9      	ldr	r1, [r3, #12]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	3b1e      	subs	r3, #30
 800288e:	2207      	movs	r2, #7
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43da      	mvns	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	400a      	ands	r2, r1
 800289c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68d9      	ldr	r1, [r3, #12]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	4603      	mov	r3, r0
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4403      	add	r3, r0
 80028b6:	3b1e      	subs	r3, #30
 80028b8:	409a      	lsls	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	e022      	b.n	800290a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6919      	ldr	r1, [r3, #16]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	2207      	movs	r2, #7
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43da      	mvns	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	400a      	ands	r2, r1
 80028e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6919      	ldr	r1, [r3, #16]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4618      	mov	r0, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4403      	add	r3, r0
 8002900:	409a      	lsls	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b06      	cmp	r3, #6
 8002910:	d824      	bhi.n	800295c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	3b05      	subs	r3, #5
 8002924:	221f      	movs	r2, #31
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	400a      	ands	r2, r1
 8002932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	4618      	mov	r0, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	3b05      	subs	r3, #5
 800294e:	fa00 f203 	lsl.w	r2, r0, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	635a      	str	r2, [r3, #52]	; 0x34
 800295a:	e04c      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b0c      	cmp	r3, #12
 8002962:	d824      	bhi.n	80029ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	3b23      	subs	r3, #35	; 0x23
 8002976:	221f      	movs	r2, #31
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43da      	mvns	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	400a      	ands	r2, r1
 8002984:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	4618      	mov	r0, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	3b23      	subs	r3, #35	; 0x23
 80029a0:	fa00 f203 	lsl.w	r2, r0, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
 80029ac:	e023      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	3b41      	subs	r3, #65	; 0x41
 80029c0:	221f      	movs	r2, #31
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	400a      	ands	r2, r1
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	4618      	mov	r0, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	3b41      	subs	r3, #65	; 0x41
 80029ea:	fa00 f203 	lsl.w	r2, r0, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029f6:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <HAL_ADC_ConfigChannel+0x250>)
 80029f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_ADC_ConfigChannel+0x254>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d10f      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x1d8>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b12      	cmp	r3, #18
 8002a0a:	d10b      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_ADC_ConfigChannel+0x254>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d12b      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x23a>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <HAL_ADC_ConfigChannel+0x258>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d003      	beq.n	8002a40 <HAL_ADC_ConfigChannel+0x1f4>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b11      	cmp	r3, #17
 8002a3e:	d122      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_ADC_ConfigChannel+0x258>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d111      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_ADC_ConfigChannel+0x25c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_ADC_ConfigChannel+0x260>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	0c9a      	lsrs	r2, r3, #18
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a78:	e002      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f9      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40012300 	.word	0x40012300
 8002aa0:	40012000 	.word	0x40012000
 8002aa4:	10000012 	.word	0x10000012
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	431bde83 	.word	0x431bde83

08002ab0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ab8:	4b79      	ldr	r3, [pc, #484]	; (8002ca0 <ADC_Init+0x1f0>)
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	021a      	lsls	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6899      	ldr	r1, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <ADC_Init+0x1f4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d022      	beq.n	8002b8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	e00f      	b.n	8002bae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0202 	bic.w	r2, r2, #2
 8002bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7e1b      	ldrb	r3, [r3, #24]
 8002bc8:	005a      	lsls	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	3b01      	subs	r3, #1
 8002c08:	035a      	lsls	r2, r3, #13
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	e007      	b.n	8002c24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	051a      	lsls	r2, r3, #20
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6899      	ldr	r1, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c66:	025a      	lsls	r2, r3, #9
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6899      	ldr	r1, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	029a      	lsls	r2, r3, #10
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40012300 	.word	0x40012300
 8002ca4:	0f000001 	.word	0x0f000001

08002ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	; (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd8:	d301      	bcc.n	8002dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00f      	b.n	8002dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <SysTick_Config+0x40>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de6:	210f      	movs	r1, #15
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f7ff ff8e 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <SysTick_Config+0x40>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <SysTick_Config+0x40>)
 8002df8:	2207      	movs	r2, #7
 8002dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000e010 	.word	0xe000e010

08002e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff47 	bl	8002ca8 <__NVIC_SetPriorityGrouping>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e34:	f7ff ff5c 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 8002e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	6978      	ldr	r0, [r7, #20]
 8002e40:	f7ff ff8e 	bl	8002d60 <NVIC_EncodePriority>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff5d 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ffb0 	bl	8002dc8 <SysTick_Config>
 8002e68:	4603      	mov	r3, r0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e165      	b.n	800315c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 8154 	bne.w	8003156 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d005      	beq.n	8002ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d130      	bne.n	8002f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002efc:	2201      	movs	r2, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 0201 	and.w	r2, r3, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d017      	beq.n	8002f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80ae 	beq.w	8003156 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <HAL_GPIO_Init+0x300>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	4a5c      	ldr	r2, [pc, #368]	; (8003174 <HAL_GPIO_Init+0x300>)
 8003004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003008:	6453      	str	r3, [r2, #68]	; 0x44
 800300a:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <HAL_GPIO_Init+0x300>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003016:	4a58      	ldr	r2, [pc, #352]	; (8003178 <HAL_GPIO_Init+0x304>)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4f      	ldr	r2, [pc, #316]	; (800317c <HAL_GPIO_Init+0x308>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d025      	beq.n	800308e <HAL_GPIO_Init+0x21a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4e      	ldr	r2, [pc, #312]	; (8003180 <HAL_GPIO_Init+0x30c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01f      	beq.n	800308a <HAL_GPIO_Init+0x216>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4d      	ldr	r2, [pc, #308]	; (8003184 <HAL_GPIO_Init+0x310>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d019      	beq.n	8003086 <HAL_GPIO_Init+0x212>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4c      	ldr	r2, [pc, #304]	; (8003188 <HAL_GPIO_Init+0x314>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <HAL_GPIO_Init+0x20e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4b      	ldr	r2, [pc, #300]	; (800318c <HAL_GPIO_Init+0x318>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00d      	beq.n	800307e <HAL_GPIO_Init+0x20a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a4a      	ldr	r2, [pc, #296]	; (8003190 <HAL_GPIO_Init+0x31c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <HAL_GPIO_Init+0x206>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a49      	ldr	r2, [pc, #292]	; (8003194 <HAL_GPIO_Init+0x320>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_GPIO_Init+0x202>
 8003072:	2306      	movs	r3, #6
 8003074:	e00c      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 8003076:	2307      	movs	r3, #7
 8003078:	e00a      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 800307a:	2305      	movs	r3, #5
 800307c:	e008      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 800307e:	2304      	movs	r3, #4
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 8003082:	2303      	movs	r3, #3
 8003084:	e004      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 8003086:	2302      	movs	r3, #2
 8003088:	e002      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_GPIO_Init+0x21c>
 800308e:	2300      	movs	r3, #0
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	f002 0203 	and.w	r2, r2, #3
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	4093      	lsls	r3, r2
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a0:	4935      	ldr	r1, [pc, #212]	; (8003178 <HAL_GPIO_Init+0x304>)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_GPIO_Init+0x324>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030d2:	4a31      	ldr	r2, [pc, #196]	; (8003198 <HAL_GPIO_Init+0x324>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d8:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <HAL_GPIO_Init+0x324>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030fc:	4a26      	ldr	r2, [pc, #152]	; (8003198 <HAL_GPIO_Init+0x324>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_GPIO_Init+0x324>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003126:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <HAL_GPIO_Init+0x324>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_GPIO_Init+0x324>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003150:	4a11      	ldr	r2, [pc, #68]	; (8003198 <HAL_GPIO_Init+0x324>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3301      	adds	r3, #1
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	f67f ae96 	bls.w	8002e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	40013800 	.word	0x40013800
 800317c:	40020000 	.word	0x40020000
 8003180:	40020400 	.word	0x40020400
 8003184:	40020800 	.word	0x40020800
 8003188:	40020c00 	.word	0x40020c00
 800318c:	40021000 	.word	0x40021000
 8003190:	40021400 	.word	0x40021400
 8003194:	40021800 	.word	0x40021800
 8003198:	40013c00 	.word	0x40013c00

0800319c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
 80031a8:	4613      	mov	r3, r2
 80031aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ac:	787b      	ldrb	r3, [r7, #1]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031b8:	e003      	b.n	80031c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ba:	887b      	ldrh	r3, [r7, #2]
 80031bc:	041a      	lsls	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	619a      	str	r2, [r3, #24]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e12b      	b.n	800343a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe f91e 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2224      	movs	r2, #36	; 0x24
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003222:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003232:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003234:	f000 ff0a 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8003238:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a81      	ldr	r2, [pc, #516]	; (8003444 <HAL_I2C_Init+0x274>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d807      	bhi.n	8003254 <HAL_I2C_Init+0x84>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a80      	ldr	r2, [pc, #512]	; (8003448 <HAL_I2C_Init+0x278>)
 8003248:	4293      	cmp	r3, r2
 800324a:	bf94      	ite	ls
 800324c:	2301      	movls	r3, #1
 800324e:	2300      	movhi	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e006      	b.n	8003262 <HAL_I2C_Init+0x92>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a7d      	ldr	r2, [pc, #500]	; (800344c <HAL_I2C_Init+0x27c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	bf94      	ite	ls
 800325c:	2301      	movls	r3, #1
 800325e:	2300      	movhi	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0e7      	b.n	800343a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a78      	ldr	r2, [pc, #480]	; (8003450 <HAL_I2C_Init+0x280>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	0c9b      	lsrs	r3, r3, #18
 8003274:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a6a      	ldr	r2, [pc, #424]	; (8003444 <HAL_I2C_Init+0x274>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d802      	bhi.n	80032a4 <HAL_I2C_Init+0xd4>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3301      	adds	r3, #1
 80032a2:	e009      	b.n	80032b8 <HAL_I2C_Init+0xe8>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	4a69      	ldr	r2, [pc, #420]	; (8003454 <HAL_I2C_Init+0x284>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	3301      	adds	r3, #1
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	430b      	orrs	r3, r1
 80032be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	495c      	ldr	r1, [pc, #368]	; (8003444 <HAL_I2C_Init+0x274>)
 80032d4:	428b      	cmp	r3, r1
 80032d6:	d819      	bhi.n	800330c <HAL_I2C_Init+0x13c>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e59      	subs	r1, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e6:	1c59      	adds	r1, r3, #1
 80032e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032ec:	400b      	ands	r3, r1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_I2C_Init+0x138>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e59      	subs	r1, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003306:	e051      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 8003308:	2304      	movs	r3, #4
 800330a:	e04f      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <HAL_I2C_Init+0x168>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1e58      	subs	r0, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e012      	b.n	800335e <HAL_I2C_Init+0x18e>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e58      	subs	r0, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	0099      	lsls	r1, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	fbb0 f3f3 	udiv	r3, r0, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Init+0x196>
 8003362:	2301      	movs	r3, #1
 8003364:	e022      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10e      	bne.n	800338c <HAL_I2C_Init+0x1bc>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1e58      	subs	r0, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6859      	ldr	r1, [r3, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	440b      	add	r3, r1
 800337c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003380:	3301      	adds	r3, #1
 8003382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338a:	e00f      	b.n	80033ac <HAL_I2C_Init+0x1dc>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1e58      	subs	r0, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	0099      	lsls	r1, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	6809      	ldr	r1, [r1, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6911      	ldr	r1, [r2, #16]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68d2      	ldr	r2, [r2, #12]
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	430b      	orrs	r3, r1
 80033ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	000186a0 	.word	0x000186a0
 8003448:	001e847f 	.word	0x001e847f
 800344c:	003d08ff 	.word	0x003d08ff
 8003450:	431bde83 	.word	0x431bde83
 8003454:	10624dd3 	.word	0x10624dd3

08003458 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08c      	sub	sp, #48	; 0x30
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	4608      	mov	r0, r1
 8003462:	4611      	mov	r1, r2
 8003464:	461a      	mov	r2, r3
 8003466:	4603      	mov	r3, r0
 8003468:	817b      	strh	r3, [r7, #10]
 800346a:	460b      	mov	r3, r1
 800346c:	813b      	strh	r3, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003472:	f7fe ffd9 	bl	8002428 <HAL_GetTick>
 8003476:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	f040 8214 	bne.w	80038ae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2319      	movs	r3, #25
 800348c:	2201      	movs	r2, #1
 800348e:	497b      	ldr	r1, [pc, #492]	; (800367c <HAL_I2C_Mem_Read+0x224>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fafb 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
 800349e:	e207      	b.n	80038b0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2C_Mem_Read+0x56>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e200      	b.n	80038b0 <HAL_I2C_Mem_Read+0x458>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d007      	beq.n	80034d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2222      	movs	r2, #34	; 0x22
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a5b      	ldr	r2, [pc, #364]	; (8003680 <HAL_I2C_Mem_Read+0x228>)
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003516:	88f8      	ldrh	r0, [r7, #6]
 8003518:	893a      	ldrh	r2, [r7, #8]
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	4603      	mov	r3, r0
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f9c8 	bl	80038bc <I2C_RequestMemoryRead>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1bc      	b.n	80038b0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d113      	bne.n	8003566 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e190      	b.n	8003888 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	2b01      	cmp	r3, #1
 800356c:	d11b      	bne.n	80035a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e170      	b.n	8003888 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d11b      	bne.n	80035e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	e150      	b.n	8003888 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035fc:	e144      	b.n	8003888 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	2b03      	cmp	r3, #3
 8003604:	f200 80f1 	bhi.w	80037ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	2b01      	cmp	r3, #1
 800360e:	d123      	bne.n	8003658 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fb9b 	bl	8003d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e145      	b.n	80038b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003656:	e117      	b.n	8003888 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	2b02      	cmp	r3, #2
 800365e:	d14e      	bne.n	80036fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	2200      	movs	r2, #0
 8003668:	4906      	ldr	r1, [pc, #24]	; (8003684 <HAL_I2C_Mem_Read+0x22c>)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa0e 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e11a      	b.n	80038b0 <HAL_I2C_Mem_Read+0x458>
 800367a:	bf00      	nop
 800367c:	00100002 	.word	0x00100002
 8003680:	ffff0000 	.word	0xffff0000
 8003684:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036fc:	e0c4      	b.n	8003888 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2200      	movs	r2, #0
 8003706:	496c      	ldr	r1, [pc, #432]	; (80038b8 <HAL_I2C_Mem_Read+0x460>)
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f9bf 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0cb      	b.n	80038b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	2200      	movs	r2, #0
 8003762:	4955      	ldr	r1, [pc, #340]	; (80038b8 <HAL_I2C_Mem_Read+0x460>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f991 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e09d      	b.n	80038b0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037e8:	e04e      	b.n	8003888 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 faae 	bl	8003d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e058      	b.n	80038b0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d124      	bne.n	8003888 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	2b03      	cmp	r3, #3
 8003844:	d107      	bne.n	8003856 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003854:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	f47f aeb6 	bne.w	80035fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3728      	adds	r7, #40	; 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	00010004 	.word	0x00010004

080038bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f8c2 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391c:	d103      	bne.n	8003926 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e0aa      	b.n	8003a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800392a:	897b      	ldrh	r3, [r7, #10]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003938:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	6a3a      	ldr	r2, [r7, #32]
 800393e:	4952      	ldr	r1, [pc, #328]	; (8003a88 <I2C_RequestMemoryRead+0x1cc>)
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f91d 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e097      	b.n	8003a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003968:	6a39      	ldr	r1, [r7, #32]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f9a8 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2b04      	cmp	r3, #4
 800397c:	d107      	bne.n	800398e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e076      	b.n	8003a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d105      	bne.n	80039a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003998:	893b      	ldrh	r3, [r7, #8]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	611a      	str	r2, [r3, #16]
 80039a2:	e021      	b.n	80039e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039a4:	893b      	ldrh	r3, [r7, #8]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b4:	6a39      	ldr	r1, [r7, #32]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f982 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d107      	bne.n	80039da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e050      	b.n	8003a80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039de:	893b      	ldrh	r3, [r7, #8]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	6a39      	ldr	r1, [r7, #32]
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f967 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d107      	bne.n	8003a10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e035      	b.n	8003a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f82b 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4a:	d103      	bne.n	8003a54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e013      	b.n	8003a80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a58:	897b      	ldrh	r3, [r7, #10]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	6a3a      	ldr	r2, [r7, #32]
 8003a6c:	4906      	ldr	r1, [pc, #24]	; (8003a88 <I2C_RequestMemoryRead+0x1cc>)
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f886 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	00010002 	.word	0x00010002

08003a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a9c:	e048      	b.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d044      	beq.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe fcbf 	bl	8002428 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d139      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10d      	bne.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	e00c      	b.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d116      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e023      	b.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10d      	bne.n	8003b56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	e00c      	b.n	8003b70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d093      	beq.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b8e:	e071      	b.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9e:	d123      	bne.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e067      	b.n	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d041      	beq.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf0:	f7fe fc1a 	bl	8002428 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d302      	bcc.n	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d136      	bne.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10c      	bne.n	8003c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bf14      	ite	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	2300      	moveq	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	e00b      	b.n	8003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	43da      	mvns	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e021      	b.n	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10c      	bne.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	43da      	mvns	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e00b      	b.n	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bf14      	ite	ne
 8003caa:	2301      	movne	r3, #1
 8003cac:	2300      	moveq	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f47f af6d 	bne.w	8003b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ccc:	e034      	b.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f89b 	bl	8003e0a <I2C_IsAcknowledgeFailed>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e034      	b.n	8003d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d028      	beq.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce6:	f7fe fb9f 	bl	8002428 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d302      	bcc.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d11d      	bne.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	2b80      	cmp	r3, #128	; 0x80
 8003d08:	d016      	beq.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e007      	b.n	8003d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d1c3      	bne.n	8003cce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d5c:	e049      	b.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d119      	bne.n	8003da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0210 	mvn.w	r2, #16
 8003d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e030      	b.n	8003e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da0:	f7fe fb42 	bl	8002428 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11d      	bne.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d016      	beq.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f043 0220 	orr.w	r2, r3, #32
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e007      	b.n	8003e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d1ae      	bne.n	8003d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e20:	d11b      	bne.n	8003e5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0cc      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b68      	ldr	r3, [pc, #416]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d90c      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed4:	4b53      	ldr	r3, [pc, #332]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	494d      	ldr	r1, [pc, #308]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d044      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e067      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4934      	ldr	r1, [pc, #208]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fe fa66 	bl	8002428 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fe fa62 	bl	8002428 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d20c      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	490e      	ldr	r1, [pc, #56]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fee:	f000 f855 	bl	800409c <HAL_RCC_GetSysClockFreq>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	490a      	ldr	r1, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe f9c6 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00
 8004024:	40023800 	.word	0x40023800
 8004028:	08006c20 	.word	0x08006c20
 800402c:	20000000 	.word	0x20000000
 8004030:	20000004 	.word	0x20000004

08004034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_RCC_GetHCLKFreq+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000000 	.word	0x20000000

0800404c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004050:	f7ff fff0 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0a9b      	lsrs	r3, r3, #10
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4903      	ldr	r1, [pc, #12]	; (8004070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	08006c30 	.word	0x08006c30

08004074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004078:	f7ff ffdc 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0b5b      	lsrs	r3, r3, #13
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4903      	ldr	r1, [pc, #12]	; (8004098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	08006c30 	.word	0x08006c30

0800409c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0ae      	sub	sp, #184	; 0xb8
 80040a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c2:	4bcb      	ldr	r3, [pc, #812]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b0c      	cmp	r3, #12
 80040cc:	f200 8206 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x440>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	080044dd 	.word	0x080044dd
 80040e0:	080044dd 	.word	0x080044dd
 80040e4:	080044dd 	.word	0x080044dd
 80040e8:	08004115 	.word	0x08004115
 80040ec:	080044dd 	.word	0x080044dd
 80040f0:	080044dd 	.word	0x080044dd
 80040f4:	080044dd 	.word	0x080044dd
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	080044dd 	.word	0x080044dd
 8004100:	080044dd 	.word	0x080044dd
 8004104:	080044dd 	.word	0x080044dd
 8004108:	0800430d 	.word	0x0800430d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4bb9      	ldr	r3, [pc, #740]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800410e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004112:	e1e7      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004114:	4bb8      	ldr	r3, [pc, #736]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800411a:	e1e3      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800411c:	4bb4      	ldr	r3, [pc, #720]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004128:	4bb1      	ldr	r3, [pc, #708]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d071      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004134:	4bae      	ldr	r3, [pc, #696]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004140:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4621      	mov	r1, r4
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	6439      	str	r1, [r7, #64]	; 0x40
 8004178:	4629      	mov	r1, r5
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	647b      	str	r3, [r7, #68]	; 0x44
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800418c:	4649      	mov	r1, r9
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4641      	mov	r1, r8
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4641      	mov	r1, r8
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4641      	mov	r1, r8
 800419c:	1a51      	subs	r1, r2, r1
 800419e:	63b9      	str	r1, [r7, #56]	; 0x38
 80041a0:	4649      	mov	r1, r9
 80041a2:	eb63 0301 	sbc.w	r3, r3, r1
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80041b4:	4649      	mov	r1, r9
 80041b6:	00cb      	lsls	r3, r1, #3
 80041b8:	4641      	mov	r1, r8
 80041ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041be:	4641      	mov	r1, r8
 80041c0:	00ca      	lsls	r2, r1, #3
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	4622      	mov	r2, r4
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
 80041ce:	462b      	mov	r3, r5
 80041d0:	460a      	mov	r2, r1
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041e4:	4629      	mov	r1, r5
 80041e6:	024b      	lsls	r3, r1, #9
 80041e8:	4621      	mov	r1, r4
 80041ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041ee:	4621      	mov	r1, r4
 80041f0:	024a      	lsls	r2, r1, #9
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004200:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004204:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004208:	f7fc fd3e 	bl	8000c88 <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4613      	mov	r3, r2
 8004212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004216:	e067      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004218:	4b75      	ldr	r3, [pc, #468]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	2200      	movs	r2, #0
 8004220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004224:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800422c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004230:	67bb      	str	r3, [r7, #120]	; 0x78
 8004232:	2300      	movs	r3, #0
 8004234:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004236:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	f04f 0000 	mov.w	r0, #0
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	0159      	lsls	r1, r3, #5
 8004248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800424c:	0150      	lsls	r0, r2, #5
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4621      	mov	r1, r4
 8004254:	1a51      	subs	r1, r2, r1
 8004256:	62b9      	str	r1, [r7, #40]	; 0x28
 8004258:	4629      	mov	r1, r5
 800425a:	eb63 0301 	sbc.w	r3, r3, r1
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800426c:	4649      	mov	r1, r9
 800426e:	018b      	lsls	r3, r1, #6
 8004270:	4641      	mov	r1, r8
 8004272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004276:	4641      	mov	r1, r8
 8004278:	018a      	lsls	r2, r1, #6
 800427a:	4641      	mov	r1, r8
 800427c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004280:	4649      	mov	r1, r9
 8004282:	eb63 0b01 	sbc.w	fp, r3, r1
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004292:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004296:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429a:	4692      	mov	sl, r2
 800429c:	469b      	mov	fp, r3
 800429e:	4623      	mov	r3, r4
 80042a0:	eb1a 0303 	adds.w	r3, sl, r3
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	462b      	mov	r3, r5
 80042a8:	eb4b 0303 	adc.w	r3, fp, r3
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042ba:	4629      	mov	r1, r5
 80042bc:	028b      	lsls	r3, r1, #10
 80042be:	4621      	mov	r1, r4
 80042c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c4:	4621      	mov	r1, r4
 80042c6:	028a      	lsls	r2, r1, #10
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042d0:	2200      	movs	r2, #0
 80042d2:	673b      	str	r3, [r7, #112]	; 0x70
 80042d4:	677a      	str	r2, [r7, #116]	; 0x74
 80042d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80042da:	f7fc fcd5 	bl	8000c88 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4613      	mov	r3, r2
 80042e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042e8:	4b41      	ldr	r3, [pc, #260]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	3301      	adds	r3, #1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80042fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800430a:	e0eb      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800430c:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004318:	4b35      	ldr	r3, [pc, #212]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d06b      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004324:	4b32      	ldr	r3, [pc, #200]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	2200      	movs	r2, #0
 800432c:	66bb      	str	r3, [r7, #104]	; 0x68
 800432e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	663b      	str	r3, [r7, #96]	; 0x60
 8004338:	2300      	movs	r3, #0
 800433a:	667b      	str	r3, [r7, #100]	; 0x64
 800433c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	0159      	lsls	r1, r3, #5
 800434e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004352:	0150      	lsls	r0, r2, #5
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4621      	mov	r1, r4
 800435a:	1a51      	subs	r1, r2, r1
 800435c:	61b9      	str	r1, [r7, #24]
 800435e:	4629      	mov	r1, r5
 8004360:	eb63 0301 	sbc.w	r3, r3, r1
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004372:	4659      	mov	r1, fp
 8004374:	018b      	lsls	r3, r1, #6
 8004376:	4651      	mov	r1, sl
 8004378:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437c:	4651      	mov	r1, sl
 800437e:	018a      	lsls	r2, r1, #6
 8004380:	4651      	mov	r1, sl
 8004382:	ebb2 0801 	subs.w	r8, r2, r1
 8004386:	4659      	mov	r1, fp
 8004388:	eb63 0901 	sbc.w	r9, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004398:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800439c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043a0:	4690      	mov	r8, r2
 80043a2:	4699      	mov	r9, r3
 80043a4:	4623      	mov	r3, r4
 80043a6:	eb18 0303 	adds.w	r3, r8, r3
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	462b      	mov	r3, r5
 80043ae:	eb49 0303 	adc.w	r3, r9, r3
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043c0:	4629      	mov	r1, r5
 80043c2:	024b      	lsls	r3, r1, #9
 80043c4:	4621      	mov	r1, r4
 80043c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043ca:	4621      	mov	r1, r4
 80043cc:	024a      	lsls	r2, r1, #9
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043d6:	2200      	movs	r2, #0
 80043d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80043dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043e0:	f7fc fc52 	bl	8000c88 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ee:	e065      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x420>
 80043f0:	40023800 	.word	0x40023800
 80043f4:	00f42400 	.word	0x00f42400
 80043f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fc:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	2200      	movs	r2, #0
 8004404:	4618      	mov	r0, r3
 8004406:	4611      	mov	r1, r2
 8004408:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800440c:	653b      	str	r3, [r7, #80]	; 0x50
 800440e:	2300      	movs	r3, #0
 8004410:	657b      	str	r3, [r7, #84]	; 0x54
 8004412:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004416:	4642      	mov	r2, r8
 8004418:	464b      	mov	r3, r9
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004428:	0150      	lsls	r0, r2, #5
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4641      	mov	r1, r8
 8004430:	1a51      	subs	r1, r2, r1
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	4649      	mov	r1, r9
 8004436:	eb63 0301 	sbc.w	r3, r3, r1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004448:	4659      	mov	r1, fp
 800444a:	018b      	lsls	r3, r1, #6
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004452:	4651      	mov	r1, sl
 8004454:	018a      	lsls	r2, r1, #6
 8004456:	4651      	mov	r1, sl
 8004458:	1a54      	subs	r4, r2, r1
 800445a:	4659      	mov	r1, fp
 800445c:	eb63 0501 	sbc.w	r5, r3, r1
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	00eb      	lsls	r3, r5, #3
 800446a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446e:	00e2      	lsls	r2, r4, #3
 8004470:	4614      	mov	r4, r2
 8004472:	461d      	mov	r5, r3
 8004474:	4643      	mov	r3, r8
 8004476:	18e3      	adds	r3, r4, r3
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	464b      	mov	r3, r9
 800447c:	eb45 0303 	adc.w	r3, r5, r3
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800448e:	4629      	mov	r1, r5
 8004490:	028b      	lsls	r3, r1, #10
 8004492:	4621      	mov	r1, r4
 8004494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004498:	4621      	mov	r1, r4
 800449a:	028a      	lsls	r2, r1, #10
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a4:	2200      	movs	r2, #0
 80044a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044ae:	f7fc fbeb 	bl	8000c88 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4613      	mov	r3, r2
 80044b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044bc:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0f1b      	lsrs	r3, r3, #28
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80044ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044da:	e003      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80044de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	37b8      	adds	r7, #184	; 0xb8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	00f42400 	.word	0x00f42400

080044fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e28d      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8083 	beq.w	8004622 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800451c:	4b94      	ldr	r3, [pc, #592]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b04      	cmp	r3, #4
 8004526:	d019      	beq.n	800455c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004528:	4b91      	ldr	r3, [pc, #580]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004530:	2b08      	cmp	r3, #8
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004534:	4b8e      	ldr	r3, [pc, #568]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004540:	d00c      	beq.n	800455c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800454a:	2b0c      	cmp	r3, #12
 800454c:	d112      	bne.n	8004574 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455a:	d10b      	bne.n	8004574 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	4b84      	ldr	r3, [pc, #528]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05b      	beq.n	8004620 <HAL_RCC_OscConfig+0x124>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d157      	bne.n	8004620 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e25a      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x90>
 800457e:	4b7c      	ldr	r3, [pc, #496]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7b      	ldr	r2, [pc, #492]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e01d      	b.n	80045c8 <HAL_RCC_OscConfig+0xcc>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0xb4>
 8004596:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a75      	ldr	r2, [pc, #468]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b73      	ldr	r3, [pc, #460]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a72      	ldr	r2, [pc, #456]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0xcc>
 80045b0:	4b6f      	ldr	r3, [pc, #444]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6b      	ldr	r2, [pc, #428]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd ff2a 	bl	8002428 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd ff26 	bl	8002428 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e21f      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b61      	ldr	r3, [pc, #388]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0xdc>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd ff16 	bl	8002428 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004600:	f7fd ff12 	bl	8002428 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	; 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e20b      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	4b57      	ldr	r3, [pc, #348]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x104>
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06f      	beq.n	800470e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800462e:	4b50      	ldr	r3, [pc, #320]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800463a:	4b4d      	ldr	r3, [pc, #308]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004642:	2b08      	cmp	r3, #8
 8004644:	d105      	bne.n	8004652 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004646:	4b4a      	ldr	r3, [pc, #296]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d11c      	bne.n	8004698 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465e:	4b44      	ldr	r3, [pc, #272]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d116      	bne.n	8004698 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	4b41      	ldr	r3, [pc, #260]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_RCC_OscConfig+0x186>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e1d3      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004682:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4937      	ldr	r1, [pc, #220]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004696:	e03a      	b.n	800470e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a0:	4b34      	ldr	r3, [pc, #208]	; (8004774 <HAL_RCC_OscConfig+0x278>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fd febf 	bl	8002428 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ae:	f7fd febb 	bl	8002428 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e1b4      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046cc:	4b28      	ldr	r3, [pc, #160]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4925      	ldr	r1, [pc, #148]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	600b      	str	r3, [r1, #0]
 80046e0:	e015      	b.n	800470e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <HAL_RCC_OscConfig+0x278>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fd fe9e 	bl	8002428 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f0:	f7fd fe9a 	bl	8002428 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e193      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d036      	beq.n	8004788 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <HAL_RCC_OscConfig+0x27c>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7fd fe7e 	bl	8002428 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004730:	f7fd fe7a 	bl	8002428 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e173      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_OscConfig+0x274>)
 8004744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x234>
 800474e:	e01b      	b.n	8004788 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_OscConfig+0x27c>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fd fe67 	bl	8002428 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800475c:	e00e      	b.n	800477c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800475e:	f7fd fe63 	bl	8002428 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d907      	bls.n	800477c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e15c      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
 8004770:	40023800 	.word	0x40023800
 8004774:	42470000 	.word	0x42470000
 8004778:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	4b8a      	ldr	r3, [pc, #552]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ea      	bne.n	800475e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8097 	beq.w	80048c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479a:	4b83      	ldr	r3, [pc, #524]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	4b7f      	ldr	r3, [pc, #508]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a7e      	ldr	r2, [pc, #504]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b7c      	ldr	r3, [pc, #496]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	4b79      	ldr	r3, [pc, #484]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d118      	bne.n	8004804 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d2:	4b76      	ldr	r3, [pc, #472]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a75      	ldr	r2, [pc, #468]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047de:	f7fd fe23 	bl	8002428 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fd fe1f 	bl	8002428 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e118      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	4b6c      	ldr	r3, [pc, #432]	; (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x31e>
 800480c:	4b66      	ldr	r3, [pc, #408]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	4a65      	ldr	r2, [pc, #404]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6713      	str	r3, [r2, #112]	; 0x70
 8004818:	e01c      	b.n	8004854 <HAL_RCC_OscConfig+0x358>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b05      	cmp	r3, #5
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x340>
 8004822:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a60      	ldr	r2, [pc, #384]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6713      	str	r3, [r2, #112]	; 0x70
 800482e:	4b5e      	ldr	r3, [pc, #376]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	4a5d      	ldr	r2, [pc, #372]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6713      	str	r3, [r2, #112]	; 0x70
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0x358>
 800483c:	4b5a      	ldr	r3, [pc, #360]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a59      	ldr	r2, [pc, #356]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	4b57      	ldr	r3, [pc, #348]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	4a56      	ldr	r2, [pc, #344]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800484e:	f023 0304 	bic.w	r3, r3, #4
 8004852:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd fde4 	bl	8002428 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fd fde0 	bl	8002428 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0d7      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487a:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ee      	beq.n	8004864 <HAL_RCC_OscConfig+0x368>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fd fdce 	bl	8002428 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fd fdca 	bl	8002428 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0c1      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a6:	4b40      	ldr	r3, [pc, #256]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ee      	bne.n	8004890 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b8:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	4a3a      	ldr	r2, [pc, #232]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80ad 	beq.w	8004a28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ce:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d060      	beq.n	800499c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d145      	bne.n	800496e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b33      	ldr	r3, [pc, #204]	; (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd fd9e 	bl	8002428 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fd fd9a 	bl	8002428 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e093      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	4b29      	ldr	r3, [pc, #164]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	019b      	lsls	r3, r3, #6
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	3b01      	subs	r3, #1
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	491b      	ldr	r1, [pc, #108]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd fd6f 	bl	8002428 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494e:	f7fd fd6b 	bl	8002428 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e064      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x452>
 800496c:	e05c      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd fd58 	bl	8002428 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497c:	f7fd fd54 	bl	8002428 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e04d      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x480>
 800499a:	e045      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e040      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40007000 	.word	0x40007000
 80049b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b4:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <HAL_RCC_OscConfig+0x538>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d030      	beq.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d129      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d122      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d119      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	3b01      	subs	r3, #1
 80049fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d10f      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800

08004a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e042      	b.n	8004ad0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fd fbd6 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2224      	movs	r2, #36	; 0x24
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f973 	bl	8004d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d175      	bne.n	8004be4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_UART_Transmit+0x2c>
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e06e      	b.n	8004be6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2221      	movs	r2, #33	; 0x21
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b16:	f7fd fc87 	bl	8002428 <HAL_GetTick>
 8004b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b30:	d108      	bne.n	8004b44 <HAL_UART_Transmit+0x6c>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	e003      	b.n	8004b4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b4c:	e02e      	b.n	8004bac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2180      	movs	r1, #128	; 0x80
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f848 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e03a      	b.n	8004be6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	3302      	adds	r3, #2
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	e007      	b.n	8004b9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	781a      	ldrb	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1cb      	bne.n	8004b4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2140      	movs	r1, #64	; 0x40
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f814 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e006      	b.n	8004be6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfe:	e03b      	b.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d037      	beq.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c08:	f7fd fc0e 	bl	8002428 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d302      	bcc.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e03a      	b.n	8004c98 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d023      	beq.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b80      	cmp	r3, #128	; 0x80
 8004c34:	d020      	beq.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d01d      	beq.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d116      	bne.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f81d 	bl	8004ca0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e00f      	b.n	8004c98 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4013      	ands	r3, r2
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d0b4      	beq.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b095      	sub	sp, #84	; 0x54
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cc8:	643a      	str	r2, [r7, #64]	; 0x40
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3314      	adds	r3, #20
 8004ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e5      	bne.n	8004cdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d119      	bne.n	8004d4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f023 0310 	bic.w	r3, r3, #16
 8004d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d38:	61ba      	str	r2, [r7, #24]
 8004d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6979      	ldr	r1, [r7, #20]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	613b      	str	r3, [r7, #16]
   return(result);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d5a:	bf00      	nop
 8004d5c:	3754      	adds	r7, #84	; 0x54
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d6c:	b0c0      	sub	sp, #256	; 0x100
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	68d9      	ldr	r1, [r3, #12]
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	ea40 0301 	orr.w	r3, r0, r1
 8004d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004dc0:	f021 010c 	bic.w	r1, r1, #12
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	6999      	ldr	r1, [r3, #24]
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	ea40 0301 	orr.w	r3, r0, r1
 8004dee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b8f      	ldr	r3, [pc, #572]	; (8005034 <UART_SetConfig+0x2cc>)
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d005      	beq.n	8004e08 <UART_SetConfig+0xa0>
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4b8d      	ldr	r3, [pc, #564]	; (8005038 <UART_SetConfig+0x2d0>)
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d104      	bne.n	8004e12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7ff f934 	bl	8004074 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e10:	e003      	b.n	8004e1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e12:	f7ff f91b 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8004e16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e24:	f040 810c 	bne.w	8005040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	1891      	adds	r1, r2, r2
 8004e40:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e42:	415b      	adcs	r3, r3
 8004e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	eb12 0801 	adds.w	r8, r2, r1
 8004e50:	4629      	mov	r1, r5
 8004e52:	eb43 0901 	adc.w	r9, r3, r1
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e6a:	4690      	mov	r8, r2
 8004e6c:	4699      	mov	r9, r3
 8004e6e:	4623      	mov	r3, r4
 8004e70:	eb18 0303 	adds.w	r3, r8, r3
 8004e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e78:	462b      	mov	r3, r5
 8004e7a:	eb49 0303 	adc.w	r3, r9, r3
 8004e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e96:	460b      	mov	r3, r1
 8004e98:	18db      	adds	r3, r3, r3
 8004e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004eac:	f7fb feec 	bl	8000c88 <__aeabi_uldivmod>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4b61      	ldr	r3, [pc, #388]	; (800503c <UART_SetConfig+0x2d4>)
 8004eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	011c      	lsls	r4, r3, #4
 8004ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ec8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	1891      	adds	r1, r2, r2
 8004ed6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ed8:	415b      	adcs	r3, r3
 8004eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	eb43 0b01 	adc.w	fp, r3, r1
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f00:	4692      	mov	sl, r2
 8004f02:	469b      	mov	fp, r3
 8004f04:	4643      	mov	r3, r8
 8004f06:	eb1a 0303 	adds.w	r3, sl, r3
 8004f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	eb4b 0303 	adc.w	r3, fp, r3
 8004f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	18db      	adds	r3, r3, r3
 8004f30:	643b      	str	r3, [r7, #64]	; 0x40
 8004f32:	4613      	mov	r3, r2
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	647b      	str	r3, [r7, #68]	; 0x44
 8004f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f42:	f7fb fea1 	bl	8000c88 <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4b3b      	ldr	r3, [pc, #236]	; (800503c <UART_SetConfig+0x2d4>)
 8004f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	2264      	movs	r2, #100	; 0x64
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	1acb      	subs	r3, r1, r3
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f62:	4b36      	ldr	r3, [pc, #216]	; (800503c <UART_SetConfig+0x2d4>)
 8004f64:	fba3 2302 	umull	r2, r3, r3, r2
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f70:	441c      	add	r4, r3
 8004f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f84:	4642      	mov	r2, r8
 8004f86:	464b      	mov	r3, r9
 8004f88:	1891      	adds	r1, r2, r2
 8004f8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f94:	4641      	mov	r1, r8
 8004f96:	1851      	adds	r1, r2, r1
 8004f98:	6339      	str	r1, [r7, #48]	; 0x30
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	414b      	adcs	r3, r1
 8004f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fac:	4659      	mov	r1, fp
 8004fae:	00cb      	lsls	r3, r1, #3
 8004fb0:	4651      	mov	r1, sl
 8004fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb6:	4651      	mov	r1, sl
 8004fb8:	00ca      	lsls	r2, r1, #3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fc8:	464b      	mov	r3, r9
 8004fca:	460a      	mov	r2, r1
 8004fcc:	eb42 0303 	adc.w	r3, r2, r3
 8004fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fe8:	460b      	mov	r3, r1
 8004fea:	18db      	adds	r3, r3, r3
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fee:	4613      	mov	r3, r2
 8004ff0:	eb42 0303 	adc.w	r3, r2, r3
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ffe:	f7fb fe43 	bl	8000c88 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4b0d      	ldr	r3, [pc, #52]	; (800503c <UART_SetConfig+0x2d4>)
 8005008:	fba3 1302 	umull	r1, r3, r3, r2
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	2164      	movs	r1, #100	; 0x64
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	3332      	adds	r3, #50	; 0x32
 800501a:	4a08      	ldr	r2, [pc, #32]	; (800503c <UART_SetConfig+0x2d4>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f003 0207 	and.w	r2, r3, #7
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4422      	add	r2, r4
 800502e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005030:	e106      	b.n	8005240 <UART_SetConfig+0x4d8>
 8005032:	bf00      	nop
 8005034:	40011000 	.word	0x40011000
 8005038:	40011400 	.word	0x40011400
 800503c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005044:	2200      	movs	r2, #0
 8005046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800504a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800504e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005052:	4642      	mov	r2, r8
 8005054:	464b      	mov	r3, r9
 8005056:	1891      	adds	r1, r2, r2
 8005058:	6239      	str	r1, [r7, #32]
 800505a:	415b      	adcs	r3, r3
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005062:	4641      	mov	r1, r8
 8005064:	1854      	adds	r4, r2, r1
 8005066:	4649      	mov	r1, r9
 8005068:	eb43 0501 	adc.w	r5, r3, r1
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	00eb      	lsls	r3, r5, #3
 8005076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800507a:	00e2      	lsls	r2, r4, #3
 800507c:	4614      	mov	r4, r2
 800507e:	461d      	mov	r5, r3
 8005080:	4643      	mov	r3, r8
 8005082:	18e3      	adds	r3, r4, r3
 8005084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005088:	464b      	mov	r3, r9
 800508a:	eb45 0303 	adc.w	r3, r5, r3
 800508e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800509e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050ae:	4629      	mov	r1, r5
 80050b0:	008b      	lsls	r3, r1, #2
 80050b2:	4621      	mov	r1, r4
 80050b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b8:	4621      	mov	r1, r4
 80050ba:	008a      	lsls	r2, r1, #2
 80050bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050c0:	f7fb fde2 	bl	8000c88 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4b60      	ldr	r3, [pc, #384]	; (800524c <UART_SetConfig+0x4e4>)
 80050ca:	fba3 2302 	umull	r2, r3, r3, r2
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	011c      	lsls	r4, r3, #4
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050e4:	4642      	mov	r2, r8
 80050e6:	464b      	mov	r3, r9
 80050e8:	1891      	adds	r1, r2, r2
 80050ea:	61b9      	str	r1, [r7, #24]
 80050ec:	415b      	adcs	r3, r3
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050f4:	4641      	mov	r1, r8
 80050f6:	1851      	adds	r1, r2, r1
 80050f8:	6139      	str	r1, [r7, #16]
 80050fa:	4649      	mov	r1, r9
 80050fc:	414b      	adcs	r3, r1
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800510c:	4659      	mov	r1, fp
 800510e:	00cb      	lsls	r3, r1, #3
 8005110:	4651      	mov	r1, sl
 8005112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005116:	4651      	mov	r1, sl
 8005118:	00ca      	lsls	r2, r1, #3
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	4603      	mov	r3, r0
 8005120:	4642      	mov	r2, r8
 8005122:	189b      	adds	r3, r3, r2
 8005124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005128:	464b      	mov	r3, r9
 800512a:	460a      	mov	r2, r1
 800512c:	eb42 0303 	adc.w	r3, r2, r3
 8005130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	67bb      	str	r3, [r7, #120]	; 0x78
 800513e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800514c:	4649      	mov	r1, r9
 800514e:	008b      	lsls	r3, r1, #2
 8005150:	4641      	mov	r1, r8
 8005152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005156:	4641      	mov	r1, r8
 8005158:	008a      	lsls	r2, r1, #2
 800515a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800515e:	f7fb fd93 	bl	8000c88 <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4611      	mov	r1, r2
 8005168:	4b38      	ldr	r3, [pc, #224]	; (800524c <UART_SetConfig+0x4e4>)
 800516a:	fba3 2301 	umull	r2, r3, r3, r1
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2264      	movs	r2, #100	; 0x64
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	1acb      	subs	r3, r1, r3
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	3332      	adds	r3, #50	; 0x32
 800517c:	4a33      	ldr	r2, [pc, #204]	; (800524c <UART_SetConfig+0x4e4>)
 800517e:	fba2 2303 	umull	r2, r3, r2, r3
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005188:	441c      	add	r4, r3
 800518a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800518e:	2200      	movs	r2, #0
 8005190:	673b      	str	r3, [r7, #112]	; 0x70
 8005192:	677a      	str	r2, [r7, #116]	; 0x74
 8005194:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005198:	4642      	mov	r2, r8
 800519a:	464b      	mov	r3, r9
 800519c:	1891      	adds	r1, r2, r2
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	415b      	adcs	r3, r3
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051a8:	4641      	mov	r1, r8
 80051aa:	1851      	adds	r1, r2, r1
 80051ac:	6039      	str	r1, [r7, #0]
 80051ae:	4649      	mov	r1, r9
 80051b0:	414b      	adcs	r3, r1
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051c0:	4659      	mov	r1, fp
 80051c2:	00cb      	lsls	r3, r1, #3
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ca:	4651      	mov	r1, sl
 80051cc:	00ca      	lsls	r2, r1, #3
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	4642      	mov	r2, r8
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051da:	464b      	mov	r3, r9
 80051dc:	460a      	mov	r2, r1
 80051de:	eb42 0303 	adc.w	r3, r2, r3
 80051e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	663b      	str	r3, [r7, #96]	; 0x60
 80051ee:	667a      	str	r2, [r7, #100]	; 0x64
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051fc:	4649      	mov	r1, r9
 80051fe:	008b      	lsls	r3, r1, #2
 8005200:	4641      	mov	r1, r8
 8005202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005206:	4641      	mov	r1, r8
 8005208:	008a      	lsls	r2, r1, #2
 800520a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800520e:	f7fb fd3b 	bl	8000c88 <__aeabi_uldivmod>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <UART_SetConfig+0x4e4>)
 8005218:	fba3 1302 	umull	r1, r3, r3, r2
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	2164      	movs	r1, #100	; 0x64
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	3332      	adds	r3, #50	; 0x32
 800522a:	4a08      	ldr	r2, [pc, #32]	; (800524c <UART_SetConfig+0x4e4>)
 800522c:	fba2 2303 	umull	r2, r3, r2, r3
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	f003 020f 	and.w	r2, r3, #15
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4422      	add	r2, r4
 800523e:	609a      	str	r2, [r3, #8]
}
 8005240:	bf00      	nop
 8005242:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005246:	46bd      	mov	sp, r7
 8005248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524c:	51eb851f 	.word	0x51eb851f

08005250 <sniprintf>:
 8005250:	b40c      	push	{r2, r3}
 8005252:	b530      	push	{r4, r5, lr}
 8005254:	4b17      	ldr	r3, [pc, #92]	; (80052b4 <sniprintf+0x64>)
 8005256:	1e0c      	subs	r4, r1, #0
 8005258:	681d      	ldr	r5, [r3, #0]
 800525a:	b09d      	sub	sp, #116	; 0x74
 800525c:	da08      	bge.n	8005270 <sniprintf+0x20>
 800525e:	238b      	movs	r3, #139	; 0x8b
 8005260:	602b      	str	r3, [r5, #0]
 8005262:	f04f 30ff 	mov.w	r0, #4294967295
 8005266:	b01d      	add	sp, #116	; 0x74
 8005268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800526c:	b002      	add	sp, #8
 800526e:	4770      	bx	lr
 8005270:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005274:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005278:	bf14      	ite	ne
 800527a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800527e:	4623      	moveq	r3, r4
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	9307      	str	r3, [sp, #28]
 8005284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005288:	9002      	str	r0, [sp, #8]
 800528a:	9006      	str	r0, [sp, #24]
 800528c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005290:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005292:	ab21      	add	r3, sp, #132	; 0x84
 8005294:	a902      	add	r1, sp, #8
 8005296:	4628      	mov	r0, r5
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	f000 f9b3 	bl	8005604 <_svfiprintf_r>
 800529e:	1c43      	adds	r3, r0, #1
 80052a0:	bfbc      	itt	lt
 80052a2:	238b      	movlt	r3, #139	; 0x8b
 80052a4:	602b      	strlt	r3, [r5, #0]
 80052a6:	2c00      	cmp	r4, #0
 80052a8:	d0dd      	beq.n	8005266 <sniprintf+0x16>
 80052aa:	9b02      	ldr	r3, [sp, #8]
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e7d9      	b.n	8005266 <sniprintf+0x16>
 80052b2:	bf00      	nop
 80052b4:	20000058 	.word	0x20000058

080052b8 <siprintf>:
 80052b8:	b40e      	push	{r1, r2, r3}
 80052ba:	b500      	push	{lr}
 80052bc:	b09c      	sub	sp, #112	; 0x70
 80052be:	ab1d      	add	r3, sp, #116	; 0x74
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	9006      	str	r0, [sp, #24]
 80052c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052c8:	4809      	ldr	r0, [pc, #36]	; (80052f0 <siprintf+0x38>)
 80052ca:	9107      	str	r1, [sp, #28]
 80052cc:	9104      	str	r1, [sp, #16]
 80052ce:	4909      	ldr	r1, [pc, #36]	; (80052f4 <siprintf+0x3c>)
 80052d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d4:	9105      	str	r1, [sp, #20]
 80052d6:	6800      	ldr	r0, [r0, #0]
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	a902      	add	r1, sp, #8
 80052dc:	f000 f992 	bl	8005604 <_svfiprintf_r>
 80052e0:	9b02      	ldr	r3, [sp, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	b01c      	add	sp, #112	; 0x70
 80052e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052ec:	b003      	add	sp, #12
 80052ee:	4770      	bx	lr
 80052f0:	20000058 	.word	0x20000058
 80052f4:	ffff0208 	.word	0xffff0208

080052f8 <memset>:
 80052f8:	4402      	add	r2, r0
 80052fa:	4603      	mov	r3, r0
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d100      	bne.n	8005302 <memset+0xa>
 8005300:	4770      	bx	lr
 8005302:	f803 1b01 	strb.w	r1, [r3], #1
 8005306:	e7f9      	b.n	80052fc <memset+0x4>

08005308 <__errno>:
 8005308:	4b01      	ldr	r3, [pc, #4]	; (8005310 <__errno+0x8>)
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000058 	.word	0x20000058

08005314 <__libc_init_array>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	4d0d      	ldr	r5, [pc, #52]	; (800534c <__libc_init_array+0x38>)
 8005318:	4c0d      	ldr	r4, [pc, #52]	; (8005350 <__libc_init_array+0x3c>)
 800531a:	1b64      	subs	r4, r4, r5
 800531c:	10a4      	asrs	r4, r4, #2
 800531e:	2600      	movs	r6, #0
 8005320:	42a6      	cmp	r6, r4
 8005322:	d109      	bne.n	8005338 <__libc_init_array+0x24>
 8005324:	4d0b      	ldr	r5, [pc, #44]	; (8005354 <__libc_init_array+0x40>)
 8005326:	4c0c      	ldr	r4, [pc, #48]	; (8005358 <__libc_init_array+0x44>)
 8005328:	f001 fbc2 	bl	8006ab0 <_init>
 800532c:	1b64      	subs	r4, r4, r5
 800532e:	10a4      	asrs	r4, r4, #2
 8005330:	2600      	movs	r6, #0
 8005332:	42a6      	cmp	r6, r4
 8005334:	d105      	bne.n	8005342 <__libc_init_array+0x2e>
 8005336:	bd70      	pop	{r4, r5, r6, pc}
 8005338:	f855 3b04 	ldr.w	r3, [r5], #4
 800533c:	4798      	blx	r3
 800533e:	3601      	adds	r6, #1
 8005340:	e7ee      	b.n	8005320 <__libc_init_array+0xc>
 8005342:	f855 3b04 	ldr.w	r3, [r5], #4
 8005346:	4798      	blx	r3
 8005348:	3601      	adds	r6, #1
 800534a:	e7f2      	b.n	8005332 <__libc_init_array+0x1e>
 800534c:	08006ca8 	.word	0x08006ca8
 8005350:	08006ca8 	.word	0x08006ca8
 8005354:	08006ca8 	.word	0x08006ca8
 8005358:	08006cac 	.word	0x08006cac

0800535c <__retarget_lock_acquire_recursive>:
 800535c:	4770      	bx	lr

0800535e <__retarget_lock_release_recursive>:
 800535e:	4770      	bx	lr

08005360 <_free_r>:
 8005360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005362:	2900      	cmp	r1, #0
 8005364:	d044      	beq.n	80053f0 <_free_r+0x90>
 8005366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536a:	9001      	str	r0, [sp, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	f1a1 0404 	sub.w	r4, r1, #4
 8005372:	bfb8      	it	lt
 8005374:	18e4      	addlt	r4, r4, r3
 8005376:	f000 f8df 	bl	8005538 <__malloc_lock>
 800537a:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <_free_r+0x94>)
 800537c:	9801      	ldr	r0, [sp, #4]
 800537e:	6813      	ldr	r3, [r2, #0]
 8005380:	b933      	cbnz	r3, 8005390 <_free_r+0x30>
 8005382:	6063      	str	r3, [r4, #4]
 8005384:	6014      	str	r4, [r2, #0]
 8005386:	b003      	add	sp, #12
 8005388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800538c:	f000 b8da 	b.w	8005544 <__malloc_unlock>
 8005390:	42a3      	cmp	r3, r4
 8005392:	d908      	bls.n	80053a6 <_free_r+0x46>
 8005394:	6825      	ldr	r5, [r4, #0]
 8005396:	1961      	adds	r1, r4, r5
 8005398:	428b      	cmp	r3, r1
 800539a:	bf01      	itttt	eq
 800539c:	6819      	ldreq	r1, [r3, #0]
 800539e:	685b      	ldreq	r3, [r3, #4]
 80053a0:	1949      	addeq	r1, r1, r5
 80053a2:	6021      	streq	r1, [r4, #0]
 80053a4:	e7ed      	b.n	8005382 <_free_r+0x22>
 80053a6:	461a      	mov	r2, r3
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	b10b      	cbz	r3, 80053b0 <_free_r+0x50>
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	d9fa      	bls.n	80053a6 <_free_r+0x46>
 80053b0:	6811      	ldr	r1, [r2, #0]
 80053b2:	1855      	adds	r5, r2, r1
 80053b4:	42a5      	cmp	r5, r4
 80053b6:	d10b      	bne.n	80053d0 <_free_r+0x70>
 80053b8:	6824      	ldr	r4, [r4, #0]
 80053ba:	4421      	add	r1, r4
 80053bc:	1854      	adds	r4, r2, r1
 80053be:	42a3      	cmp	r3, r4
 80053c0:	6011      	str	r1, [r2, #0]
 80053c2:	d1e0      	bne.n	8005386 <_free_r+0x26>
 80053c4:	681c      	ldr	r4, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	6053      	str	r3, [r2, #4]
 80053ca:	440c      	add	r4, r1
 80053cc:	6014      	str	r4, [r2, #0]
 80053ce:	e7da      	b.n	8005386 <_free_r+0x26>
 80053d0:	d902      	bls.n	80053d8 <_free_r+0x78>
 80053d2:	230c      	movs	r3, #12
 80053d4:	6003      	str	r3, [r0, #0]
 80053d6:	e7d6      	b.n	8005386 <_free_r+0x26>
 80053d8:	6825      	ldr	r5, [r4, #0]
 80053da:	1961      	adds	r1, r4, r5
 80053dc:	428b      	cmp	r3, r1
 80053de:	bf04      	itt	eq
 80053e0:	6819      	ldreq	r1, [r3, #0]
 80053e2:	685b      	ldreq	r3, [r3, #4]
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	bf04      	itt	eq
 80053e8:	1949      	addeq	r1, r1, r5
 80053ea:	6021      	streq	r1, [r4, #0]
 80053ec:	6054      	str	r4, [r2, #4]
 80053ee:	e7ca      	b.n	8005386 <_free_r+0x26>
 80053f0:	b003      	add	sp, #12
 80053f2:	bd30      	pop	{r4, r5, pc}
 80053f4:	200003f0 	.word	0x200003f0

080053f8 <sbrk_aligned>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	4e0e      	ldr	r6, [pc, #56]	; (8005434 <sbrk_aligned+0x3c>)
 80053fc:	460c      	mov	r4, r1
 80053fe:	6831      	ldr	r1, [r6, #0]
 8005400:	4605      	mov	r5, r0
 8005402:	b911      	cbnz	r1, 800540a <sbrk_aligned+0x12>
 8005404:	f000 fba6 	bl	8005b54 <_sbrk_r>
 8005408:	6030      	str	r0, [r6, #0]
 800540a:	4621      	mov	r1, r4
 800540c:	4628      	mov	r0, r5
 800540e:	f000 fba1 	bl	8005b54 <_sbrk_r>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d00a      	beq.n	800542c <sbrk_aligned+0x34>
 8005416:	1cc4      	adds	r4, r0, #3
 8005418:	f024 0403 	bic.w	r4, r4, #3
 800541c:	42a0      	cmp	r0, r4
 800541e:	d007      	beq.n	8005430 <sbrk_aligned+0x38>
 8005420:	1a21      	subs	r1, r4, r0
 8005422:	4628      	mov	r0, r5
 8005424:	f000 fb96 	bl	8005b54 <_sbrk_r>
 8005428:	3001      	adds	r0, #1
 800542a:	d101      	bne.n	8005430 <sbrk_aligned+0x38>
 800542c:	f04f 34ff 	mov.w	r4, #4294967295
 8005430:	4620      	mov	r0, r4
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	200003f4 	.word	0x200003f4

08005438 <_malloc_r>:
 8005438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800543c:	1ccd      	adds	r5, r1, #3
 800543e:	f025 0503 	bic.w	r5, r5, #3
 8005442:	3508      	adds	r5, #8
 8005444:	2d0c      	cmp	r5, #12
 8005446:	bf38      	it	cc
 8005448:	250c      	movcc	r5, #12
 800544a:	2d00      	cmp	r5, #0
 800544c:	4607      	mov	r7, r0
 800544e:	db01      	blt.n	8005454 <_malloc_r+0x1c>
 8005450:	42a9      	cmp	r1, r5
 8005452:	d905      	bls.n	8005460 <_malloc_r+0x28>
 8005454:	230c      	movs	r3, #12
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	2600      	movs	r6, #0
 800545a:	4630      	mov	r0, r6
 800545c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005460:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005534 <_malloc_r+0xfc>
 8005464:	f000 f868 	bl	8005538 <__malloc_lock>
 8005468:	f8d8 3000 	ldr.w	r3, [r8]
 800546c:	461c      	mov	r4, r3
 800546e:	bb5c      	cbnz	r4, 80054c8 <_malloc_r+0x90>
 8005470:	4629      	mov	r1, r5
 8005472:	4638      	mov	r0, r7
 8005474:	f7ff ffc0 	bl	80053f8 <sbrk_aligned>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	4604      	mov	r4, r0
 800547c:	d155      	bne.n	800552a <_malloc_r+0xf2>
 800547e:	f8d8 4000 	ldr.w	r4, [r8]
 8005482:	4626      	mov	r6, r4
 8005484:	2e00      	cmp	r6, #0
 8005486:	d145      	bne.n	8005514 <_malloc_r+0xdc>
 8005488:	2c00      	cmp	r4, #0
 800548a:	d048      	beq.n	800551e <_malloc_r+0xe6>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	4631      	mov	r1, r6
 8005490:	4638      	mov	r0, r7
 8005492:	eb04 0903 	add.w	r9, r4, r3
 8005496:	f000 fb5d 	bl	8005b54 <_sbrk_r>
 800549a:	4581      	cmp	r9, r0
 800549c:	d13f      	bne.n	800551e <_malloc_r+0xe6>
 800549e:	6821      	ldr	r1, [r4, #0]
 80054a0:	1a6d      	subs	r5, r5, r1
 80054a2:	4629      	mov	r1, r5
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff ffa7 	bl	80053f8 <sbrk_aligned>
 80054aa:	3001      	adds	r0, #1
 80054ac:	d037      	beq.n	800551e <_malloc_r+0xe6>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	442b      	add	r3, r5
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	f8d8 3000 	ldr.w	r3, [r8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d038      	beq.n	800552e <_malloc_r+0xf6>
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	42a2      	cmp	r2, r4
 80054c0:	d12b      	bne.n	800551a <_malloc_r+0xe2>
 80054c2:	2200      	movs	r2, #0
 80054c4:	605a      	str	r2, [r3, #4]
 80054c6:	e00f      	b.n	80054e8 <_malloc_r+0xb0>
 80054c8:	6822      	ldr	r2, [r4, #0]
 80054ca:	1b52      	subs	r2, r2, r5
 80054cc:	d41f      	bmi.n	800550e <_malloc_r+0xd6>
 80054ce:	2a0b      	cmp	r2, #11
 80054d0:	d917      	bls.n	8005502 <_malloc_r+0xca>
 80054d2:	1961      	adds	r1, r4, r5
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	6025      	str	r5, [r4, #0]
 80054d8:	bf18      	it	ne
 80054da:	6059      	strne	r1, [r3, #4]
 80054dc:	6863      	ldr	r3, [r4, #4]
 80054de:	bf08      	it	eq
 80054e0:	f8c8 1000 	streq.w	r1, [r8]
 80054e4:	5162      	str	r2, [r4, r5]
 80054e6:	604b      	str	r3, [r1, #4]
 80054e8:	4638      	mov	r0, r7
 80054ea:	f104 060b 	add.w	r6, r4, #11
 80054ee:	f000 f829 	bl	8005544 <__malloc_unlock>
 80054f2:	f026 0607 	bic.w	r6, r6, #7
 80054f6:	1d23      	adds	r3, r4, #4
 80054f8:	1af2      	subs	r2, r6, r3
 80054fa:	d0ae      	beq.n	800545a <_malloc_r+0x22>
 80054fc:	1b9b      	subs	r3, r3, r6
 80054fe:	50a3      	str	r3, [r4, r2]
 8005500:	e7ab      	b.n	800545a <_malloc_r+0x22>
 8005502:	42a3      	cmp	r3, r4
 8005504:	6862      	ldr	r2, [r4, #4]
 8005506:	d1dd      	bne.n	80054c4 <_malloc_r+0x8c>
 8005508:	f8c8 2000 	str.w	r2, [r8]
 800550c:	e7ec      	b.n	80054e8 <_malloc_r+0xb0>
 800550e:	4623      	mov	r3, r4
 8005510:	6864      	ldr	r4, [r4, #4]
 8005512:	e7ac      	b.n	800546e <_malloc_r+0x36>
 8005514:	4634      	mov	r4, r6
 8005516:	6876      	ldr	r6, [r6, #4]
 8005518:	e7b4      	b.n	8005484 <_malloc_r+0x4c>
 800551a:	4613      	mov	r3, r2
 800551c:	e7cc      	b.n	80054b8 <_malloc_r+0x80>
 800551e:	230c      	movs	r3, #12
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	4638      	mov	r0, r7
 8005524:	f000 f80e 	bl	8005544 <__malloc_unlock>
 8005528:	e797      	b.n	800545a <_malloc_r+0x22>
 800552a:	6025      	str	r5, [r4, #0]
 800552c:	e7dc      	b.n	80054e8 <_malloc_r+0xb0>
 800552e:	605b      	str	r3, [r3, #4]
 8005530:	deff      	udf	#255	; 0xff
 8005532:	bf00      	nop
 8005534:	200003f0 	.word	0x200003f0

08005538 <__malloc_lock>:
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <__malloc_lock+0x8>)
 800553a:	f7ff bf0f 	b.w	800535c <__retarget_lock_acquire_recursive>
 800553e:	bf00      	nop
 8005540:	200003ec 	.word	0x200003ec

08005544 <__malloc_unlock>:
 8005544:	4801      	ldr	r0, [pc, #4]	; (800554c <__malloc_unlock+0x8>)
 8005546:	f7ff bf0a 	b.w	800535e <__retarget_lock_release_recursive>
 800554a:	bf00      	nop
 800554c:	200003ec 	.word	0x200003ec

08005550 <__ssputs_r>:
 8005550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	688e      	ldr	r6, [r1, #8]
 8005556:	461f      	mov	r7, r3
 8005558:	42be      	cmp	r6, r7
 800555a:	680b      	ldr	r3, [r1, #0]
 800555c:	4682      	mov	sl, r0
 800555e:	460c      	mov	r4, r1
 8005560:	4690      	mov	r8, r2
 8005562:	d82c      	bhi.n	80055be <__ssputs_r+0x6e>
 8005564:	898a      	ldrh	r2, [r1, #12]
 8005566:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800556a:	d026      	beq.n	80055ba <__ssputs_r+0x6a>
 800556c:	6965      	ldr	r5, [r4, #20]
 800556e:	6909      	ldr	r1, [r1, #16]
 8005570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005574:	eba3 0901 	sub.w	r9, r3, r1
 8005578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800557c:	1c7b      	adds	r3, r7, #1
 800557e:	444b      	add	r3, r9
 8005580:	106d      	asrs	r5, r5, #1
 8005582:	429d      	cmp	r5, r3
 8005584:	bf38      	it	cc
 8005586:	461d      	movcc	r5, r3
 8005588:	0553      	lsls	r3, r2, #21
 800558a:	d527      	bpl.n	80055dc <__ssputs_r+0x8c>
 800558c:	4629      	mov	r1, r5
 800558e:	f7ff ff53 	bl	8005438 <_malloc_r>
 8005592:	4606      	mov	r6, r0
 8005594:	b360      	cbz	r0, 80055f0 <__ssputs_r+0xa0>
 8005596:	6921      	ldr	r1, [r4, #16]
 8005598:	464a      	mov	r2, r9
 800559a:	f000 faeb 	bl	8005b74 <memcpy>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a8:	81a3      	strh	r3, [r4, #12]
 80055aa:	6126      	str	r6, [r4, #16]
 80055ac:	6165      	str	r5, [r4, #20]
 80055ae:	444e      	add	r6, r9
 80055b0:	eba5 0509 	sub.w	r5, r5, r9
 80055b4:	6026      	str	r6, [r4, #0]
 80055b6:	60a5      	str	r5, [r4, #8]
 80055b8:	463e      	mov	r6, r7
 80055ba:	42be      	cmp	r6, r7
 80055bc:	d900      	bls.n	80055c0 <__ssputs_r+0x70>
 80055be:	463e      	mov	r6, r7
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	4632      	mov	r2, r6
 80055c4:	4641      	mov	r1, r8
 80055c6:	f000 faab 	bl	8005b20 <memmove>
 80055ca:	68a3      	ldr	r3, [r4, #8]
 80055cc:	1b9b      	subs	r3, r3, r6
 80055ce:	60a3      	str	r3, [r4, #8]
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	4433      	add	r3, r6
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	2000      	movs	r0, #0
 80055d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055dc:	462a      	mov	r2, r5
 80055de:	f000 fad7 	bl	8005b90 <_realloc_r>
 80055e2:	4606      	mov	r6, r0
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d1e0      	bne.n	80055aa <__ssputs_r+0x5a>
 80055e8:	6921      	ldr	r1, [r4, #16]
 80055ea:	4650      	mov	r0, sl
 80055ec:	f7ff feb8 	bl	8005360 <_free_r>
 80055f0:	230c      	movs	r3, #12
 80055f2:	f8ca 3000 	str.w	r3, [sl]
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055fc:	81a3      	strh	r3, [r4, #12]
 80055fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005602:	e7e9      	b.n	80055d8 <__ssputs_r+0x88>

08005604 <_svfiprintf_r>:
 8005604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005608:	4698      	mov	r8, r3
 800560a:	898b      	ldrh	r3, [r1, #12]
 800560c:	061b      	lsls	r3, r3, #24
 800560e:	b09d      	sub	sp, #116	; 0x74
 8005610:	4607      	mov	r7, r0
 8005612:	460d      	mov	r5, r1
 8005614:	4614      	mov	r4, r2
 8005616:	d50e      	bpl.n	8005636 <_svfiprintf_r+0x32>
 8005618:	690b      	ldr	r3, [r1, #16]
 800561a:	b963      	cbnz	r3, 8005636 <_svfiprintf_r+0x32>
 800561c:	2140      	movs	r1, #64	; 0x40
 800561e:	f7ff ff0b 	bl	8005438 <_malloc_r>
 8005622:	6028      	str	r0, [r5, #0]
 8005624:	6128      	str	r0, [r5, #16]
 8005626:	b920      	cbnz	r0, 8005632 <_svfiprintf_r+0x2e>
 8005628:	230c      	movs	r3, #12
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	e0d0      	b.n	80057d4 <_svfiprintf_r+0x1d0>
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	616b      	str	r3, [r5, #20]
 8005636:	2300      	movs	r3, #0
 8005638:	9309      	str	r3, [sp, #36]	; 0x24
 800563a:	2320      	movs	r3, #32
 800563c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005640:	f8cd 800c 	str.w	r8, [sp, #12]
 8005644:	2330      	movs	r3, #48	; 0x30
 8005646:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057ec <_svfiprintf_r+0x1e8>
 800564a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800564e:	f04f 0901 	mov.w	r9, #1
 8005652:	4623      	mov	r3, r4
 8005654:	469a      	mov	sl, r3
 8005656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800565a:	b10a      	cbz	r2, 8005660 <_svfiprintf_r+0x5c>
 800565c:	2a25      	cmp	r2, #37	; 0x25
 800565e:	d1f9      	bne.n	8005654 <_svfiprintf_r+0x50>
 8005660:	ebba 0b04 	subs.w	fp, sl, r4
 8005664:	d00b      	beq.n	800567e <_svfiprintf_r+0x7a>
 8005666:	465b      	mov	r3, fp
 8005668:	4622      	mov	r2, r4
 800566a:	4629      	mov	r1, r5
 800566c:	4638      	mov	r0, r7
 800566e:	f7ff ff6f 	bl	8005550 <__ssputs_r>
 8005672:	3001      	adds	r0, #1
 8005674:	f000 80a9 	beq.w	80057ca <_svfiprintf_r+0x1c6>
 8005678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800567a:	445a      	add	r2, fp
 800567c:	9209      	str	r2, [sp, #36]	; 0x24
 800567e:	f89a 3000 	ldrb.w	r3, [sl]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80a1 	beq.w	80057ca <_svfiprintf_r+0x1c6>
 8005688:	2300      	movs	r3, #0
 800568a:	f04f 32ff 	mov.w	r2, #4294967295
 800568e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005692:	f10a 0a01 	add.w	sl, sl, #1
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	9307      	str	r3, [sp, #28]
 800569a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800569e:	931a      	str	r3, [sp, #104]	; 0x68
 80056a0:	4654      	mov	r4, sl
 80056a2:	2205      	movs	r2, #5
 80056a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a8:	4850      	ldr	r0, [pc, #320]	; (80057ec <_svfiprintf_r+0x1e8>)
 80056aa:	f7fa fdb9 	bl	8000220 <memchr>
 80056ae:	9a04      	ldr	r2, [sp, #16]
 80056b0:	b9d8      	cbnz	r0, 80056ea <_svfiprintf_r+0xe6>
 80056b2:	06d0      	lsls	r0, r2, #27
 80056b4:	bf44      	itt	mi
 80056b6:	2320      	movmi	r3, #32
 80056b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056bc:	0711      	lsls	r1, r2, #28
 80056be:	bf44      	itt	mi
 80056c0:	232b      	movmi	r3, #43	; 0x2b
 80056c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c6:	f89a 3000 	ldrb.w	r3, [sl]
 80056ca:	2b2a      	cmp	r3, #42	; 0x2a
 80056cc:	d015      	beq.n	80056fa <_svfiprintf_r+0xf6>
 80056ce:	9a07      	ldr	r2, [sp, #28]
 80056d0:	4654      	mov	r4, sl
 80056d2:	2000      	movs	r0, #0
 80056d4:	f04f 0c0a 	mov.w	ip, #10
 80056d8:	4621      	mov	r1, r4
 80056da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056de:	3b30      	subs	r3, #48	; 0x30
 80056e0:	2b09      	cmp	r3, #9
 80056e2:	d94d      	bls.n	8005780 <_svfiprintf_r+0x17c>
 80056e4:	b1b0      	cbz	r0, 8005714 <_svfiprintf_r+0x110>
 80056e6:	9207      	str	r2, [sp, #28]
 80056e8:	e014      	b.n	8005714 <_svfiprintf_r+0x110>
 80056ea:	eba0 0308 	sub.w	r3, r0, r8
 80056ee:	fa09 f303 	lsl.w	r3, r9, r3
 80056f2:	4313      	orrs	r3, r2
 80056f4:	9304      	str	r3, [sp, #16]
 80056f6:	46a2      	mov	sl, r4
 80056f8:	e7d2      	b.n	80056a0 <_svfiprintf_r+0x9c>
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	1d19      	adds	r1, r3, #4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	9103      	str	r1, [sp, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	bfbb      	ittet	lt
 8005706:	425b      	neglt	r3, r3
 8005708:	f042 0202 	orrlt.w	r2, r2, #2
 800570c:	9307      	strge	r3, [sp, #28]
 800570e:	9307      	strlt	r3, [sp, #28]
 8005710:	bfb8      	it	lt
 8005712:	9204      	strlt	r2, [sp, #16]
 8005714:	7823      	ldrb	r3, [r4, #0]
 8005716:	2b2e      	cmp	r3, #46	; 0x2e
 8005718:	d10c      	bne.n	8005734 <_svfiprintf_r+0x130>
 800571a:	7863      	ldrb	r3, [r4, #1]
 800571c:	2b2a      	cmp	r3, #42	; 0x2a
 800571e:	d134      	bne.n	800578a <_svfiprintf_r+0x186>
 8005720:	9b03      	ldr	r3, [sp, #12]
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	9203      	str	r2, [sp, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfb8      	it	lt
 800572c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005730:	3402      	adds	r4, #2
 8005732:	9305      	str	r3, [sp, #20]
 8005734:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057fc <_svfiprintf_r+0x1f8>
 8005738:	7821      	ldrb	r1, [r4, #0]
 800573a:	2203      	movs	r2, #3
 800573c:	4650      	mov	r0, sl
 800573e:	f7fa fd6f 	bl	8000220 <memchr>
 8005742:	b138      	cbz	r0, 8005754 <_svfiprintf_r+0x150>
 8005744:	9b04      	ldr	r3, [sp, #16]
 8005746:	eba0 000a 	sub.w	r0, r0, sl
 800574a:	2240      	movs	r2, #64	; 0x40
 800574c:	4082      	lsls	r2, r0
 800574e:	4313      	orrs	r3, r2
 8005750:	3401      	adds	r4, #1
 8005752:	9304      	str	r3, [sp, #16]
 8005754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005758:	4825      	ldr	r0, [pc, #148]	; (80057f0 <_svfiprintf_r+0x1ec>)
 800575a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800575e:	2206      	movs	r2, #6
 8005760:	f7fa fd5e 	bl	8000220 <memchr>
 8005764:	2800      	cmp	r0, #0
 8005766:	d038      	beq.n	80057da <_svfiprintf_r+0x1d6>
 8005768:	4b22      	ldr	r3, [pc, #136]	; (80057f4 <_svfiprintf_r+0x1f0>)
 800576a:	bb1b      	cbnz	r3, 80057b4 <_svfiprintf_r+0x1b0>
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	3307      	adds	r3, #7
 8005770:	f023 0307 	bic.w	r3, r3, #7
 8005774:	3308      	adds	r3, #8
 8005776:	9303      	str	r3, [sp, #12]
 8005778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577a:	4433      	add	r3, r6
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
 800577e:	e768      	b.n	8005652 <_svfiprintf_r+0x4e>
 8005780:	fb0c 3202 	mla	r2, ip, r2, r3
 8005784:	460c      	mov	r4, r1
 8005786:	2001      	movs	r0, #1
 8005788:	e7a6      	b.n	80056d8 <_svfiprintf_r+0xd4>
 800578a:	2300      	movs	r3, #0
 800578c:	3401      	adds	r4, #1
 800578e:	9305      	str	r3, [sp, #20]
 8005790:	4619      	mov	r1, r3
 8005792:	f04f 0c0a 	mov.w	ip, #10
 8005796:	4620      	mov	r0, r4
 8005798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800579c:	3a30      	subs	r2, #48	; 0x30
 800579e:	2a09      	cmp	r2, #9
 80057a0:	d903      	bls.n	80057aa <_svfiprintf_r+0x1a6>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0c6      	beq.n	8005734 <_svfiprintf_r+0x130>
 80057a6:	9105      	str	r1, [sp, #20]
 80057a8:	e7c4      	b.n	8005734 <_svfiprintf_r+0x130>
 80057aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ae:	4604      	mov	r4, r0
 80057b0:	2301      	movs	r3, #1
 80057b2:	e7f0      	b.n	8005796 <_svfiprintf_r+0x192>
 80057b4:	ab03      	add	r3, sp, #12
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	462a      	mov	r2, r5
 80057ba:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <_svfiprintf_r+0x1f4>)
 80057bc:	a904      	add	r1, sp, #16
 80057be:	4638      	mov	r0, r7
 80057c0:	f3af 8000 	nop.w
 80057c4:	1c42      	adds	r2, r0, #1
 80057c6:	4606      	mov	r6, r0
 80057c8:	d1d6      	bne.n	8005778 <_svfiprintf_r+0x174>
 80057ca:	89ab      	ldrh	r3, [r5, #12]
 80057cc:	065b      	lsls	r3, r3, #25
 80057ce:	f53f af2d 	bmi.w	800562c <_svfiprintf_r+0x28>
 80057d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d4:	b01d      	add	sp, #116	; 0x74
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	ab03      	add	r3, sp, #12
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	462a      	mov	r2, r5
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <_svfiprintf_r+0x1f4>)
 80057e2:	a904      	add	r1, sp, #16
 80057e4:	4638      	mov	r0, r7
 80057e6:	f000 f879 	bl	80058dc <_printf_i>
 80057ea:	e7eb      	b.n	80057c4 <_svfiprintf_r+0x1c0>
 80057ec:	08006c38 	.word	0x08006c38
 80057f0:	08006c42 	.word	0x08006c42
 80057f4:	00000000 	.word	0x00000000
 80057f8:	08005551 	.word	0x08005551
 80057fc:	08006c3e 	.word	0x08006c3e

08005800 <_printf_common>:
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	4616      	mov	r6, r2
 8005806:	4699      	mov	r9, r3
 8005808:	688a      	ldr	r2, [r1, #8]
 800580a:	690b      	ldr	r3, [r1, #16]
 800580c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005810:	4293      	cmp	r3, r2
 8005812:	bfb8      	it	lt
 8005814:	4613      	movlt	r3, r2
 8005816:	6033      	str	r3, [r6, #0]
 8005818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800581c:	4607      	mov	r7, r0
 800581e:	460c      	mov	r4, r1
 8005820:	b10a      	cbz	r2, 8005826 <_printf_common+0x26>
 8005822:	3301      	adds	r3, #1
 8005824:	6033      	str	r3, [r6, #0]
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	0699      	lsls	r1, r3, #26
 800582a:	bf42      	ittt	mi
 800582c:	6833      	ldrmi	r3, [r6, #0]
 800582e:	3302      	addmi	r3, #2
 8005830:	6033      	strmi	r3, [r6, #0]
 8005832:	6825      	ldr	r5, [r4, #0]
 8005834:	f015 0506 	ands.w	r5, r5, #6
 8005838:	d106      	bne.n	8005848 <_printf_common+0x48>
 800583a:	f104 0a19 	add.w	sl, r4, #25
 800583e:	68e3      	ldr	r3, [r4, #12]
 8005840:	6832      	ldr	r2, [r6, #0]
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	42ab      	cmp	r3, r5
 8005846:	dc26      	bgt.n	8005896 <_printf_common+0x96>
 8005848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800584c:	1e13      	subs	r3, r2, #0
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	bf18      	it	ne
 8005852:	2301      	movne	r3, #1
 8005854:	0692      	lsls	r2, r2, #26
 8005856:	d42b      	bmi.n	80058b0 <_printf_common+0xb0>
 8005858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800585c:	4649      	mov	r1, r9
 800585e:	4638      	mov	r0, r7
 8005860:	47c0      	blx	r8
 8005862:	3001      	adds	r0, #1
 8005864:	d01e      	beq.n	80058a4 <_printf_common+0xa4>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	6922      	ldr	r2, [r4, #16]
 800586a:	f003 0306 	and.w	r3, r3, #6
 800586e:	2b04      	cmp	r3, #4
 8005870:	bf02      	ittt	eq
 8005872:	68e5      	ldreq	r5, [r4, #12]
 8005874:	6833      	ldreq	r3, [r6, #0]
 8005876:	1aed      	subeq	r5, r5, r3
 8005878:	68a3      	ldr	r3, [r4, #8]
 800587a:	bf0c      	ite	eq
 800587c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005880:	2500      	movne	r5, #0
 8005882:	4293      	cmp	r3, r2
 8005884:	bfc4      	itt	gt
 8005886:	1a9b      	subgt	r3, r3, r2
 8005888:	18ed      	addgt	r5, r5, r3
 800588a:	2600      	movs	r6, #0
 800588c:	341a      	adds	r4, #26
 800588e:	42b5      	cmp	r5, r6
 8005890:	d11a      	bne.n	80058c8 <_printf_common+0xc8>
 8005892:	2000      	movs	r0, #0
 8005894:	e008      	b.n	80058a8 <_printf_common+0xa8>
 8005896:	2301      	movs	r3, #1
 8005898:	4652      	mov	r2, sl
 800589a:	4649      	mov	r1, r9
 800589c:	4638      	mov	r0, r7
 800589e:	47c0      	blx	r8
 80058a0:	3001      	adds	r0, #1
 80058a2:	d103      	bne.n	80058ac <_printf_common+0xac>
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ac:	3501      	adds	r5, #1
 80058ae:	e7c6      	b.n	800583e <_printf_common+0x3e>
 80058b0:	18e1      	adds	r1, r4, r3
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	2030      	movs	r0, #48	; 0x30
 80058b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ba:	4422      	add	r2, r4
 80058bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058c4:	3302      	adds	r3, #2
 80058c6:	e7c7      	b.n	8005858 <_printf_common+0x58>
 80058c8:	2301      	movs	r3, #1
 80058ca:	4622      	mov	r2, r4
 80058cc:	4649      	mov	r1, r9
 80058ce:	4638      	mov	r0, r7
 80058d0:	47c0      	blx	r8
 80058d2:	3001      	adds	r0, #1
 80058d4:	d0e6      	beq.n	80058a4 <_printf_common+0xa4>
 80058d6:	3601      	adds	r6, #1
 80058d8:	e7d9      	b.n	800588e <_printf_common+0x8e>
	...

080058dc <_printf_i>:
 80058dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	7e0f      	ldrb	r7, [r1, #24]
 80058e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058e4:	2f78      	cmp	r7, #120	; 0x78
 80058e6:	4691      	mov	r9, r2
 80058e8:	4680      	mov	r8, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	469a      	mov	sl, r3
 80058ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058f2:	d807      	bhi.n	8005904 <_printf_i+0x28>
 80058f4:	2f62      	cmp	r7, #98	; 0x62
 80058f6:	d80a      	bhi.n	800590e <_printf_i+0x32>
 80058f8:	2f00      	cmp	r7, #0
 80058fa:	f000 80d4 	beq.w	8005aa6 <_printf_i+0x1ca>
 80058fe:	2f58      	cmp	r7, #88	; 0x58
 8005900:	f000 80c0 	beq.w	8005a84 <_printf_i+0x1a8>
 8005904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800590c:	e03a      	b.n	8005984 <_printf_i+0xa8>
 800590e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005912:	2b15      	cmp	r3, #21
 8005914:	d8f6      	bhi.n	8005904 <_printf_i+0x28>
 8005916:	a101      	add	r1, pc, #4	; (adr r1, 800591c <_printf_i+0x40>)
 8005918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800591c:	08005975 	.word	0x08005975
 8005920:	08005989 	.word	0x08005989
 8005924:	08005905 	.word	0x08005905
 8005928:	08005905 	.word	0x08005905
 800592c:	08005905 	.word	0x08005905
 8005930:	08005905 	.word	0x08005905
 8005934:	08005989 	.word	0x08005989
 8005938:	08005905 	.word	0x08005905
 800593c:	08005905 	.word	0x08005905
 8005940:	08005905 	.word	0x08005905
 8005944:	08005905 	.word	0x08005905
 8005948:	08005a8d 	.word	0x08005a8d
 800594c:	080059b5 	.word	0x080059b5
 8005950:	08005a47 	.word	0x08005a47
 8005954:	08005905 	.word	0x08005905
 8005958:	08005905 	.word	0x08005905
 800595c:	08005aaf 	.word	0x08005aaf
 8005960:	08005905 	.word	0x08005905
 8005964:	080059b5 	.word	0x080059b5
 8005968:	08005905 	.word	0x08005905
 800596c:	08005905 	.word	0x08005905
 8005970:	08005a4f 	.word	0x08005a4f
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	1d1a      	adds	r2, r3, #4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	602a      	str	r2, [r5, #0]
 800597c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005984:	2301      	movs	r3, #1
 8005986:	e09f      	b.n	8005ac8 <_printf_i+0x1ec>
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	0607      	lsls	r7, r0, #24
 800598e:	f103 0104 	add.w	r1, r3, #4
 8005992:	6029      	str	r1, [r5, #0]
 8005994:	d501      	bpl.n	800599a <_printf_i+0xbe>
 8005996:	681e      	ldr	r6, [r3, #0]
 8005998:	e003      	b.n	80059a2 <_printf_i+0xc6>
 800599a:	0646      	lsls	r6, r0, #25
 800599c:	d5fb      	bpl.n	8005996 <_printf_i+0xba>
 800599e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	da03      	bge.n	80059ae <_printf_i+0xd2>
 80059a6:	232d      	movs	r3, #45	; 0x2d
 80059a8:	4276      	negs	r6, r6
 80059aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ae:	485a      	ldr	r0, [pc, #360]	; (8005b18 <_printf_i+0x23c>)
 80059b0:	230a      	movs	r3, #10
 80059b2:	e012      	b.n	80059da <_printf_i+0xfe>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	6820      	ldr	r0, [r4, #0]
 80059b8:	1d19      	adds	r1, r3, #4
 80059ba:	6029      	str	r1, [r5, #0]
 80059bc:	0605      	lsls	r5, r0, #24
 80059be:	d501      	bpl.n	80059c4 <_printf_i+0xe8>
 80059c0:	681e      	ldr	r6, [r3, #0]
 80059c2:	e002      	b.n	80059ca <_printf_i+0xee>
 80059c4:	0641      	lsls	r1, r0, #25
 80059c6:	d5fb      	bpl.n	80059c0 <_printf_i+0xe4>
 80059c8:	881e      	ldrh	r6, [r3, #0]
 80059ca:	4853      	ldr	r0, [pc, #332]	; (8005b18 <_printf_i+0x23c>)
 80059cc:	2f6f      	cmp	r7, #111	; 0x6f
 80059ce:	bf0c      	ite	eq
 80059d0:	2308      	moveq	r3, #8
 80059d2:	230a      	movne	r3, #10
 80059d4:	2100      	movs	r1, #0
 80059d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059da:	6865      	ldr	r5, [r4, #4]
 80059dc:	60a5      	str	r5, [r4, #8]
 80059de:	2d00      	cmp	r5, #0
 80059e0:	bfa2      	ittt	ge
 80059e2:	6821      	ldrge	r1, [r4, #0]
 80059e4:	f021 0104 	bicge.w	r1, r1, #4
 80059e8:	6021      	strge	r1, [r4, #0]
 80059ea:	b90e      	cbnz	r6, 80059f0 <_printf_i+0x114>
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	d04b      	beq.n	8005a88 <_printf_i+0x1ac>
 80059f0:	4615      	mov	r5, r2
 80059f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059f6:	fb03 6711 	mls	r7, r3, r1, r6
 80059fa:	5dc7      	ldrb	r7, [r0, r7]
 80059fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a00:	4637      	mov	r7, r6
 8005a02:	42bb      	cmp	r3, r7
 8005a04:	460e      	mov	r6, r1
 8005a06:	d9f4      	bls.n	80059f2 <_printf_i+0x116>
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d10b      	bne.n	8005a24 <_printf_i+0x148>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	07de      	lsls	r6, r3, #31
 8005a10:	d508      	bpl.n	8005a24 <_printf_i+0x148>
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	6861      	ldr	r1, [r4, #4]
 8005a16:	4299      	cmp	r1, r3
 8005a18:	bfde      	ittt	le
 8005a1a:	2330      	movle	r3, #48	; 0x30
 8005a1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a24:	1b52      	subs	r2, r2, r5
 8005a26:	6122      	str	r2, [r4, #16]
 8005a28:	f8cd a000 	str.w	sl, [sp]
 8005a2c:	464b      	mov	r3, r9
 8005a2e:	aa03      	add	r2, sp, #12
 8005a30:	4621      	mov	r1, r4
 8005a32:	4640      	mov	r0, r8
 8005a34:	f7ff fee4 	bl	8005800 <_printf_common>
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d14a      	bne.n	8005ad2 <_printf_i+0x1f6>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	b004      	add	sp, #16
 8005a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	f043 0320 	orr.w	r3, r3, #32
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	4833      	ldr	r0, [pc, #204]	; (8005b1c <_printf_i+0x240>)
 8005a50:	2778      	movs	r7, #120	; 0x78
 8005a52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	6829      	ldr	r1, [r5, #0]
 8005a5a:	061f      	lsls	r7, r3, #24
 8005a5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a60:	d402      	bmi.n	8005a68 <_printf_i+0x18c>
 8005a62:	065f      	lsls	r7, r3, #25
 8005a64:	bf48      	it	mi
 8005a66:	b2b6      	uxthmi	r6, r6
 8005a68:	07df      	lsls	r7, r3, #31
 8005a6a:	bf48      	it	mi
 8005a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a70:	6029      	str	r1, [r5, #0]
 8005a72:	bf48      	it	mi
 8005a74:	6023      	strmi	r3, [r4, #0]
 8005a76:	b91e      	cbnz	r6, 8005a80 <_printf_i+0x1a4>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	f023 0320 	bic.w	r3, r3, #32
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	2310      	movs	r3, #16
 8005a82:	e7a7      	b.n	80059d4 <_printf_i+0xf8>
 8005a84:	4824      	ldr	r0, [pc, #144]	; (8005b18 <_printf_i+0x23c>)
 8005a86:	e7e4      	b.n	8005a52 <_printf_i+0x176>
 8005a88:	4615      	mov	r5, r2
 8005a8a:	e7bd      	b.n	8005a08 <_printf_i+0x12c>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	6826      	ldr	r6, [r4, #0]
 8005a90:	6961      	ldr	r1, [r4, #20]
 8005a92:	1d18      	adds	r0, r3, #4
 8005a94:	6028      	str	r0, [r5, #0]
 8005a96:	0635      	lsls	r5, r6, #24
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	d501      	bpl.n	8005aa0 <_printf_i+0x1c4>
 8005a9c:	6019      	str	r1, [r3, #0]
 8005a9e:	e002      	b.n	8005aa6 <_printf_i+0x1ca>
 8005aa0:	0670      	lsls	r0, r6, #25
 8005aa2:	d5fb      	bpl.n	8005a9c <_printf_i+0x1c0>
 8005aa4:	8019      	strh	r1, [r3, #0]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6123      	str	r3, [r4, #16]
 8005aaa:	4615      	mov	r5, r2
 8005aac:	e7bc      	b.n	8005a28 <_printf_i+0x14c>
 8005aae:	682b      	ldr	r3, [r5, #0]
 8005ab0:	1d1a      	adds	r2, r3, #4
 8005ab2:	602a      	str	r2, [r5, #0]
 8005ab4:	681d      	ldr	r5, [r3, #0]
 8005ab6:	6862      	ldr	r2, [r4, #4]
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4628      	mov	r0, r5
 8005abc:	f7fa fbb0 	bl	8000220 <memchr>
 8005ac0:	b108      	cbz	r0, 8005ac6 <_printf_i+0x1ea>
 8005ac2:	1b40      	subs	r0, r0, r5
 8005ac4:	6060      	str	r0, [r4, #4]
 8005ac6:	6863      	ldr	r3, [r4, #4]
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	2300      	movs	r3, #0
 8005acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad0:	e7aa      	b.n	8005a28 <_printf_i+0x14c>
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	462a      	mov	r2, r5
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	4640      	mov	r0, r8
 8005ada:	47d0      	blx	sl
 8005adc:	3001      	adds	r0, #1
 8005ade:	d0ad      	beq.n	8005a3c <_printf_i+0x160>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	079b      	lsls	r3, r3, #30
 8005ae4:	d413      	bmi.n	8005b0e <_printf_i+0x232>
 8005ae6:	68e0      	ldr	r0, [r4, #12]
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	4298      	cmp	r0, r3
 8005aec:	bfb8      	it	lt
 8005aee:	4618      	movlt	r0, r3
 8005af0:	e7a6      	b.n	8005a40 <_printf_i+0x164>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4632      	mov	r2, r6
 8005af6:	4649      	mov	r1, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	47d0      	blx	sl
 8005afc:	3001      	adds	r0, #1
 8005afe:	d09d      	beq.n	8005a3c <_printf_i+0x160>
 8005b00:	3501      	adds	r5, #1
 8005b02:	68e3      	ldr	r3, [r4, #12]
 8005b04:	9903      	ldr	r1, [sp, #12]
 8005b06:	1a5b      	subs	r3, r3, r1
 8005b08:	42ab      	cmp	r3, r5
 8005b0a:	dcf2      	bgt.n	8005af2 <_printf_i+0x216>
 8005b0c:	e7eb      	b.n	8005ae6 <_printf_i+0x20a>
 8005b0e:	2500      	movs	r5, #0
 8005b10:	f104 0619 	add.w	r6, r4, #25
 8005b14:	e7f5      	b.n	8005b02 <_printf_i+0x226>
 8005b16:	bf00      	nop
 8005b18:	08006c49 	.word	0x08006c49
 8005b1c:	08006c5a 	.word	0x08006c5a

08005b20 <memmove>:
 8005b20:	4288      	cmp	r0, r1
 8005b22:	b510      	push	{r4, lr}
 8005b24:	eb01 0402 	add.w	r4, r1, r2
 8005b28:	d902      	bls.n	8005b30 <memmove+0x10>
 8005b2a:	4284      	cmp	r4, r0
 8005b2c:	4623      	mov	r3, r4
 8005b2e:	d807      	bhi.n	8005b40 <memmove+0x20>
 8005b30:	1e43      	subs	r3, r0, #1
 8005b32:	42a1      	cmp	r1, r4
 8005b34:	d008      	beq.n	8005b48 <memmove+0x28>
 8005b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b3e:	e7f8      	b.n	8005b32 <memmove+0x12>
 8005b40:	4402      	add	r2, r0
 8005b42:	4601      	mov	r1, r0
 8005b44:	428a      	cmp	r2, r1
 8005b46:	d100      	bne.n	8005b4a <memmove+0x2a>
 8005b48:	bd10      	pop	{r4, pc}
 8005b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b52:	e7f7      	b.n	8005b44 <memmove+0x24>

08005b54 <_sbrk_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d06      	ldr	r5, [pc, #24]	; (8005b70 <_sbrk_r+0x1c>)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	f7fc faba 	bl	80020d8 <_sbrk>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_sbrk_r+0x1a>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_sbrk_r+0x1a>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	200003e8 	.word	0x200003e8

08005b74 <memcpy>:
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	4770      	bx	lr
 8005b80:	b510      	push	{r4, lr}
 8005b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	d1f9      	bne.n	8005b82 <memcpy+0xe>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <_realloc_r>:
 8005b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b94:	4680      	mov	r8, r0
 8005b96:	4614      	mov	r4, r2
 8005b98:	460e      	mov	r6, r1
 8005b9a:	b921      	cbnz	r1, 8005ba6 <_realloc_r+0x16>
 8005b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	f7ff bc49 	b.w	8005438 <_malloc_r>
 8005ba6:	b92a      	cbnz	r2, 8005bb4 <_realloc_r+0x24>
 8005ba8:	f7ff fbda 	bl	8005360 <_free_r>
 8005bac:	4625      	mov	r5, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	f000 f81b 	bl	8005bee <_malloc_usable_size_r>
 8005bb8:	4284      	cmp	r4, r0
 8005bba:	4607      	mov	r7, r0
 8005bbc:	d802      	bhi.n	8005bc4 <_realloc_r+0x34>
 8005bbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bc2:	d812      	bhi.n	8005bea <_realloc_r+0x5a>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	f7ff fc36 	bl	8005438 <_malloc_r>
 8005bcc:	4605      	mov	r5, r0
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	d0ed      	beq.n	8005bae <_realloc_r+0x1e>
 8005bd2:	42bc      	cmp	r4, r7
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	bf28      	it	cs
 8005bda:	463a      	movcs	r2, r7
 8005bdc:	f7ff ffca 	bl	8005b74 <memcpy>
 8005be0:	4631      	mov	r1, r6
 8005be2:	4640      	mov	r0, r8
 8005be4:	f7ff fbbc 	bl	8005360 <_free_r>
 8005be8:	e7e1      	b.n	8005bae <_realloc_r+0x1e>
 8005bea:	4635      	mov	r5, r6
 8005bec:	e7df      	b.n	8005bae <_realloc_r+0x1e>

08005bee <_malloc_usable_size_r>:
 8005bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bf2:	1f18      	subs	r0, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bfbc      	itt	lt
 8005bf8:	580b      	ldrlt	r3, [r1, r0]
 8005bfa:	18c0      	addlt	r0, r0, r3
 8005bfc:	4770      	bx	lr
	...

08005c00 <pow>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	ed2d 8b02 	vpush	{d8}
 8005c06:	eeb0 8a40 	vmov.f32	s16, s0
 8005c0a:	eef0 8a60 	vmov.f32	s17, s1
 8005c0e:	ec55 4b11 	vmov	r4, r5, d1
 8005c12:	f000 f891 	bl	8005d38 <__ieee754_pow>
 8005c16:	4622      	mov	r2, r4
 8005c18:	462b      	mov	r3, r5
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	ec57 6b10 	vmov	r6, r7, d0
 8005c22:	f7fa ffa3 	bl	8000b6c <__aeabi_dcmpun>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d13b      	bne.n	8005ca2 <pow+0xa2>
 8005c2a:	ec51 0b18 	vmov	r0, r1, d8
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2300      	movs	r3, #0
 8005c32:	f7fa ff69 	bl	8000b08 <__aeabi_dcmpeq>
 8005c36:	b1b8      	cbz	r0, 8005c68 <pow+0x68>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa ff62 	bl	8000b08 <__aeabi_dcmpeq>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d146      	bne.n	8005cd6 <pow+0xd6>
 8005c48:	ec45 4b10 	vmov	d0, r4, r5
 8005c4c:	f000 f866 	bl	8005d1c <finite>
 8005c50:	b338      	cbz	r0, 8005ca2 <pow+0xa2>
 8005c52:	2200      	movs	r2, #0
 8005c54:	2300      	movs	r3, #0
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa ff5f 	bl	8000b1c <__aeabi_dcmplt>
 8005c5e:	b300      	cbz	r0, 8005ca2 <pow+0xa2>
 8005c60:	f7ff fb52 	bl	8005308 <__errno>
 8005c64:	2322      	movs	r3, #34	; 0x22
 8005c66:	e01b      	b.n	8005ca0 <pow+0xa0>
 8005c68:	ec47 6b10 	vmov	d0, r6, r7
 8005c6c:	f000 f856 	bl	8005d1c <finite>
 8005c70:	b9e0      	cbnz	r0, 8005cac <pow+0xac>
 8005c72:	eeb0 0a48 	vmov.f32	s0, s16
 8005c76:	eef0 0a68 	vmov.f32	s1, s17
 8005c7a:	f000 f84f 	bl	8005d1c <finite>
 8005c7e:	b1a8      	cbz	r0, 8005cac <pow+0xac>
 8005c80:	ec45 4b10 	vmov	d0, r4, r5
 8005c84:	f000 f84a 	bl	8005d1c <finite>
 8005c88:	b180      	cbz	r0, 8005cac <pow+0xac>
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	4630      	mov	r0, r6
 8005c90:	4639      	mov	r1, r7
 8005c92:	f7fa ff6b 	bl	8000b6c <__aeabi_dcmpun>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d0e2      	beq.n	8005c60 <pow+0x60>
 8005c9a:	f7ff fb35 	bl	8005308 <__errno>
 8005c9e:	2321      	movs	r3, #33	; 0x21
 8005ca0:	6003      	str	r3, [r0, #0]
 8005ca2:	ecbd 8b02 	vpop	{d8}
 8005ca6:	ec47 6b10 	vmov	d0, r6, r7
 8005caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cac:	2200      	movs	r2, #0
 8005cae:	2300      	movs	r3, #0
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	f7fa ff28 	bl	8000b08 <__aeabi_dcmpeq>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d0f2      	beq.n	8005ca2 <pow+0xa2>
 8005cbc:	eeb0 0a48 	vmov.f32	s0, s16
 8005cc0:	eef0 0a68 	vmov.f32	s1, s17
 8005cc4:	f000 f82a 	bl	8005d1c <finite>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d0ea      	beq.n	8005ca2 <pow+0xa2>
 8005ccc:	ec45 4b10 	vmov	d0, r4, r5
 8005cd0:	f000 f824 	bl	8005d1c <finite>
 8005cd4:	e7c3      	b.n	8005c5e <pow+0x5e>
 8005cd6:	4f01      	ldr	r7, [pc, #4]	; (8005cdc <pow+0xdc>)
 8005cd8:	2600      	movs	r6, #0
 8005cda:	e7e2      	b.n	8005ca2 <pow+0xa2>
 8005cdc:	3ff00000 	.word	0x3ff00000

08005ce0 <sqrtf>:
 8005ce0:	b508      	push	{r3, lr}
 8005ce2:	ed2d 8b02 	vpush	{d8}
 8005ce6:	eeb0 8a40 	vmov.f32	s16, s0
 8005cea:	f000 f822 	bl	8005d32 <__ieee754_sqrtf>
 8005cee:	eeb4 8a48 	vcmp.f32	s16, s16
 8005cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf6:	d60c      	bvs.n	8005d12 <sqrtf+0x32>
 8005cf8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005d18 <sqrtf+0x38>
 8005cfc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d04:	d505      	bpl.n	8005d12 <sqrtf+0x32>
 8005d06:	f7ff faff 	bl	8005308 <__errno>
 8005d0a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005d0e:	2321      	movs	r3, #33	; 0x21
 8005d10:	6003      	str	r3, [r0, #0]
 8005d12:	ecbd 8b02 	vpop	{d8}
 8005d16:	bd08      	pop	{r3, pc}
 8005d18:	00000000 	.word	0x00000000

08005d1c <finite>:
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	ed8d 0b00 	vstr	d0, [sp]
 8005d22:	9801      	ldr	r0, [sp, #4]
 8005d24:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005d28:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005d2c:	0fc0      	lsrs	r0, r0, #31
 8005d2e:	b002      	add	sp, #8
 8005d30:	4770      	bx	lr

08005d32 <__ieee754_sqrtf>:
 8005d32:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005d36:	4770      	bx	lr

08005d38 <__ieee754_pow>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	ed2d 8b06 	vpush	{d8-d10}
 8005d40:	b089      	sub	sp, #36	; 0x24
 8005d42:	ed8d 1b00 	vstr	d1, [sp]
 8005d46:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005d4a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005d4e:	ea58 0102 	orrs.w	r1, r8, r2
 8005d52:	ec57 6b10 	vmov	r6, r7, d0
 8005d56:	d115      	bne.n	8005d84 <__ieee754_pow+0x4c>
 8005d58:	19b3      	adds	r3, r6, r6
 8005d5a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005d5e:	4152      	adcs	r2, r2
 8005d60:	4299      	cmp	r1, r3
 8005d62:	4b89      	ldr	r3, [pc, #548]	; (8005f88 <__ieee754_pow+0x250>)
 8005d64:	4193      	sbcs	r3, r2
 8005d66:	f080 84d1 	bcs.w	800670c <__ieee754_pow+0x9d4>
 8005d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa faab 	bl	80002cc <__adddf3>
 8005d76:	ec41 0b10 	vmov	d0, r0, r1
 8005d7a:	b009      	add	sp, #36	; 0x24
 8005d7c:	ecbd 8b06 	vpop	{d8-d10}
 8005d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d84:	4b81      	ldr	r3, [pc, #516]	; (8005f8c <__ieee754_pow+0x254>)
 8005d86:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005d8a:	429c      	cmp	r4, r3
 8005d8c:	ee10 aa10 	vmov	sl, s0
 8005d90:	463d      	mov	r5, r7
 8005d92:	dc06      	bgt.n	8005da2 <__ieee754_pow+0x6a>
 8005d94:	d101      	bne.n	8005d9a <__ieee754_pow+0x62>
 8005d96:	2e00      	cmp	r6, #0
 8005d98:	d1e7      	bne.n	8005d6a <__ieee754_pow+0x32>
 8005d9a:	4598      	cmp	r8, r3
 8005d9c:	dc01      	bgt.n	8005da2 <__ieee754_pow+0x6a>
 8005d9e:	d10f      	bne.n	8005dc0 <__ieee754_pow+0x88>
 8005da0:	b172      	cbz	r2, 8005dc0 <__ieee754_pow+0x88>
 8005da2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005da6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005daa:	ea55 050a 	orrs.w	r5, r5, sl
 8005dae:	d1dc      	bne.n	8005d6a <__ieee754_pow+0x32>
 8005db0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005db4:	18db      	adds	r3, r3, r3
 8005db6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005dba:	4152      	adcs	r2, r2
 8005dbc:	429d      	cmp	r5, r3
 8005dbe:	e7d0      	b.n	8005d62 <__ieee754_pow+0x2a>
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	da3b      	bge.n	8005e3c <__ieee754_pow+0x104>
 8005dc4:	4b72      	ldr	r3, [pc, #456]	; (8005f90 <__ieee754_pow+0x258>)
 8005dc6:	4598      	cmp	r8, r3
 8005dc8:	dc51      	bgt.n	8005e6e <__ieee754_pow+0x136>
 8005dca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005dce:	4598      	cmp	r8, r3
 8005dd0:	f340 84ab 	ble.w	800672a <__ieee754_pow+0x9f2>
 8005dd4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005dd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ddc:	2b14      	cmp	r3, #20
 8005dde:	dd0f      	ble.n	8005e00 <__ieee754_pow+0xc8>
 8005de0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005de4:	fa22 f103 	lsr.w	r1, r2, r3
 8005de8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dec:	4293      	cmp	r3, r2
 8005dee:	f040 849c 	bne.w	800672a <__ieee754_pow+0x9f2>
 8005df2:	f001 0101 	and.w	r1, r1, #1
 8005df6:	f1c1 0302 	rsb	r3, r1, #2
 8005dfa:	9304      	str	r3, [sp, #16]
 8005dfc:	b182      	cbz	r2, 8005e20 <__ieee754_pow+0xe8>
 8005dfe:	e05f      	b.n	8005ec0 <__ieee754_pow+0x188>
 8005e00:	2a00      	cmp	r2, #0
 8005e02:	d15b      	bne.n	8005ebc <__ieee754_pow+0x184>
 8005e04:	f1c3 0314 	rsb	r3, r3, #20
 8005e08:	fa48 f103 	asr.w	r1, r8, r3
 8005e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e10:	4543      	cmp	r3, r8
 8005e12:	f040 8487 	bne.w	8006724 <__ieee754_pow+0x9ec>
 8005e16:	f001 0101 	and.w	r1, r1, #1
 8005e1a:	f1c1 0302 	rsb	r3, r1, #2
 8005e1e:	9304      	str	r3, [sp, #16]
 8005e20:	4b5c      	ldr	r3, [pc, #368]	; (8005f94 <__ieee754_pow+0x25c>)
 8005e22:	4598      	cmp	r8, r3
 8005e24:	d132      	bne.n	8005e8c <__ieee754_pow+0x154>
 8005e26:	f1b9 0f00 	cmp.w	r9, #0
 8005e2a:	f280 8477 	bge.w	800671c <__ieee754_pow+0x9e4>
 8005e2e:	4959      	ldr	r1, [pc, #356]	; (8005f94 <__ieee754_pow+0x25c>)
 8005e30:	4632      	mov	r2, r6
 8005e32:	463b      	mov	r3, r7
 8005e34:	2000      	movs	r0, #0
 8005e36:	f7fa fd29 	bl	800088c <__aeabi_ddiv>
 8005e3a:	e79c      	b.n	8005d76 <__ieee754_pow+0x3e>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	d13d      	bne.n	8005ec0 <__ieee754_pow+0x188>
 8005e44:	4b51      	ldr	r3, [pc, #324]	; (8005f8c <__ieee754_pow+0x254>)
 8005e46:	4598      	cmp	r8, r3
 8005e48:	d1ea      	bne.n	8005e20 <__ieee754_pow+0xe8>
 8005e4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005e4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005e52:	ea53 030a 	orrs.w	r3, r3, sl
 8005e56:	f000 8459 	beq.w	800670c <__ieee754_pow+0x9d4>
 8005e5a:	4b4f      	ldr	r3, [pc, #316]	; (8005f98 <__ieee754_pow+0x260>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	dd08      	ble.n	8005e72 <__ieee754_pow+0x13a>
 8005e60:	f1b9 0f00 	cmp.w	r9, #0
 8005e64:	f2c0 8456 	blt.w	8006714 <__ieee754_pow+0x9dc>
 8005e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e6c:	e783      	b.n	8005d76 <__ieee754_pow+0x3e>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e7e5      	b.n	8005e3e <__ieee754_pow+0x106>
 8005e72:	f1b9 0f00 	cmp.w	r9, #0
 8005e76:	f04f 0000 	mov.w	r0, #0
 8005e7a:	f04f 0100 	mov.w	r1, #0
 8005e7e:	f6bf af7a 	bge.w	8005d76 <__ieee754_pow+0x3e>
 8005e82:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005e86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e8a:	e774      	b.n	8005d76 <__ieee754_pow+0x3e>
 8005e8c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005e90:	d106      	bne.n	8005ea0 <__ieee754_pow+0x168>
 8005e92:	4632      	mov	r2, r6
 8005e94:	463b      	mov	r3, r7
 8005e96:	4630      	mov	r0, r6
 8005e98:	4639      	mov	r1, r7
 8005e9a:	f7fa fbcd 	bl	8000638 <__aeabi_dmul>
 8005e9e:	e76a      	b.n	8005d76 <__ieee754_pow+0x3e>
 8005ea0:	4b3e      	ldr	r3, [pc, #248]	; (8005f9c <__ieee754_pow+0x264>)
 8005ea2:	4599      	cmp	r9, r3
 8005ea4:	d10c      	bne.n	8005ec0 <__ieee754_pow+0x188>
 8005ea6:	2d00      	cmp	r5, #0
 8005ea8:	db0a      	blt.n	8005ec0 <__ieee754_pow+0x188>
 8005eaa:	ec47 6b10 	vmov	d0, r6, r7
 8005eae:	b009      	add	sp, #36	; 0x24
 8005eb0:	ecbd 8b06 	vpop	{d8-d10}
 8005eb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb8:	f000 bd20 	b.w	80068fc <__ieee754_sqrt>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	ec47 6b10 	vmov	d0, r6, r7
 8005ec4:	f000 fc62 	bl	800678c <fabs>
 8005ec8:	ec51 0b10 	vmov	r0, r1, d0
 8005ecc:	f1ba 0f00 	cmp.w	sl, #0
 8005ed0:	d129      	bne.n	8005f26 <__ieee754_pow+0x1ee>
 8005ed2:	b124      	cbz	r4, 8005ede <__ieee754_pow+0x1a6>
 8005ed4:	4b2f      	ldr	r3, [pc, #188]	; (8005f94 <__ieee754_pow+0x25c>)
 8005ed6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d123      	bne.n	8005f26 <__ieee754_pow+0x1ee>
 8005ede:	f1b9 0f00 	cmp.w	r9, #0
 8005ee2:	da05      	bge.n	8005ef0 <__ieee754_pow+0x1b8>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	2000      	movs	r0, #0
 8005eea:	492a      	ldr	r1, [pc, #168]	; (8005f94 <__ieee754_pow+0x25c>)
 8005eec:	f7fa fcce 	bl	800088c <__aeabi_ddiv>
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	f6bf af40 	bge.w	8005d76 <__ieee754_pow+0x3e>
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005efc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005f00:	431c      	orrs	r4, r3
 8005f02:	d108      	bne.n	8005f16 <__ieee754_pow+0x1de>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	f7fa f9dc 	bl	80002c8 <__aeabi_dsub>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	e78f      	b.n	8005e36 <__ieee754_pow+0xfe>
 8005f16:	9b04      	ldr	r3, [sp, #16]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f47f af2c 	bne.w	8005d76 <__ieee754_pow+0x3e>
 8005f1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f22:	4619      	mov	r1, r3
 8005f24:	e727      	b.n	8005d76 <__ieee754_pow+0x3e>
 8005f26:	0feb      	lsrs	r3, r5, #31
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	9306      	str	r3, [sp, #24]
 8005f2c:	9a06      	ldr	r2, [sp, #24]
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	d102      	bne.n	8005f3a <__ieee754_pow+0x202>
 8005f34:	4632      	mov	r2, r6
 8005f36:	463b      	mov	r3, r7
 8005f38:	e7e6      	b.n	8005f08 <__ieee754_pow+0x1d0>
 8005f3a:	4b19      	ldr	r3, [pc, #100]	; (8005fa0 <__ieee754_pow+0x268>)
 8005f3c:	4598      	cmp	r8, r3
 8005f3e:	f340 80fb 	ble.w	8006138 <__ieee754_pow+0x400>
 8005f42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005f46:	4598      	cmp	r8, r3
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <__ieee754_pow+0x260>)
 8005f4a:	dd0c      	ble.n	8005f66 <__ieee754_pow+0x22e>
 8005f4c:	429c      	cmp	r4, r3
 8005f4e:	dc0f      	bgt.n	8005f70 <__ieee754_pow+0x238>
 8005f50:	f1b9 0f00 	cmp.w	r9, #0
 8005f54:	da0f      	bge.n	8005f76 <__ieee754_pow+0x23e>
 8005f56:	2000      	movs	r0, #0
 8005f58:	b009      	add	sp, #36	; 0x24
 8005f5a:	ecbd 8b06 	vpop	{d8-d10}
 8005f5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f62:	f000 bcc2 	b.w	80068ea <__math_oflow>
 8005f66:	429c      	cmp	r4, r3
 8005f68:	dbf2      	blt.n	8005f50 <__ieee754_pow+0x218>
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <__ieee754_pow+0x25c>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	dd19      	ble.n	8005fa4 <__ieee754_pow+0x26c>
 8005f70:	f1b9 0f00 	cmp.w	r9, #0
 8005f74:	dcef      	bgt.n	8005f56 <__ieee754_pow+0x21e>
 8005f76:	2000      	movs	r0, #0
 8005f78:	b009      	add	sp, #36	; 0x24
 8005f7a:	ecbd 8b06 	vpop	{d8-d10}
 8005f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f82:	f000 bca9 	b.w	80068d8 <__math_uflow>
 8005f86:	bf00      	nop
 8005f88:	fff00000 	.word	0xfff00000
 8005f8c:	7ff00000 	.word	0x7ff00000
 8005f90:	433fffff 	.word	0x433fffff
 8005f94:	3ff00000 	.word	0x3ff00000
 8005f98:	3fefffff 	.word	0x3fefffff
 8005f9c:	3fe00000 	.word	0x3fe00000
 8005fa0:	41e00000 	.word	0x41e00000
 8005fa4:	4b60      	ldr	r3, [pc, #384]	; (8006128 <__ieee754_pow+0x3f0>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f7fa f98e 	bl	80002c8 <__aeabi_dsub>
 8005fac:	a354      	add	r3, pc, #336	; (adr r3, 8006100 <__ieee754_pow+0x3c8>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	460d      	mov	r5, r1
 8005fb6:	f7fa fb3f 	bl	8000638 <__aeabi_dmul>
 8005fba:	a353      	add	r3, pc, #332	; (adr r3, 8006108 <__ieee754_pow+0x3d0>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	460f      	mov	r7, r1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa fb36 	bl	8000638 <__aeabi_dmul>
 8005fcc:	4b57      	ldr	r3, [pc, #348]	; (800612c <__ieee754_pow+0x3f4>)
 8005fce:	4682      	mov	sl, r0
 8005fd0:	468b      	mov	fp, r1
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f7fa fb2e 	bl	8000638 <__aeabi_dmul>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	a14b      	add	r1, pc, #300	; (adr r1, 8006110 <__ieee754_pow+0x3d8>)
 8005fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe6:	f7fa f96f 	bl	80002c8 <__aeabi_dsub>
 8005fea:	4622      	mov	r2, r4
 8005fec:	462b      	mov	r3, r5
 8005fee:	f7fa fb23 	bl	8000638 <__aeabi_dmul>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	494d      	ldr	r1, [pc, #308]	; (8006130 <__ieee754_pow+0x3f8>)
 8005ffa:	f7fa f965 	bl	80002c8 <__aeabi_dsub>
 8005ffe:	4622      	mov	r2, r4
 8006000:	4680      	mov	r8, r0
 8006002:	4689      	mov	r9, r1
 8006004:	462b      	mov	r3, r5
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa fb15 	bl	8000638 <__aeabi_dmul>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4640      	mov	r0, r8
 8006014:	4649      	mov	r1, r9
 8006016:	f7fa fb0f 	bl	8000638 <__aeabi_dmul>
 800601a:	a33f      	add	r3, pc, #252	; (adr r3, 8006118 <__ieee754_pow+0x3e0>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa fb0a 	bl	8000638 <__aeabi_dmul>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4650      	mov	r0, sl
 800602a:	4659      	mov	r1, fp
 800602c:	f7fa f94c 	bl	80002c8 <__aeabi_dsub>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4680      	mov	r8, r0
 8006036:	4689      	mov	r9, r1
 8006038:	4630      	mov	r0, r6
 800603a:	4639      	mov	r1, r7
 800603c:	f7fa f946 	bl	80002cc <__adddf3>
 8006040:	2000      	movs	r0, #0
 8006042:	4632      	mov	r2, r6
 8006044:	463b      	mov	r3, r7
 8006046:	4604      	mov	r4, r0
 8006048:	460d      	mov	r5, r1
 800604a:	f7fa f93d 	bl	80002c8 <__aeabi_dsub>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	f7fa f937 	bl	80002c8 <__aeabi_dsub>
 800605a:	9b04      	ldr	r3, [sp, #16]
 800605c:	9a06      	ldr	r2, [sp, #24]
 800605e:	3b01      	subs	r3, #1
 8006060:	4313      	orrs	r3, r2
 8006062:	4682      	mov	sl, r0
 8006064:	468b      	mov	fp, r1
 8006066:	f040 81e7 	bne.w	8006438 <__ieee754_pow+0x700>
 800606a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006120 <__ieee754_pow+0x3e8>
 800606e:	eeb0 8a47 	vmov.f32	s16, s14
 8006072:	eef0 8a67 	vmov.f32	s17, s15
 8006076:	e9dd 6700 	ldrd	r6, r7, [sp]
 800607a:	2600      	movs	r6, #0
 800607c:	4632      	mov	r2, r6
 800607e:	463b      	mov	r3, r7
 8006080:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006084:	f7fa f920 	bl	80002c8 <__aeabi_dsub>
 8006088:	4622      	mov	r2, r4
 800608a:	462b      	mov	r3, r5
 800608c:	f7fa fad4 	bl	8000638 <__aeabi_dmul>
 8006090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006094:	4680      	mov	r8, r0
 8006096:	4689      	mov	r9, r1
 8006098:	4650      	mov	r0, sl
 800609a:	4659      	mov	r1, fp
 800609c:	f7fa facc 	bl	8000638 <__aeabi_dmul>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4640      	mov	r0, r8
 80060a6:	4649      	mov	r1, r9
 80060a8:	f7fa f910 	bl	80002cc <__adddf3>
 80060ac:	4632      	mov	r2, r6
 80060ae:	463b      	mov	r3, r7
 80060b0:	4680      	mov	r8, r0
 80060b2:	4689      	mov	r9, r1
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa fabe 	bl	8000638 <__aeabi_dmul>
 80060bc:	460b      	mov	r3, r1
 80060be:	4604      	mov	r4, r0
 80060c0:	460d      	mov	r5, r1
 80060c2:	4602      	mov	r2, r0
 80060c4:	4649      	mov	r1, r9
 80060c6:	4640      	mov	r0, r8
 80060c8:	f7fa f900 	bl	80002cc <__adddf3>
 80060cc:	4b19      	ldr	r3, [pc, #100]	; (8006134 <__ieee754_pow+0x3fc>)
 80060ce:	4299      	cmp	r1, r3
 80060d0:	ec45 4b19 	vmov	d9, r4, r5
 80060d4:	4606      	mov	r6, r0
 80060d6:	460f      	mov	r7, r1
 80060d8:	468b      	mov	fp, r1
 80060da:	f340 82f0 	ble.w	80066be <__ieee754_pow+0x986>
 80060de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80060e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80060e6:	4303      	orrs	r3, r0
 80060e8:	f000 81e4 	beq.w	80064b4 <__ieee754_pow+0x77c>
 80060ec:	ec51 0b18 	vmov	r0, r1, d8
 80060f0:	2200      	movs	r2, #0
 80060f2:	2300      	movs	r3, #0
 80060f4:	f7fa fd12 	bl	8000b1c <__aeabi_dcmplt>
 80060f8:	3800      	subs	r0, #0
 80060fa:	bf18      	it	ne
 80060fc:	2001      	movne	r0, #1
 80060fe:	e72b      	b.n	8005f58 <__ieee754_pow+0x220>
 8006100:	60000000 	.word	0x60000000
 8006104:	3ff71547 	.word	0x3ff71547
 8006108:	f85ddf44 	.word	0xf85ddf44
 800610c:	3e54ae0b 	.word	0x3e54ae0b
 8006110:	55555555 	.word	0x55555555
 8006114:	3fd55555 	.word	0x3fd55555
 8006118:	652b82fe 	.word	0x652b82fe
 800611c:	3ff71547 	.word	0x3ff71547
 8006120:	00000000 	.word	0x00000000
 8006124:	bff00000 	.word	0xbff00000
 8006128:	3ff00000 	.word	0x3ff00000
 800612c:	3fd00000 	.word	0x3fd00000
 8006130:	3fe00000 	.word	0x3fe00000
 8006134:	408fffff 	.word	0x408fffff
 8006138:	4bd5      	ldr	r3, [pc, #852]	; (8006490 <__ieee754_pow+0x758>)
 800613a:	402b      	ands	r3, r5
 800613c:	2200      	movs	r2, #0
 800613e:	b92b      	cbnz	r3, 800614c <__ieee754_pow+0x414>
 8006140:	4bd4      	ldr	r3, [pc, #848]	; (8006494 <__ieee754_pow+0x75c>)
 8006142:	f7fa fa79 	bl	8000638 <__aeabi_dmul>
 8006146:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800614a:	460c      	mov	r4, r1
 800614c:	1523      	asrs	r3, r4, #20
 800614e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006152:	4413      	add	r3, r2
 8006154:	9305      	str	r3, [sp, #20]
 8006156:	4bd0      	ldr	r3, [pc, #832]	; (8006498 <__ieee754_pow+0x760>)
 8006158:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800615c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006160:	429c      	cmp	r4, r3
 8006162:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006166:	dd08      	ble.n	800617a <__ieee754_pow+0x442>
 8006168:	4bcc      	ldr	r3, [pc, #816]	; (800649c <__ieee754_pow+0x764>)
 800616a:	429c      	cmp	r4, r3
 800616c:	f340 8162 	ble.w	8006434 <__ieee754_pow+0x6fc>
 8006170:	9b05      	ldr	r3, [sp, #20]
 8006172:	3301      	adds	r3, #1
 8006174:	9305      	str	r3, [sp, #20]
 8006176:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800617a:	2400      	movs	r4, #0
 800617c:	00e3      	lsls	r3, r4, #3
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	4bc7      	ldr	r3, [pc, #796]	; (80064a0 <__ieee754_pow+0x768>)
 8006182:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006186:	ed93 7b00 	vldr	d7, [r3]
 800618a:	4629      	mov	r1, r5
 800618c:	ec53 2b17 	vmov	r2, r3, d7
 8006190:	eeb0 9a47 	vmov.f32	s18, s14
 8006194:	eef0 9a67 	vmov.f32	s19, s15
 8006198:	4682      	mov	sl, r0
 800619a:	f7fa f895 	bl	80002c8 <__aeabi_dsub>
 800619e:	4652      	mov	r2, sl
 80061a0:	4606      	mov	r6, r0
 80061a2:	460f      	mov	r7, r1
 80061a4:	462b      	mov	r3, r5
 80061a6:	ec51 0b19 	vmov	r0, r1, d9
 80061aa:	f7fa f88f 	bl	80002cc <__adddf3>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	2000      	movs	r0, #0
 80061b4:	49bb      	ldr	r1, [pc, #748]	; (80064a4 <__ieee754_pow+0x76c>)
 80061b6:	f7fa fb69 	bl	800088c <__aeabi_ddiv>
 80061ba:	ec41 0b1a 	vmov	d10, r0, r1
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4630      	mov	r0, r6
 80061c4:	4639      	mov	r1, r7
 80061c6:	f7fa fa37 	bl	8000638 <__aeabi_dmul>
 80061ca:	2300      	movs	r3, #0
 80061cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d0:	9302      	str	r3, [sp, #8]
 80061d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80061d6:	46ab      	mov	fp, r5
 80061d8:	106d      	asrs	r5, r5, #1
 80061da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80061de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80061e2:	ec41 0b18 	vmov	d8, r0, r1
 80061e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80061ea:	2200      	movs	r2, #0
 80061ec:	4640      	mov	r0, r8
 80061ee:	4649      	mov	r1, r9
 80061f0:	4614      	mov	r4, r2
 80061f2:	461d      	mov	r5, r3
 80061f4:	f7fa fa20 	bl	8000638 <__aeabi_dmul>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4630      	mov	r0, r6
 80061fe:	4639      	mov	r1, r7
 8006200:	f7fa f862 	bl	80002c8 <__aeabi_dsub>
 8006204:	ec53 2b19 	vmov	r2, r3, d9
 8006208:	4606      	mov	r6, r0
 800620a:	460f      	mov	r7, r1
 800620c:	4620      	mov	r0, r4
 800620e:	4629      	mov	r1, r5
 8006210:	f7fa f85a 	bl	80002c8 <__aeabi_dsub>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4650      	mov	r0, sl
 800621a:	4659      	mov	r1, fp
 800621c:	f7fa f854 	bl	80002c8 <__aeabi_dsub>
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	f7fa fa08 	bl	8000638 <__aeabi_dmul>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4630      	mov	r0, r6
 800622e:	4639      	mov	r1, r7
 8006230:	f7fa f84a 	bl	80002c8 <__aeabi_dsub>
 8006234:	ec53 2b1a 	vmov	r2, r3, d10
 8006238:	f7fa f9fe 	bl	8000638 <__aeabi_dmul>
 800623c:	ec53 2b18 	vmov	r2, r3, d8
 8006240:	ec41 0b19 	vmov	d9, r0, r1
 8006244:	ec51 0b18 	vmov	r0, r1, d8
 8006248:	f7fa f9f6 	bl	8000638 <__aeabi_dmul>
 800624c:	a37c      	add	r3, pc, #496	; (adr r3, 8006440 <__ieee754_pow+0x708>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	4604      	mov	r4, r0
 8006254:	460d      	mov	r5, r1
 8006256:	f7fa f9ef 	bl	8000638 <__aeabi_dmul>
 800625a:	a37b      	add	r3, pc, #492	; (adr r3, 8006448 <__ieee754_pow+0x710>)
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f7fa f834 	bl	80002cc <__adddf3>
 8006264:	4622      	mov	r2, r4
 8006266:	462b      	mov	r3, r5
 8006268:	f7fa f9e6 	bl	8000638 <__aeabi_dmul>
 800626c:	a378      	add	r3, pc, #480	; (adr r3, 8006450 <__ieee754_pow+0x718>)
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	f7fa f82b 	bl	80002cc <__adddf3>
 8006276:	4622      	mov	r2, r4
 8006278:	462b      	mov	r3, r5
 800627a:	f7fa f9dd 	bl	8000638 <__aeabi_dmul>
 800627e:	a376      	add	r3, pc, #472	; (adr r3, 8006458 <__ieee754_pow+0x720>)
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f7fa f822 	bl	80002cc <__adddf3>
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	f7fa f9d4 	bl	8000638 <__aeabi_dmul>
 8006290:	a373      	add	r3, pc, #460	; (adr r3, 8006460 <__ieee754_pow+0x728>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f7fa f819 	bl	80002cc <__adddf3>
 800629a:	4622      	mov	r2, r4
 800629c:	462b      	mov	r3, r5
 800629e:	f7fa f9cb 	bl	8000638 <__aeabi_dmul>
 80062a2:	a371      	add	r3, pc, #452	; (adr r3, 8006468 <__ieee754_pow+0x730>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7fa f810 	bl	80002cc <__adddf3>
 80062ac:	4622      	mov	r2, r4
 80062ae:	4606      	mov	r6, r0
 80062b0:	460f      	mov	r7, r1
 80062b2:	462b      	mov	r3, r5
 80062b4:	4620      	mov	r0, r4
 80062b6:	4629      	mov	r1, r5
 80062b8:	f7fa f9be 	bl	8000638 <__aeabi_dmul>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4630      	mov	r0, r6
 80062c2:	4639      	mov	r1, r7
 80062c4:	f7fa f9b8 	bl	8000638 <__aeabi_dmul>
 80062c8:	4642      	mov	r2, r8
 80062ca:	4604      	mov	r4, r0
 80062cc:	460d      	mov	r5, r1
 80062ce:	464b      	mov	r3, r9
 80062d0:	ec51 0b18 	vmov	r0, r1, d8
 80062d4:	f7f9 fffa 	bl	80002cc <__adddf3>
 80062d8:	ec53 2b19 	vmov	r2, r3, d9
 80062dc:	f7fa f9ac 	bl	8000638 <__aeabi_dmul>
 80062e0:	4622      	mov	r2, r4
 80062e2:	462b      	mov	r3, r5
 80062e4:	f7f9 fff2 	bl	80002cc <__adddf3>
 80062e8:	4642      	mov	r2, r8
 80062ea:	4682      	mov	sl, r0
 80062ec:	468b      	mov	fp, r1
 80062ee:	464b      	mov	r3, r9
 80062f0:	4640      	mov	r0, r8
 80062f2:	4649      	mov	r1, r9
 80062f4:	f7fa f9a0 	bl	8000638 <__aeabi_dmul>
 80062f8:	4b6b      	ldr	r3, [pc, #428]	; (80064a8 <__ieee754_pow+0x770>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	4606      	mov	r6, r0
 80062fe:	460f      	mov	r7, r1
 8006300:	f7f9 ffe4 	bl	80002cc <__adddf3>
 8006304:	4652      	mov	r2, sl
 8006306:	465b      	mov	r3, fp
 8006308:	f7f9 ffe0 	bl	80002cc <__adddf3>
 800630c:	2000      	movs	r0, #0
 800630e:	4604      	mov	r4, r0
 8006310:	460d      	mov	r5, r1
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4640      	mov	r0, r8
 8006318:	4649      	mov	r1, r9
 800631a:	f7fa f98d 	bl	8000638 <__aeabi_dmul>
 800631e:	4b62      	ldr	r3, [pc, #392]	; (80064a8 <__ieee754_pow+0x770>)
 8006320:	4680      	mov	r8, r0
 8006322:	4689      	mov	r9, r1
 8006324:	2200      	movs	r2, #0
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	f7f9 ffcd 	bl	80002c8 <__aeabi_dsub>
 800632e:	4632      	mov	r2, r6
 8006330:	463b      	mov	r3, r7
 8006332:	f7f9 ffc9 	bl	80002c8 <__aeabi_dsub>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4650      	mov	r0, sl
 800633c:	4659      	mov	r1, fp
 800633e:	f7f9 ffc3 	bl	80002c8 <__aeabi_dsub>
 8006342:	ec53 2b18 	vmov	r2, r3, d8
 8006346:	f7fa f977 	bl	8000638 <__aeabi_dmul>
 800634a:	4622      	mov	r2, r4
 800634c:	4606      	mov	r6, r0
 800634e:	460f      	mov	r7, r1
 8006350:	462b      	mov	r3, r5
 8006352:	ec51 0b19 	vmov	r0, r1, d9
 8006356:	f7fa f96f 	bl	8000638 <__aeabi_dmul>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4630      	mov	r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	f7f9 ffb3 	bl	80002cc <__adddf3>
 8006366:	4606      	mov	r6, r0
 8006368:	460f      	mov	r7, r1
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4640      	mov	r0, r8
 8006370:	4649      	mov	r1, r9
 8006372:	f7f9 ffab 	bl	80002cc <__adddf3>
 8006376:	a33e      	add	r3, pc, #248	; (adr r3, 8006470 <__ieee754_pow+0x738>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	2000      	movs	r0, #0
 800637e:	4604      	mov	r4, r0
 8006380:	460d      	mov	r5, r1
 8006382:	f7fa f959 	bl	8000638 <__aeabi_dmul>
 8006386:	4642      	mov	r2, r8
 8006388:	ec41 0b18 	vmov	d8, r0, r1
 800638c:	464b      	mov	r3, r9
 800638e:	4620      	mov	r0, r4
 8006390:	4629      	mov	r1, r5
 8006392:	f7f9 ff99 	bl	80002c8 <__aeabi_dsub>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7f9 ff93 	bl	80002c8 <__aeabi_dsub>
 80063a2:	a335      	add	r3, pc, #212	; (adr r3, 8006478 <__ieee754_pow+0x740>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	f7fa f946 	bl	8000638 <__aeabi_dmul>
 80063ac:	a334      	add	r3, pc, #208	; (adr r3, 8006480 <__ieee754_pow+0x748>)
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	4606      	mov	r6, r0
 80063b4:	460f      	mov	r7, r1
 80063b6:	4620      	mov	r0, r4
 80063b8:	4629      	mov	r1, r5
 80063ba:	f7fa f93d 	bl	8000638 <__aeabi_dmul>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4630      	mov	r0, r6
 80063c4:	4639      	mov	r1, r7
 80063c6:	f7f9 ff81 	bl	80002cc <__adddf3>
 80063ca:	9a07      	ldr	r2, [sp, #28]
 80063cc:	4b37      	ldr	r3, [pc, #220]	; (80064ac <__ieee754_pow+0x774>)
 80063ce:	4413      	add	r3, r2
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7f9 ff7a 	bl	80002cc <__adddf3>
 80063d8:	4682      	mov	sl, r0
 80063da:	9805      	ldr	r0, [sp, #20]
 80063dc:	468b      	mov	fp, r1
 80063de:	f7fa f8c1 	bl	8000564 <__aeabi_i2d>
 80063e2:	9a07      	ldr	r2, [sp, #28]
 80063e4:	4b32      	ldr	r3, [pc, #200]	; (80064b0 <__ieee754_pow+0x778>)
 80063e6:	4413      	add	r3, r2
 80063e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	4652      	mov	r2, sl
 80063f2:	465b      	mov	r3, fp
 80063f4:	ec51 0b18 	vmov	r0, r1, d8
 80063f8:	f7f9 ff68 	bl	80002cc <__adddf3>
 80063fc:	4642      	mov	r2, r8
 80063fe:	464b      	mov	r3, r9
 8006400:	f7f9 ff64 	bl	80002cc <__adddf3>
 8006404:	4632      	mov	r2, r6
 8006406:	463b      	mov	r3, r7
 8006408:	f7f9 ff60 	bl	80002cc <__adddf3>
 800640c:	2000      	movs	r0, #0
 800640e:	4632      	mov	r2, r6
 8006410:	463b      	mov	r3, r7
 8006412:	4604      	mov	r4, r0
 8006414:	460d      	mov	r5, r1
 8006416:	f7f9 ff57 	bl	80002c8 <__aeabi_dsub>
 800641a:	4642      	mov	r2, r8
 800641c:	464b      	mov	r3, r9
 800641e:	f7f9 ff53 	bl	80002c8 <__aeabi_dsub>
 8006422:	ec53 2b18 	vmov	r2, r3, d8
 8006426:	f7f9 ff4f 	bl	80002c8 <__aeabi_dsub>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4650      	mov	r0, sl
 8006430:	4659      	mov	r1, fp
 8006432:	e610      	b.n	8006056 <__ieee754_pow+0x31e>
 8006434:	2401      	movs	r4, #1
 8006436:	e6a1      	b.n	800617c <__ieee754_pow+0x444>
 8006438:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006488 <__ieee754_pow+0x750>
 800643c:	e617      	b.n	800606e <__ieee754_pow+0x336>
 800643e:	bf00      	nop
 8006440:	4a454eef 	.word	0x4a454eef
 8006444:	3fca7e28 	.word	0x3fca7e28
 8006448:	93c9db65 	.word	0x93c9db65
 800644c:	3fcd864a 	.word	0x3fcd864a
 8006450:	a91d4101 	.word	0xa91d4101
 8006454:	3fd17460 	.word	0x3fd17460
 8006458:	518f264d 	.word	0x518f264d
 800645c:	3fd55555 	.word	0x3fd55555
 8006460:	db6fabff 	.word	0xdb6fabff
 8006464:	3fdb6db6 	.word	0x3fdb6db6
 8006468:	33333303 	.word	0x33333303
 800646c:	3fe33333 	.word	0x3fe33333
 8006470:	e0000000 	.word	0xe0000000
 8006474:	3feec709 	.word	0x3feec709
 8006478:	dc3a03fd 	.word	0xdc3a03fd
 800647c:	3feec709 	.word	0x3feec709
 8006480:	145b01f5 	.word	0x145b01f5
 8006484:	be3e2fe0 	.word	0xbe3e2fe0
 8006488:	00000000 	.word	0x00000000
 800648c:	3ff00000 	.word	0x3ff00000
 8006490:	7ff00000 	.word	0x7ff00000
 8006494:	43400000 	.word	0x43400000
 8006498:	0003988e 	.word	0x0003988e
 800649c:	000bb679 	.word	0x000bb679
 80064a0:	08006c70 	.word	0x08006c70
 80064a4:	3ff00000 	.word	0x3ff00000
 80064a8:	40080000 	.word	0x40080000
 80064ac:	08006c90 	.word	0x08006c90
 80064b0:	08006c80 	.word	0x08006c80
 80064b4:	a3b3      	add	r3, pc, #716	; (adr r3, 8006784 <__ieee754_pow+0xa4c>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	4640      	mov	r0, r8
 80064bc:	4649      	mov	r1, r9
 80064be:	f7f9 ff05 	bl	80002cc <__adddf3>
 80064c2:	4622      	mov	r2, r4
 80064c4:	ec41 0b1a 	vmov	d10, r0, r1
 80064c8:	462b      	mov	r3, r5
 80064ca:	4630      	mov	r0, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	f7f9 fefb 	bl	80002c8 <__aeabi_dsub>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	ec51 0b1a 	vmov	r0, r1, d10
 80064da:	f7fa fb3d 	bl	8000b58 <__aeabi_dcmpgt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	f47f ae04 	bne.w	80060ec <__ieee754_pow+0x3b4>
 80064e4:	4aa2      	ldr	r2, [pc, #648]	; (8006770 <__ieee754_pow+0xa38>)
 80064e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064ea:	4293      	cmp	r3, r2
 80064ec:	f340 8107 	ble.w	80066fe <__ieee754_pow+0x9c6>
 80064f0:	151b      	asrs	r3, r3, #20
 80064f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80064f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80064fa:	fa4a fa03 	asr.w	sl, sl, r3
 80064fe:	44da      	add	sl, fp
 8006500:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006504:	489b      	ldr	r0, [pc, #620]	; (8006774 <__ieee754_pow+0xa3c>)
 8006506:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800650a:	4108      	asrs	r0, r1
 800650c:	ea00 030a 	and.w	r3, r0, sl
 8006510:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006514:	f1c1 0114 	rsb	r1, r1, #20
 8006518:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800651c:	fa4a fa01 	asr.w	sl, sl, r1
 8006520:	f1bb 0f00 	cmp.w	fp, #0
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	4620      	mov	r0, r4
 800652a:	4629      	mov	r1, r5
 800652c:	bfb8      	it	lt
 800652e:	f1ca 0a00 	rsblt	sl, sl, #0
 8006532:	f7f9 fec9 	bl	80002c8 <__aeabi_dsub>
 8006536:	ec41 0b19 	vmov	d9, r0, r1
 800653a:	4642      	mov	r2, r8
 800653c:	464b      	mov	r3, r9
 800653e:	ec51 0b19 	vmov	r0, r1, d9
 8006542:	f7f9 fec3 	bl	80002cc <__adddf3>
 8006546:	a37a      	add	r3, pc, #488	; (adr r3, 8006730 <__ieee754_pow+0x9f8>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	2000      	movs	r0, #0
 800654e:	4604      	mov	r4, r0
 8006550:	460d      	mov	r5, r1
 8006552:	f7fa f871 	bl	8000638 <__aeabi_dmul>
 8006556:	ec53 2b19 	vmov	r2, r3, d9
 800655a:	4606      	mov	r6, r0
 800655c:	460f      	mov	r7, r1
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f7f9 feb1 	bl	80002c8 <__aeabi_dsub>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4640      	mov	r0, r8
 800656c:	4649      	mov	r1, r9
 800656e:	f7f9 feab 	bl	80002c8 <__aeabi_dsub>
 8006572:	a371      	add	r3, pc, #452	; (adr r3, 8006738 <__ieee754_pow+0xa00>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7fa f85e 	bl	8000638 <__aeabi_dmul>
 800657c:	a370      	add	r3, pc, #448	; (adr r3, 8006740 <__ieee754_pow+0xa08>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	4680      	mov	r8, r0
 8006584:	4689      	mov	r9, r1
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7fa f855 	bl	8000638 <__aeabi_dmul>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4640      	mov	r0, r8
 8006594:	4649      	mov	r1, r9
 8006596:	f7f9 fe99 	bl	80002cc <__adddf3>
 800659a:	4604      	mov	r4, r0
 800659c:	460d      	mov	r5, r1
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4630      	mov	r0, r6
 80065a4:	4639      	mov	r1, r7
 80065a6:	f7f9 fe91 	bl	80002cc <__adddf3>
 80065aa:	4632      	mov	r2, r6
 80065ac:	463b      	mov	r3, r7
 80065ae:	4680      	mov	r8, r0
 80065b0:	4689      	mov	r9, r1
 80065b2:	f7f9 fe89 	bl	80002c8 <__aeabi_dsub>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7f9 fe83 	bl	80002c8 <__aeabi_dsub>
 80065c2:	4642      	mov	r2, r8
 80065c4:	4606      	mov	r6, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	464b      	mov	r3, r9
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	f7fa f833 	bl	8000638 <__aeabi_dmul>
 80065d2:	a35d      	add	r3, pc, #372	; (adr r3, 8006748 <__ieee754_pow+0xa10>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	4604      	mov	r4, r0
 80065da:	460d      	mov	r5, r1
 80065dc:	f7fa f82c 	bl	8000638 <__aeabi_dmul>
 80065e0:	a35b      	add	r3, pc, #364	; (adr r3, 8006750 <__ieee754_pow+0xa18>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f7f9 fe6f 	bl	80002c8 <__aeabi_dsub>
 80065ea:	4622      	mov	r2, r4
 80065ec:	462b      	mov	r3, r5
 80065ee:	f7fa f823 	bl	8000638 <__aeabi_dmul>
 80065f2:	a359      	add	r3, pc, #356	; (adr r3, 8006758 <__ieee754_pow+0xa20>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f7f9 fe68 	bl	80002cc <__adddf3>
 80065fc:	4622      	mov	r2, r4
 80065fe:	462b      	mov	r3, r5
 8006600:	f7fa f81a 	bl	8000638 <__aeabi_dmul>
 8006604:	a356      	add	r3, pc, #344	; (adr r3, 8006760 <__ieee754_pow+0xa28>)
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f7f9 fe5d 	bl	80002c8 <__aeabi_dsub>
 800660e:	4622      	mov	r2, r4
 8006610:	462b      	mov	r3, r5
 8006612:	f7fa f811 	bl	8000638 <__aeabi_dmul>
 8006616:	a354      	add	r3, pc, #336	; (adr r3, 8006768 <__ieee754_pow+0xa30>)
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f7f9 fe56 	bl	80002cc <__adddf3>
 8006620:	4622      	mov	r2, r4
 8006622:	462b      	mov	r3, r5
 8006624:	f7fa f808 	bl	8000638 <__aeabi_dmul>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4640      	mov	r0, r8
 800662e:	4649      	mov	r1, r9
 8006630:	f7f9 fe4a 	bl	80002c8 <__aeabi_dsub>
 8006634:	4604      	mov	r4, r0
 8006636:	460d      	mov	r5, r1
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4640      	mov	r0, r8
 800663e:	4649      	mov	r1, r9
 8006640:	f7f9 fffa 	bl	8000638 <__aeabi_dmul>
 8006644:	2200      	movs	r2, #0
 8006646:	ec41 0b19 	vmov	d9, r0, r1
 800664a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7f9 fe39 	bl	80002c8 <__aeabi_dsub>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	ec51 0b19 	vmov	r0, r1, d9
 800665e:	f7fa f915 	bl	800088c <__aeabi_ddiv>
 8006662:	4632      	mov	r2, r6
 8006664:	4604      	mov	r4, r0
 8006666:	460d      	mov	r5, r1
 8006668:	463b      	mov	r3, r7
 800666a:	4640      	mov	r0, r8
 800666c:	4649      	mov	r1, r9
 800666e:	f7f9 ffe3 	bl	8000638 <__aeabi_dmul>
 8006672:	4632      	mov	r2, r6
 8006674:	463b      	mov	r3, r7
 8006676:	f7f9 fe29 	bl	80002cc <__adddf3>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4620      	mov	r0, r4
 8006680:	4629      	mov	r1, r5
 8006682:	f7f9 fe21 	bl	80002c8 <__aeabi_dsub>
 8006686:	4642      	mov	r2, r8
 8006688:	464b      	mov	r3, r9
 800668a:	f7f9 fe1d 	bl	80002c8 <__aeabi_dsub>
 800668e:	460b      	mov	r3, r1
 8006690:	4602      	mov	r2, r0
 8006692:	4939      	ldr	r1, [pc, #228]	; (8006778 <__ieee754_pow+0xa40>)
 8006694:	2000      	movs	r0, #0
 8006696:	f7f9 fe17 	bl	80002c8 <__aeabi_dsub>
 800669a:	ec41 0b10 	vmov	d0, r0, r1
 800669e:	ee10 3a90 	vmov	r3, s1
 80066a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80066a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066aa:	da2b      	bge.n	8006704 <__ieee754_pow+0x9cc>
 80066ac:	4650      	mov	r0, sl
 80066ae:	f000 f877 	bl	80067a0 <scalbn>
 80066b2:	ec51 0b10 	vmov	r0, r1, d0
 80066b6:	ec53 2b18 	vmov	r2, r3, d8
 80066ba:	f7ff bbee 	b.w	8005e9a <__ieee754_pow+0x162>
 80066be:	4b2f      	ldr	r3, [pc, #188]	; (800677c <__ieee754_pow+0xa44>)
 80066c0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80066c4:	429e      	cmp	r6, r3
 80066c6:	f77f af0d 	ble.w	80064e4 <__ieee754_pow+0x7ac>
 80066ca:	4b2d      	ldr	r3, [pc, #180]	; (8006780 <__ieee754_pow+0xa48>)
 80066cc:	440b      	add	r3, r1
 80066ce:	4303      	orrs	r3, r0
 80066d0:	d009      	beq.n	80066e6 <__ieee754_pow+0x9ae>
 80066d2:	ec51 0b18 	vmov	r0, r1, d8
 80066d6:	2200      	movs	r2, #0
 80066d8:	2300      	movs	r3, #0
 80066da:	f7fa fa1f 	bl	8000b1c <__aeabi_dcmplt>
 80066de:	3800      	subs	r0, #0
 80066e0:	bf18      	it	ne
 80066e2:	2001      	movne	r0, #1
 80066e4:	e448      	b.n	8005f78 <__ieee754_pow+0x240>
 80066e6:	4622      	mov	r2, r4
 80066e8:	462b      	mov	r3, r5
 80066ea:	f7f9 fded 	bl	80002c8 <__aeabi_dsub>
 80066ee:	4642      	mov	r2, r8
 80066f0:	464b      	mov	r3, r9
 80066f2:	f7fa fa27 	bl	8000b44 <__aeabi_dcmpge>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	f43f aef4 	beq.w	80064e4 <__ieee754_pow+0x7ac>
 80066fc:	e7e9      	b.n	80066d2 <__ieee754_pow+0x99a>
 80066fe:	f04f 0a00 	mov.w	sl, #0
 8006702:	e71a      	b.n	800653a <__ieee754_pow+0x802>
 8006704:	ec51 0b10 	vmov	r0, r1, d0
 8006708:	4619      	mov	r1, r3
 800670a:	e7d4      	b.n	80066b6 <__ieee754_pow+0x97e>
 800670c:	491a      	ldr	r1, [pc, #104]	; (8006778 <__ieee754_pow+0xa40>)
 800670e:	2000      	movs	r0, #0
 8006710:	f7ff bb31 	b.w	8005d76 <__ieee754_pow+0x3e>
 8006714:	2000      	movs	r0, #0
 8006716:	2100      	movs	r1, #0
 8006718:	f7ff bb2d 	b.w	8005d76 <__ieee754_pow+0x3e>
 800671c:	4630      	mov	r0, r6
 800671e:	4639      	mov	r1, r7
 8006720:	f7ff bb29 	b.w	8005d76 <__ieee754_pow+0x3e>
 8006724:	9204      	str	r2, [sp, #16]
 8006726:	f7ff bb7b 	b.w	8005e20 <__ieee754_pow+0xe8>
 800672a:	2300      	movs	r3, #0
 800672c:	f7ff bb65 	b.w	8005dfa <__ieee754_pow+0xc2>
 8006730:	00000000 	.word	0x00000000
 8006734:	3fe62e43 	.word	0x3fe62e43
 8006738:	fefa39ef 	.word	0xfefa39ef
 800673c:	3fe62e42 	.word	0x3fe62e42
 8006740:	0ca86c39 	.word	0x0ca86c39
 8006744:	be205c61 	.word	0xbe205c61
 8006748:	72bea4d0 	.word	0x72bea4d0
 800674c:	3e663769 	.word	0x3e663769
 8006750:	c5d26bf1 	.word	0xc5d26bf1
 8006754:	3ebbbd41 	.word	0x3ebbbd41
 8006758:	af25de2c 	.word	0xaf25de2c
 800675c:	3f11566a 	.word	0x3f11566a
 8006760:	16bebd93 	.word	0x16bebd93
 8006764:	3f66c16c 	.word	0x3f66c16c
 8006768:	5555553e 	.word	0x5555553e
 800676c:	3fc55555 	.word	0x3fc55555
 8006770:	3fe00000 	.word	0x3fe00000
 8006774:	fff00000 	.word	0xfff00000
 8006778:	3ff00000 	.word	0x3ff00000
 800677c:	4090cbff 	.word	0x4090cbff
 8006780:	3f6f3400 	.word	0x3f6f3400
 8006784:	652b82fe 	.word	0x652b82fe
 8006788:	3c971547 	.word	0x3c971547

0800678c <fabs>:
 800678c:	ec51 0b10 	vmov	r0, r1, d0
 8006790:	ee10 2a10 	vmov	r2, s0
 8006794:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006798:	ec43 2b10 	vmov	d0, r2, r3
 800679c:	4770      	bx	lr
	...

080067a0 <scalbn>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	ec55 4b10 	vmov	r4, r5, d0
 80067a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80067aa:	4606      	mov	r6, r0
 80067ac:	462b      	mov	r3, r5
 80067ae:	b999      	cbnz	r1, 80067d8 <scalbn+0x38>
 80067b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80067b4:	4323      	orrs	r3, r4
 80067b6:	d03f      	beq.n	8006838 <scalbn+0x98>
 80067b8:	4b35      	ldr	r3, [pc, #212]	; (8006890 <scalbn+0xf0>)
 80067ba:	4629      	mov	r1, r5
 80067bc:	ee10 0a10 	vmov	r0, s0
 80067c0:	2200      	movs	r2, #0
 80067c2:	f7f9 ff39 	bl	8000638 <__aeabi_dmul>
 80067c6:	4b33      	ldr	r3, [pc, #204]	; (8006894 <scalbn+0xf4>)
 80067c8:	429e      	cmp	r6, r3
 80067ca:	4604      	mov	r4, r0
 80067cc:	460d      	mov	r5, r1
 80067ce:	da10      	bge.n	80067f2 <scalbn+0x52>
 80067d0:	a327      	add	r3, pc, #156	; (adr r3, 8006870 <scalbn+0xd0>)
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	e01f      	b.n	8006818 <scalbn+0x78>
 80067d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80067dc:	4291      	cmp	r1, r2
 80067de:	d10c      	bne.n	80067fa <scalbn+0x5a>
 80067e0:	ee10 2a10 	vmov	r2, s0
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7f9 fd70 	bl	80002cc <__adddf3>
 80067ec:	4604      	mov	r4, r0
 80067ee:	460d      	mov	r5, r1
 80067f0:	e022      	b.n	8006838 <scalbn+0x98>
 80067f2:	460b      	mov	r3, r1
 80067f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80067f8:	3936      	subs	r1, #54	; 0x36
 80067fa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80067fe:	4296      	cmp	r6, r2
 8006800:	dd0d      	ble.n	800681e <scalbn+0x7e>
 8006802:	2d00      	cmp	r5, #0
 8006804:	a11c      	add	r1, pc, #112	; (adr r1, 8006878 <scalbn+0xd8>)
 8006806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800680a:	da02      	bge.n	8006812 <scalbn+0x72>
 800680c:	a11c      	add	r1, pc, #112	; (adr r1, 8006880 <scalbn+0xe0>)
 800680e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006812:	a319      	add	r3, pc, #100	; (adr r3, 8006878 <scalbn+0xd8>)
 8006814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006818:	f7f9 ff0e 	bl	8000638 <__aeabi_dmul>
 800681c:	e7e6      	b.n	80067ec <scalbn+0x4c>
 800681e:	1872      	adds	r2, r6, r1
 8006820:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006824:	428a      	cmp	r2, r1
 8006826:	dcec      	bgt.n	8006802 <scalbn+0x62>
 8006828:	2a00      	cmp	r2, #0
 800682a:	dd08      	ble.n	800683e <scalbn+0x9e>
 800682c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006830:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006834:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006838:	ec45 4b10 	vmov	d0, r4, r5
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006842:	da08      	bge.n	8006856 <scalbn+0xb6>
 8006844:	2d00      	cmp	r5, #0
 8006846:	a10a      	add	r1, pc, #40	; (adr r1, 8006870 <scalbn+0xd0>)
 8006848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800684c:	dac0      	bge.n	80067d0 <scalbn+0x30>
 800684e:	a10e      	add	r1, pc, #56	; (adr r1, 8006888 <scalbn+0xe8>)
 8006850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006854:	e7bc      	b.n	80067d0 <scalbn+0x30>
 8006856:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800685a:	3236      	adds	r2, #54	; 0x36
 800685c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006860:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006864:	4620      	mov	r0, r4
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <scalbn+0xf8>)
 8006868:	2200      	movs	r2, #0
 800686a:	e7d5      	b.n	8006818 <scalbn+0x78>
 800686c:	f3af 8000 	nop.w
 8006870:	c2f8f359 	.word	0xc2f8f359
 8006874:	01a56e1f 	.word	0x01a56e1f
 8006878:	8800759c 	.word	0x8800759c
 800687c:	7e37e43c 	.word	0x7e37e43c
 8006880:	8800759c 	.word	0x8800759c
 8006884:	fe37e43c 	.word	0xfe37e43c
 8006888:	c2f8f359 	.word	0xc2f8f359
 800688c:	81a56e1f 	.word	0x81a56e1f
 8006890:	43500000 	.word	0x43500000
 8006894:	ffff3cb0 	.word	0xffff3cb0
 8006898:	3c900000 	.word	0x3c900000

0800689c <with_errno>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4604      	mov	r4, r0
 80068a0:	460d      	mov	r5, r1
 80068a2:	4616      	mov	r6, r2
 80068a4:	f7fe fd30 	bl	8005308 <__errno>
 80068a8:	4629      	mov	r1, r5
 80068aa:	6006      	str	r6, [r0, #0]
 80068ac:	4620      	mov	r0, r4
 80068ae:	bd70      	pop	{r4, r5, r6, pc}

080068b0 <xflow>:
 80068b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068b2:	4614      	mov	r4, r2
 80068b4:	461d      	mov	r5, r3
 80068b6:	b108      	cbz	r0, 80068bc <xflow+0xc>
 80068b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068bc:	e9cd 2300 	strd	r2, r3, [sp]
 80068c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068c4:	4620      	mov	r0, r4
 80068c6:	4629      	mov	r1, r5
 80068c8:	f7f9 feb6 	bl	8000638 <__aeabi_dmul>
 80068cc:	2222      	movs	r2, #34	; 0x22
 80068ce:	b003      	add	sp, #12
 80068d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d4:	f7ff bfe2 	b.w	800689c <with_errno>

080068d8 <__math_uflow>:
 80068d8:	b508      	push	{r3, lr}
 80068da:	2200      	movs	r2, #0
 80068dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068e0:	f7ff ffe6 	bl	80068b0 <xflow>
 80068e4:	ec41 0b10 	vmov	d0, r0, r1
 80068e8:	bd08      	pop	{r3, pc}

080068ea <__math_oflow>:
 80068ea:	b508      	push	{r3, lr}
 80068ec:	2200      	movs	r2, #0
 80068ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80068f2:	f7ff ffdd 	bl	80068b0 <xflow>
 80068f6:	ec41 0b10 	vmov	d0, r0, r1
 80068fa:	bd08      	pop	{r3, pc}

080068fc <__ieee754_sqrt>:
 80068fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006900:	ec55 4b10 	vmov	r4, r5, d0
 8006904:	4e67      	ldr	r6, [pc, #412]	; (8006aa4 <__ieee754_sqrt+0x1a8>)
 8006906:	43ae      	bics	r6, r5
 8006908:	ee10 0a10 	vmov	r0, s0
 800690c:	ee10 2a10 	vmov	r2, s0
 8006910:	4629      	mov	r1, r5
 8006912:	462b      	mov	r3, r5
 8006914:	d10d      	bne.n	8006932 <__ieee754_sqrt+0x36>
 8006916:	f7f9 fe8f 	bl	8000638 <__aeabi_dmul>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	f7f9 fcd3 	bl	80002cc <__adddf3>
 8006926:	4604      	mov	r4, r0
 8006928:	460d      	mov	r5, r1
 800692a:	ec45 4b10 	vmov	d0, r4, r5
 800692e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006932:	2d00      	cmp	r5, #0
 8006934:	dc0b      	bgt.n	800694e <__ieee754_sqrt+0x52>
 8006936:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800693a:	4326      	orrs	r6, r4
 800693c:	d0f5      	beq.n	800692a <__ieee754_sqrt+0x2e>
 800693e:	b135      	cbz	r5, 800694e <__ieee754_sqrt+0x52>
 8006940:	f7f9 fcc2 	bl	80002c8 <__aeabi_dsub>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	f7f9 ffa0 	bl	800088c <__aeabi_ddiv>
 800694c:	e7eb      	b.n	8006926 <__ieee754_sqrt+0x2a>
 800694e:	1509      	asrs	r1, r1, #20
 8006950:	f000 808d 	beq.w	8006a6e <__ieee754_sqrt+0x172>
 8006954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006958:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800695c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006960:	07c9      	lsls	r1, r1, #31
 8006962:	bf5c      	itt	pl
 8006964:	005b      	lslpl	r3, r3, #1
 8006966:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800696a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800696e:	bf58      	it	pl
 8006970:	0052      	lslpl	r2, r2, #1
 8006972:	2500      	movs	r5, #0
 8006974:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006978:	1076      	asrs	r6, r6, #1
 800697a:	0052      	lsls	r2, r2, #1
 800697c:	f04f 0e16 	mov.w	lr, #22
 8006980:	46ac      	mov	ip, r5
 8006982:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006986:	eb0c 0001 	add.w	r0, ip, r1
 800698a:	4298      	cmp	r0, r3
 800698c:	bfde      	ittt	le
 800698e:	1a1b      	suble	r3, r3, r0
 8006990:	eb00 0c01 	addle.w	ip, r0, r1
 8006994:	186d      	addle	r5, r5, r1
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	f1be 0e01 	subs.w	lr, lr, #1
 800699c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80069a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80069a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80069a8:	d1ed      	bne.n	8006986 <__ieee754_sqrt+0x8a>
 80069aa:	4674      	mov	r4, lr
 80069ac:	2720      	movs	r7, #32
 80069ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80069b2:	4563      	cmp	r3, ip
 80069b4:	eb01 000e 	add.w	r0, r1, lr
 80069b8:	dc02      	bgt.n	80069c0 <__ieee754_sqrt+0xc4>
 80069ba:	d113      	bne.n	80069e4 <__ieee754_sqrt+0xe8>
 80069bc:	4290      	cmp	r0, r2
 80069be:	d811      	bhi.n	80069e4 <__ieee754_sqrt+0xe8>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	eb00 0e01 	add.w	lr, r0, r1
 80069c6:	da57      	bge.n	8006a78 <__ieee754_sqrt+0x17c>
 80069c8:	f1be 0f00 	cmp.w	lr, #0
 80069cc:	db54      	blt.n	8006a78 <__ieee754_sqrt+0x17c>
 80069ce:	f10c 0801 	add.w	r8, ip, #1
 80069d2:	eba3 030c 	sub.w	r3, r3, ip
 80069d6:	4290      	cmp	r0, r2
 80069d8:	bf88      	it	hi
 80069da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80069de:	1a12      	subs	r2, r2, r0
 80069e0:	440c      	add	r4, r1
 80069e2:	46c4      	mov	ip, r8
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	3f01      	subs	r7, #1
 80069e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80069ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80069f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80069f4:	d1dd      	bne.n	80069b2 <__ieee754_sqrt+0xb6>
 80069f6:	4313      	orrs	r3, r2
 80069f8:	d01b      	beq.n	8006a32 <__ieee754_sqrt+0x136>
 80069fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006aa8 <__ieee754_sqrt+0x1ac>
 80069fe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006aac <__ieee754_sqrt+0x1b0>
 8006a02:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a06:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a0a:	f7f9 fc5d 	bl	80002c8 <__aeabi_dsub>
 8006a0e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4640      	mov	r0, r8
 8006a18:	4649      	mov	r1, r9
 8006a1a:	f7fa f889 	bl	8000b30 <__aeabi_dcmple>
 8006a1e:	b140      	cbz	r0, 8006a32 <__ieee754_sqrt+0x136>
 8006a20:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a24:	e9da 0100 	ldrd	r0, r1, [sl]
 8006a28:	e9db 2300 	ldrd	r2, r3, [fp]
 8006a2c:	d126      	bne.n	8006a7c <__ieee754_sqrt+0x180>
 8006a2e:	3501      	adds	r5, #1
 8006a30:	463c      	mov	r4, r7
 8006a32:	106a      	asrs	r2, r5, #1
 8006a34:	0863      	lsrs	r3, r4, #1
 8006a36:	07e9      	lsls	r1, r5, #31
 8006a38:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006a3c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006a40:	bf48      	it	mi
 8006a42:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006a46:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006a4a:	461c      	mov	r4, r3
 8006a4c:	e76d      	b.n	800692a <__ieee754_sqrt+0x2e>
 8006a4e:	0ad3      	lsrs	r3, r2, #11
 8006a50:	3815      	subs	r0, #21
 8006a52:	0552      	lsls	r2, r2, #21
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0fa      	beq.n	8006a4e <__ieee754_sqrt+0x152>
 8006a58:	02dc      	lsls	r4, r3, #11
 8006a5a:	d50a      	bpl.n	8006a72 <__ieee754_sqrt+0x176>
 8006a5c:	f1c1 0420 	rsb	r4, r1, #32
 8006a60:	fa22 f404 	lsr.w	r4, r2, r4
 8006a64:	1e4d      	subs	r5, r1, #1
 8006a66:	408a      	lsls	r2, r1
 8006a68:	4323      	orrs	r3, r4
 8006a6a:	1b41      	subs	r1, r0, r5
 8006a6c:	e772      	b.n	8006954 <__ieee754_sqrt+0x58>
 8006a6e:	4608      	mov	r0, r1
 8006a70:	e7f0      	b.n	8006a54 <__ieee754_sqrt+0x158>
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	3101      	adds	r1, #1
 8006a76:	e7ef      	b.n	8006a58 <__ieee754_sqrt+0x15c>
 8006a78:	46e0      	mov	r8, ip
 8006a7a:	e7aa      	b.n	80069d2 <__ieee754_sqrt+0xd6>
 8006a7c:	f7f9 fc26 	bl	80002cc <__adddf3>
 8006a80:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4640      	mov	r0, r8
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	f7fa f846 	bl	8000b1c <__aeabi_dcmplt>
 8006a90:	b120      	cbz	r0, 8006a9c <__ieee754_sqrt+0x1a0>
 8006a92:	1ca0      	adds	r0, r4, #2
 8006a94:	bf08      	it	eq
 8006a96:	3501      	addeq	r5, #1
 8006a98:	3402      	adds	r4, #2
 8006a9a:	e7ca      	b.n	8006a32 <__ieee754_sqrt+0x136>
 8006a9c:	3401      	adds	r4, #1
 8006a9e:	f024 0401 	bic.w	r4, r4, #1
 8006aa2:	e7c6      	b.n	8006a32 <__ieee754_sqrt+0x136>
 8006aa4:	7ff00000 	.word	0x7ff00000
 8006aa8:	20000060 	.word	0x20000060
 8006aac:	20000068 	.word	0x20000068

08006ab0 <_init>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr

08006abc <_fini>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr
