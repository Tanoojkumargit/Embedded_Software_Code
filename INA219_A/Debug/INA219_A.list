
INA219_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005040  08005040  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005048  08005048  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  080050b8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080050b8  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb79  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e61  00000000  00000000  0002bc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002dab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000826  00000000  00000000  0002e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002280a  00000000  00000000  0002ed66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fde0  00000000  00000000  00051570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccaa1  00000000  00000000  00061350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033e8  00000000  00000000  0012ddf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001311dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f7c 	.word	0x08004f7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004f7c 	.word	0x08004f7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295
 800093c:	f04f 30ff 	movne.w	r0, #4294967295
 8000940:	f000 b970 	b.w	8000c24 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9e08      	ldr	r6, [sp, #32]
 8000962:	460d      	mov	r5, r1
 8000964:	4604      	mov	r4, r0
 8000966:	460f      	mov	r7, r1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d14a      	bne.n	8000a02 <__udivmoddi4+0xa6>
 800096c:	428a      	cmp	r2, r1
 800096e:	4694      	mov	ip, r2
 8000970:	d965      	bls.n	8000a3e <__udivmoddi4+0xe2>
 8000972:	fab2 f382 	clz	r3, r2
 8000976:	b143      	cbz	r3, 800098a <__udivmoddi4+0x2e>
 8000978:	fa02 fc03 	lsl.w	ip, r2, r3
 800097c:	f1c3 0220 	rsb	r2, r3, #32
 8000980:	409f      	lsls	r7, r3
 8000982:	fa20 f202 	lsr.w	r2, r0, r2
 8000986:	4317      	orrs	r7, r2
 8000988:	409c      	lsls	r4, r3
 800098a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800098e:	fa1f f58c 	uxth.w	r5, ip
 8000992:	fbb7 f1fe 	udiv	r1, r7, lr
 8000996:	0c22      	lsrs	r2, r4, #16
 8000998:	fb0e 7711 	mls	r7, lr, r1, r7
 800099c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009a0:	fb01 f005 	mul.w	r0, r1, r5
 80009a4:	4290      	cmp	r0, r2
 80009a6:	d90a      	bls.n	80009be <__udivmoddi4+0x62>
 80009a8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ac:	f101 37ff 	add.w	r7, r1, #4294967295
 80009b0:	f080 811c 	bcs.w	8000bec <__udivmoddi4+0x290>
 80009b4:	4290      	cmp	r0, r2
 80009b6:	f240 8119 	bls.w	8000bec <__udivmoddi4+0x290>
 80009ba:	3902      	subs	r1, #2
 80009bc:	4462      	add	r2, ip
 80009be:	1a12      	subs	r2, r2, r0
 80009c0:	b2a4      	uxth	r4, r4
 80009c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ce:	fb00 f505 	mul.w	r5, r0, r5
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	d90a      	bls.n	80009ec <__udivmoddi4+0x90>
 80009d6:	eb1c 0404 	adds.w	r4, ip, r4
 80009da:	f100 32ff 	add.w	r2, r0, #4294967295
 80009de:	f080 8107 	bcs.w	8000bf0 <__udivmoddi4+0x294>
 80009e2:	42a5      	cmp	r5, r4
 80009e4:	f240 8104 	bls.w	8000bf0 <__udivmoddi4+0x294>
 80009e8:	4464      	add	r4, ip
 80009ea:	3802      	subs	r0, #2
 80009ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009f0:	1b64      	subs	r4, r4, r5
 80009f2:	2100      	movs	r1, #0
 80009f4:	b11e      	cbz	r6, 80009fe <__udivmoddi4+0xa2>
 80009f6:	40dc      	lsrs	r4, r3
 80009f8:	2300      	movs	r3, #0
 80009fa:	e9c6 4300 	strd	r4, r3, [r6]
 80009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0xbc>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	f000 80ed 	beq.w	8000be6 <__udivmoddi4+0x28a>
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a12:	4608      	mov	r0, r1
 8000a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a18:	fab3 f183 	clz	r1, r3
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d149      	bne.n	8000ab4 <__udivmoddi4+0x158>
 8000a20:	42ab      	cmp	r3, r5
 8000a22:	d302      	bcc.n	8000a2a <__udivmoddi4+0xce>
 8000a24:	4282      	cmp	r2, r0
 8000a26:	f200 80f8 	bhi.w	8000c1a <__udivmoddi4+0x2be>
 8000a2a:	1a84      	subs	r4, r0, r2
 8000a2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a30:	2001      	movs	r0, #1
 8000a32:	4617      	mov	r7, r2
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d0e2      	beq.n	80009fe <__udivmoddi4+0xa2>
 8000a38:	e9c6 4700 	strd	r4, r7, [r6]
 8000a3c:	e7df      	b.n	80009fe <__udivmoddi4+0xa2>
 8000a3e:	b902      	cbnz	r2, 8000a42 <__udivmoddi4+0xe6>
 8000a40:	deff      	udf	#255	; 0xff
 8000a42:	fab2 f382 	clz	r3, r2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8090 	bne.w	8000b6c <__udivmoddi4+0x210>
 8000a4c:	1a8a      	subs	r2, r1, r2
 8000a4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a52:	fa1f fe8c 	uxth.w	lr, ip
 8000a56:	2101      	movs	r1, #1
 8000a58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a60:	0c22      	lsrs	r2, r4, #16
 8000a62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a66:	fb0e f005 	mul.w	r0, lr, r5
 8000a6a:	4290      	cmp	r0, r2
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0x124>
 8000a6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a76:	d202      	bcs.n	8000a7e <__udivmoddi4+0x122>
 8000a78:	4290      	cmp	r0, r2
 8000a7a:	f200 80cb 	bhi.w	8000c14 <__udivmoddi4+0x2b8>
 8000a7e:	4645      	mov	r5, r8
 8000a80:	1a12      	subs	r2, r2, r0
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a88:	fb07 2210 	mls	r2, r7, r0, r2
 8000a8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a90:	fb0e fe00 	mul.w	lr, lr, r0
 8000a94:	45a6      	cmp	lr, r4
 8000a96:	d908      	bls.n	8000aaa <__udivmoddi4+0x14e>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa0:	d202      	bcs.n	8000aa8 <__udivmoddi4+0x14c>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f200 80bb 	bhi.w	8000c1e <__udivmoddi4+0x2c2>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	eba4 040e 	sub.w	r4, r4, lr
 8000aae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ab2:	e79f      	b.n	80009f4 <__udivmoddi4+0x98>
 8000ab4:	f1c1 0720 	rsb	r7, r1, #32
 8000ab8:	408b      	lsls	r3, r1
 8000aba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000abe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ac2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ac6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aca:	40fd      	lsrs	r5, r7
 8000acc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ad0:	4323      	orrs	r3, r4
 8000ad2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ad6:	fa1f fe8c 	uxth.w	lr, ip
 8000ada:	fb09 5518 	mls	r5, r9, r8, r5
 8000ade:	0c1c      	lsrs	r4, r3, #16
 8000ae0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ae4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ae8:	42a5      	cmp	r5, r4
 8000aea:	fa02 f201 	lsl.w	r2, r2, r1
 8000aee:	fa00 f001 	lsl.w	r0, r0, r1
 8000af2:	d90b      	bls.n	8000b0c <__udivmoddi4+0x1b0>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000afc:	f080 8088 	bcs.w	8000c10 <__udivmoddi4+0x2b4>
 8000b00:	42a5      	cmp	r5, r4
 8000b02:	f240 8085 	bls.w	8000c10 <__udivmoddi4+0x2b4>
 8000b06:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0a:	4464      	add	r4, ip
 8000b0c:	1b64      	subs	r4, r4, r5
 8000b0e:	b29d      	uxth	r5, r3
 8000b10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b14:	fb09 4413 	mls	r4, r9, r3, r4
 8000b18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x1da>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b2c:	d26c      	bcs.n	8000c08 <__udivmoddi4+0x2ac>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	d96a      	bls.n	8000c08 <__udivmoddi4+0x2ac>
 8000b32:	3b02      	subs	r3, #2
 8000b34:	4464      	add	r4, ip
 8000b36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b3e:	eba4 040e 	sub.w	r4, r4, lr
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	46c8      	mov	r8, r9
 8000b46:	46ae      	mov	lr, r5
 8000b48:	d356      	bcc.n	8000bf8 <__udivmoddi4+0x29c>
 8000b4a:	d053      	beq.n	8000bf4 <__udivmoddi4+0x298>
 8000b4c:	b156      	cbz	r6, 8000b64 <__udivmoddi4+0x208>
 8000b4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b52:	eb64 040e 	sbc.w	r4, r4, lr
 8000b56:	fa04 f707 	lsl.w	r7, r4, r7
 8000b5a:	40ca      	lsrs	r2, r1
 8000b5c:	40cc      	lsrs	r4, r1
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	e9c6 7400 	strd	r7, r4, [r6]
 8000b64:	4618      	mov	r0, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6c:	f1c3 0120 	rsb	r1, r3, #32
 8000b70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b74:	fa20 f201 	lsr.w	r2, r0, r1
 8000b78:	fa25 f101 	lsr.w	r1, r5, r1
 8000b7c:	409d      	lsls	r5, r3
 8000b7e:	432a      	orrs	r2, r5
 8000b80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b90:	0c11      	lsrs	r1, r2, #16
 8000b92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b96:	fb00 f50e 	mul.w	r5, r0, lr
 8000b9a:	428d      	cmp	r5, r1
 8000b9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ba0:	d908      	bls.n	8000bb4 <__udivmoddi4+0x258>
 8000ba2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000baa:	d22f      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bac:	428d      	cmp	r5, r1
 8000bae:	d92d      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1b49      	subs	r1, r1, r5
 8000bb6:	b292      	uxth	r2, r2
 8000bb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000bc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bc8:	4291      	cmp	r1, r2
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x282>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd4:	d216      	bcs.n	8000c04 <__udivmoddi4+0x2a8>
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d914      	bls.n	8000c04 <__udivmoddi4+0x2a8>
 8000bda:	3d02      	subs	r5, #2
 8000bdc:	4462      	add	r2, ip
 8000bde:	1a52      	subs	r2, r2, r1
 8000be0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000be4:	e738      	b.n	8000a58 <__udivmoddi4+0xfc>
 8000be6:	4631      	mov	r1, r6
 8000be8:	4630      	mov	r0, r6
 8000bea:	e708      	b.n	80009fe <__udivmoddi4+0xa2>
 8000bec:	4639      	mov	r1, r7
 8000bee:	e6e6      	b.n	80009be <__udivmoddi4+0x62>
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	e6fb      	b.n	80009ec <__udivmoddi4+0x90>
 8000bf4:	4548      	cmp	r0, r9
 8000bf6:	d2a9      	bcs.n	8000b4c <__udivmoddi4+0x1f0>
 8000bf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c00:	3b01      	subs	r3, #1
 8000c02:	e7a3      	b.n	8000b4c <__udivmoddi4+0x1f0>
 8000c04:	4645      	mov	r5, r8
 8000c06:	e7ea      	b.n	8000bde <__udivmoddi4+0x282>
 8000c08:	462b      	mov	r3, r5
 8000c0a:	e794      	b.n	8000b36 <__udivmoddi4+0x1da>
 8000c0c:	4640      	mov	r0, r8
 8000c0e:	e7d1      	b.n	8000bb4 <__udivmoddi4+0x258>
 8000c10:	46d0      	mov	r8, sl
 8000c12:	e77b      	b.n	8000b0c <__udivmoddi4+0x1b0>
 8000c14:	3d02      	subs	r5, #2
 8000c16:	4462      	add	r2, ip
 8000c18:	e732      	b.n	8000a80 <__udivmoddi4+0x124>
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	e70a      	b.n	8000a34 <__udivmoddi4+0xd8>
 8000c1e:	4464      	add	r4, ip
 8000c20:	3802      	subs	r0, #2
 8000c22:	e742      	b.n	8000aaa <__udivmoddi4+0x14e>

08000c24 <__aeabi_idiv0>:
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	4812      	ldr	r0, [pc, #72]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000cb4:	f000 ff18 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cbe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000cd0:	f000 fd76 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000cec:	f000 fd68 	bl	80017c0 <HAL_GPIO_Init>

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020800 	.word	0x40020800

08000d04 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <MX_I2C1_Init+0x54>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_I2C1_Init+0x58>)
 8000d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_I2C1_Init+0x50>)
 8000d42:	f000 feeb 	bl	8001b1c <HAL_I2C_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d4c:	f000 fa12 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000084 	.word	0x20000084
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	000186a0 	.word	0x000186a0

08000d60 <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	; 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a42      	ldr	r2, [pc, #264]	; (8000e88 <HAL_I2C_MspInit+0x128>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12d      	bne.n	8000dde <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a40      	ldr	r2, [pc, #256]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da4:	2312      	movs	r3, #18
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db0:	2304      	movs	r3, #4
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4835      	ldr	r0, [pc, #212]	; (8000e90 <HAL_I2C_MspInit+0x130>)
 8000dbc:	f000 fd00 	bl	80017c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a30      	ldr	r2, [pc, #192]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ddc:	e050      	b.n	8000e80 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a2c      	ldr	r2, [pc, #176]	; (8000e94 <HAL_I2C_MspInit+0x134>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d14b      	bne.n	8000e80 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a26      	ldr	r2, [pc, #152]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e26:	2312      	movs	r3, #18
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e32:	2304      	movs	r3, #4
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4814      	ldr	r0, [pc, #80]	; (8000e90 <HAL_I2C_MspInit+0x130>)
 8000e3e:	f000 fcbf 	bl	80017c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e54:	2304      	movs	r3, #4
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <HAL_I2C_MspInit+0x138>)
 8000e60:	f000 fcae 	bl	80017c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000e6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e72:	6413      	str	r3, [r2, #64]	; 0x40
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_I2C_MspInit+0x12c>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
}
 8000e80:	bf00      	nop
 8000e82:	3730      	adds	r7, #48	; 0x30
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40005800 	.word	0x40005800
 8000e98:	40020800 	.word	0x40020800

08000e9c <INA219_Init>:
float get_voltage_V(uint16_t value);
void SystemClock_Config(void);
void Error_Handler(void);


void INA219_Init(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af02      	add	r7, sp, #8
    uint8_t config[3];
    // Configuration register address
    config[0] = 0x00;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	713b      	strb	r3, [r7, #4]
    // Configuration register value to set +/-320mV range, 12-bit bus res, 12-bit shunt res, and continuous mode
    config[1] = 0x1C; // MSB
 8000ea6:	231c      	movs	r3, #28
 8000ea8:	717b      	strb	r3, [r7, #5]
    config[2] = 0x1F; // LSB
 8000eaa:	231f      	movs	r3, #31
 8000eac:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDRESS, config, 3, HAL_MAX_DELAY);
 8000eae:	1d3a      	adds	r2, r7, #4
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <INA219_Init+0x2c>)
 8000ebc:	f000 ff72 	bl	8001da4 <HAL_I2C_Master_Transmit>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000084 	.word	0x20000084

08000ecc <main>:



int main(void) {
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b0c2      	sub	sp, #264	; 0x108
 8000ed0:	af04      	add	r7, sp, #16
 8000ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    HAL_Init();
 8000eda:	f000 faf5 	bl	80014c8 <HAL_Init>
    INA219_Init();
 8000ede:	f7ff ffdd 	bl	8000e9c <INA219_Init>
    SystemClock_Config();
 8000ee2:	f000 f8d9 	bl	8001098 <SystemClock_Config>
    MX_GPIO_Init();
 8000ee6:	f7ff fe9f 	bl	8000c28 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000eea:	f7ff ff0b 	bl	8000d04 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000eee:	f000 fa4f 	bl	8001390 <MX_USART2_UART_Init>
        HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDRESS, config, 3, HAL_MAX_DELAY);
    }


    while (1) {
        uint16_t current_raw = read_INA219(INA219_REG_CURRENT);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f000 f85e 	bl	8000fb4 <read_INA219>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
        uint16_t voltage_raw = read_INA219(INA219_REG_BUS_VOLTAGE);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f000 f858 	bl	8000fb4 <read_INA219>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4

        // Debug output to UART
        char debug_msg[100];
        snprintf(debug_msg, sizeof(debug_msg), "Debug - Raw Current: %u, Raw Voltage: %u\n", current_raw, voltage_raw);
 8000f0a:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8000f0e:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8000f12:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <main+0xdc>)
 8000f1c:	2164      	movs	r1, #100	; 0x64
 8000f1e:	f003 f923 	bl	8004168 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000f22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff f972 	bl	8000210 <strlen>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	481c      	ldr	r0, [pc, #112]	; (8000fac <main+0xe0>)
 8000f3a:	f002 fc3b 	bl	80037b4 <HAL_UART_Transmit>

        float current = get_current_mA(current_raw);
 8000f3e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f864 	bl	8001010 <get_current_mA>
 8000f48:	ed87 0a3c 	vstr	s0, [r7, #240]	; 0xf0
        float voltage = get_voltage_V(voltage_raw);
 8000f4c:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f87d 	bl	8001050 <get_voltage_V>
 8000f56:	ed87 0a3b 	vstr	s0, [r7, #236]	; 0xec

        char buffer[64];
        snprintf(buffer, sizeof(buffer), "Voltage: %.2f V, Current: %.2f mA\r\n", voltage, current);
 8000f5a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000f5e:	f7ff fc3d 	bl	80007dc <__aeabi_f2d>
 8000f62:	4604      	mov	r4, r0
 8000f64:	460d      	mov	r5, r1
 8000f66:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000f6a:	f7ff fc37 	bl	80007dc <__aeabi_f2d>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	1d38      	adds	r0, r7, #4
 8000f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f78:	e9cd 4500 	strd	r4, r5, [sp]
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <main+0xe4>)
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	f003 f8f2 	bl	8004168 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f942 	bl	8000210 <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	1d39      	adds	r1, r7, #4
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <main+0xe0>)
 8000f98:	f002 fc0c 	bl	80037b4 <HAL_UART_Transmit>

        HAL_Delay(1000);
 8000f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa0:	f000 fb04 	bl	80015ac <HAL_Delay>
    while (1) {
 8000fa4:	e7a5      	b.n	8000ef2 <main+0x26>
 8000fa6:	bf00      	nop
 8000fa8:	08004f94 	.word	0x08004f94
 8000fac:	200000dc 	.word	0x200000dc
 8000fb0:	08004fc0 	.word	0x08004fc0

08000fb4 <read_INA219>:
    }

}

uint16_t read_INA219(uint8_t reg) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[2];
    if (HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2302      	movs	r3, #2
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <read_INA219+0x50>)
 8000fd8:	f000 ffe2 	bl	8001fa0 <HAL_I2C_Mem_Read>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <read_INA219+0x38>
        printf("I2C read error!\n");
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <read_INA219+0x54>)
 8000fe4:	f003 f8b8 	bl	8004158 <puts>
        return 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e007      	b.n	8000ffc <read_INA219+0x48>
    }
    return (buf[0] << 8) | buf[1];
 8000fec:	7b3b      	ldrb	r3, [r7, #12]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7b7b      	ldrb	r3, [r7, #13]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000084 	.word	0x20000084
 8001008:	08004fe4 	.word	0x08004fe4
 800100c:	00000000 	.word	0x00000000

08001010 <get_current_mA>:

float get_current_mA(uint16_t value) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
    return value * 0.1;  // Adjust according to your calibration
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fbcb 	bl	80007b8 <__aeabi_i2d>
 8001022:	a309      	add	r3, pc, #36	; (adr r3, 8001048 <get_current_mA+0x38>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff f94a 	bl	80002c0 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fc2a 	bl	800088c <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	ee07 3a90 	vmov	s15, r3
}
 800103e:	eeb0 0a67 	vmov.f32	s0, s15
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	9999999a 	.word	0x9999999a
 800104c:	3fb99999 	.word	0x3fb99999

08001050 <get_voltage_V>:

float get_voltage_V(uint16_t value) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
    return (value >> 3) * 0.004;  // Based on datasheet
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	b29b      	uxth	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fba9 	bl	80007b8 <__aeabi_i2d>
 8001066:	a30a      	add	r3, pc, #40	; (adr r3, 8001090 <get_voltage_V+0x40>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff f928 	bl	80002c0 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fc08 	bl	800088c <__aeabi_d2f>
 800107c:	4603      	mov	r3, r0
 800107e:	ee07 3a90 	vmov	s15, r3
}
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	f3af 8000 	nop.w
 8001090:	d2f1a9fc 	.word	0xd2f1a9fc
 8001094:	3f70624d 	.word	0x3f70624d

08001098 <SystemClock_Config>:

void SystemClock_Config(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	2234      	movs	r2, #52	; 0x34
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 f96a 	bl	8004380 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <SystemClock_Config+0xd4>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a29      	ldr	r2, [pc, #164]	; (800116c <SystemClock_Config+0xd4>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <SystemClock_Config+0xd4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <SystemClock_Config+0xd8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e4:	4a22      	ldr	r2, [pc, #136]	; (8001170 <SystemClock_Config+0xd8>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <SystemClock_Config+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2310      	movs	r3, #16
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001108:	2300      	movs	r3, #0
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 800110c:	2310      	movs	r3, #16
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001110:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001114:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001116:	2304      	movs	r3, #4
 8001118:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4618      	mov	r0, r3
 8001128:	f002 f856 	bl	80031d8 <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x9e>
        Error_Handler();
 8001132:	f000 f81f 	bl	8001174 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	230f      	movs	r3, #15
 8001138:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113a:	2302      	movs	r3, #2
 800113c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2102      	movs	r1, #2
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fcf6 	bl	8002b44 <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xca>
        Error_Handler();
 800115e:	f000 f809 	bl	8001174 <Error_Handler>
    }
}
 8001162:	bf00      	nop
 8001164:	3750      	adds	r7, #80	; 0x50
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <Error_Handler>:

void Error_Handler(void) {
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
    __disable_irq();
    while (1) {
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_MspInit+0x4c>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x4c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011be:	2007      	movs	r0, #7
 80011c0:	f000 faca 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121c:	f000 f9a6 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e00a      	b.n	800124c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001236:	f3af 8000 	nop.w
 800123a:	4601      	mov	r1, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	60ba      	str	r2, [r7, #8]
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf0      	blt.n	8001236 <_read+0x12>
  }

  return len;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e009      	b.n	8001284 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf1      	blt.n	8001270 <_write+0x12>
  }
  return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_close>:

int _close(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012be:	605a      	str	r2, [r3, #4]
  return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_isatty>:

int _isatty(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f003 f874 	bl	800441c <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20020000 	.word	0x20020000
 8001360:	00000400 	.word	0x00000400
 8001364:	200000d8 	.word	0x200000d8
 8001368:	20000278 	.word	0x20000278

0800136c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <SystemInit+0x20>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <SystemInit+0x20>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_USART2_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013c8:	f002 f9a4 	bl	8003714 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d2:	f7ff fecf 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000dc 	.word	0x200000dc
 80013e0:	40004400 	.word	0x40004400

080013e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a19      	ldr	r2, [pc, #100]	; (8001468 <HAL_UART_MspInit+0x84>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d12b      	bne.n	800145e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_UART_MspInit+0x88>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a17      	ldr	r2, [pc, #92]	; (800146c <HAL_UART_MspInit+0x88>)
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_UART_MspInit+0x88>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_UART_MspInit+0x88>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a10      	ldr	r2, [pc, #64]	; (800146c <HAL_UART_MspInit+0x88>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_UART_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800143e:	230c      	movs	r3, #12
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144e:	2307      	movs	r3, #7
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <HAL_UART_MspInit+0x8c>)
 800145a:	f000 f9b1 	bl	80017c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40004400 	.word	0x40004400
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000

08001474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001478:	f7ff ff78 	bl	800136c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014a2:	f002 ffc1 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a6:	f7ff fd11 	bl	8000ecc <main>
  bx  lr    
 80014aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014b8:	08005050 	.word	0x08005050
  ldr r2, =_sbss
 80014bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014c0:	20000274 	.word	0x20000274

080014c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <HAL_Init+0x40>)
 80014d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_Init+0x40>)
 80014de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_Init+0x40>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f931 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 f808 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff fe40 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f93b 	bl	80017a6 <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f911 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	20000124 	.word	0x20000124

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000124 	.word	0x20000124

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff47 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff5c 	bl	800163c <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff8e 	bl	80016ac <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffb0 	bl	8001714 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	e165      	b.n	8001aa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	f040 8154 	bne.w	8001aa2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d005      	beq.n	8001812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	2b02      	cmp	r3, #2
 8001810:	d130      	bne.n	8001874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001848:	2201      	movs	r2, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 0201 	and.w	r2, r3, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b03      	cmp	r3, #3
 800187e:	d017      	beq.n	80018b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d123      	bne.n	8001904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	69b9      	ldr	r1, [r7, #24]
 8001900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0203 	and.w	r2, r3, #3
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80ae 	beq.w	8001aa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b5a      	ldr	r3, [pc, #360]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001962:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <HAL_GPIO_Init+0x304>)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	220f      	movs	r2, #15
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4f      	ldr	r2, [pc, #316]	; (8001ac8 <HAL_GPIO_Init+0x308>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d025      	beq.n	80019da <HAL_GPIO_Init+0x21a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4e      	ldr	r2, [pc, #312]	; (8001acc <HAL_GPIO_Init+0x30c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01f      	beq.n	80019d6 <HAL_GPIO_Init+0x216>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4d      	ldr	r2, [pc, #308]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d019      	beq.n	80019d2 <HAL_GPIO_Init+0x212>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x314>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_GPIO_Init+0x20e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_GPIO_Init+0x318>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00d      	beq.n	80019ca <HAL_GPIO_Init+0x20a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x31c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d007      	beq.n	80019c6 <HAL_GPIO_Init+0x206>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_GPIO_Init+0x202>
 80019be:	2306      	movs	r3, #6
 80019c0:	e00c      	b.n	80019dc <HAL_GPIO_Init+0x21c>
 80019c2:	2307      	movs	r3, #7
 80019c4:	e00a      	b.n	80019dc <HAL_GPIO_Init+0x21c>
 80019c6:	2305      	movs	r3, #5
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x21c>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x21c>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x21c>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x21c>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x21c>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4935      	ldr	r1, [pc, #212]	; (8001ac4 <HAL_GPIO_Init+0x304>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1e:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9c:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f ae96 	bls.w	80017dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e12b      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff f90c 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	; 0x24
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b80:	f001 f8d2 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8001b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a81      	ldr	r2, [pc, #516]	; (8001d90 <HAL_I2C_Init+0x274>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d807      	bhi.n	8001ba0 <HAL_I2C_Init+0x84>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a80      	ldr	r2, [pc, #512]	; (8001d94 <HAL_I2C_Init+0x278>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	e006      	b.n	8001bae <HAL_I2C_Init+0x92>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a7d      	ldr	r2, [pc, #500]	; (8001d98 <HAL_I2C_Init+0x27c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0e7      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4a78      	ldr	r2, [pc, #480]	; (8001d9c <HAL_I2C_Init+0x280>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0c9b      	lsrs	r3, r3, #18
 8001bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a6a      	ldr	r2, [pc, #424]	; (8001d90 <HAL_I2C_Init+0x274>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d802      	bhi.n	8001bf0 <HAL_I2C_Init+0xd4>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3301      	adds	r3, #1
 8001bee:	e009      	b.n	8001c04 <HAL_I2C_Init+0xe8>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	4a69      	ldr	r2, [pc, #420]	; (8001da0 <HAL_I2C_Init+0x284>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	3301      	adds	r3, #1
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	495c      	ldr	r1, [pc, #368]	; (8001d90 <HAL_I2C_Init+0x274>)
 8001c20:	428b      	cmp	r3, r1
 8001c22:	d819      	bhi.n	8001c58 <HAL_I2C_Init+0x13c>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e59      	subs	r1, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c32:	1c59      	adds	r1, r3, #1
 8001c34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c38:	400b      	ands	r3, r1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_I2C_Init+0x138>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e59      	subs	r1, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c52:	e051      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e04f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d111      	bne.n	8001c84 <HAL_I2C_Init+0x168>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1e58      	subs	r0, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e012      	b.n	8001caa <HAL_I2C_Init+0x18e>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	0099      	lsls	r1, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Init+0x196>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e022      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_I2C_Init+0x1bc>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1e58      	subs	r0, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd6:	e00f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e58      	subs	r0, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	0099      	lsls	r1, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	6809      	ldr	r1, [r1, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6911      	ldr	r1, [r2, #16]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68d2      	ldr	r2, [r2, #12]
 8001d32:	4311      	orrs	r1, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	000186a0 	.word	0x000186a0
 8001d94:	001e847f 	.word	0x001e847f
 8001d98:	003d08ff 	.word	0x003d08ff
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	10624dd3 	.word	0x10624dd3

08001da4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	461a      	mov	r2, r3
 8001db0:	460b      	mov	r3, r1
 8001db2:	817b      	strh	r3, [r7, #10]
 8001db4:	4613      	mov	r3, r2
 8001db6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff fbec 	bl	8001594 <HAL_GetTick>
 8001dbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	f040 80e0 	bne.w	8001f8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2319      	movs	r3, #25
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4970      	ldr	r1, [pc, #448]	; (8001f98 <HAL_I2C_Master_Transmit+0x1f4>)
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fc7e 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
 8001de4:	e0d3      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_I2C_Master_Transmit+0x50>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e0cc      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d007      	beq.n	8001e1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2221      	movs	r2, #33	; 0x21
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2210      	movs	r2, #16
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	893a      	ldrh	r2, [r7, #8]
 8001e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4a50      	ldr	r2, [pc, #320]	; (8001f9c <HAL_I2C_Master_Transmit+0x1f8>)
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e5c:	8979      	ldrh	r1, [r7, #10]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	6a3a      	ldr	r2, [r7, #32]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 face 	bl	8002404 <I2C_MasterRequestWrite>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e08d      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e88:	e066      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fd3c 	bl	800290c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d107      	bne.n	8001eb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e06b      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11b      	bne.n	8001f2c <HAL_I2C_Master_Transmit+0x188>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d017      	beq.n	8001f2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	6a39      	ldr	r1, [r7, #32]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fd33 	bl	800299c <I2C_WaitOnBTFFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d107      	bne.n	8001f54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e01a      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d194      	bne.n	8001e8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	00100002 	.word	0x00100002
 8001f9c:	ffff0000 	.word	0xffff0000

08001fa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	4608      	mov	r0, r1
 8001faa:	4611      	mov	r1, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	817b      	strh	r3, [r7, #10]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	813b      	strh	r3, [r7, #8]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fba:	f7ff faeb 	bl	8001594 <HAL_GetTick>
 8001fbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	f040 8214 	bne.w	80023f6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2319      	movs	r3, #25
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	497b      	ldr	r1, [pc, #492]	; (80021c4 <HAL_I2C_Mem_Read+0x224>)
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fb7d 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e207      	b.n	80023f8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_I2C_Mem_Read+0x56>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e200      	b.n	80023f8 <HAL_I2C_Mem_Read+0x458>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d007      	beq.n	800201c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2222      	movs	r2, #34	; 0x22
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2240      	movs	r2, #64	; 0x40
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_I2C_Mem_Read+0x228>)
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800205e:	88f8      	ldrh	r0, [r7, #6]
 8002060:	893a      	ldrh	r2, [r7, #8]
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	4603      	mov	r3, r0
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fa4a 	bl	8002508 <I2C_RequestMemoryRead>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e1bc      	b.n	80023f8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	d113      	bne.n	80020ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	623b      	str	r3, [r7, #32]
 800209a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e190      	b.n	80023d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d11b      	bne.n	80020ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e170      	b.n	80023d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d11b      	bne.n	800212e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002104:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002114:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	e150      	b.n	80023d0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002144:	e144      	b.n	80023d0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	2b03      	cmp	r3, #3
 800214c:	f200 80f1 	bhi.w	8002332 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	2b01      	cmp	r3, #1
 8002156:	d123      	bne.n	80021a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fc65 	bl	8002a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e145      	b.n	80023f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800219e:	e117      	b.n	80023d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d14e      	bne.n	8002246 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ae:	2200      	movs	r2, #0
 80021b0:	4906      	ldr	r1, [pc, #24]	; (80021cc <HAL_I2C_Mem_Read+0x22c>)
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fa90 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e11a      	b.n	80023f8 <HAL_I2C_Mem_Read+0x458>
 80021c2:	bf00      	nop
 80021c4:	00100002 	.word	0x00100002
 80021c8:	ffff0000 	.word	0xffff0000
 80021cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002244:	e0c4      	b.n	80023d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	2200      	movs	r2, #0
 800224e:	496c      	ldr	r1, [pc, #432]	; (8002400 <HAL_I2C_Mem_Read+0x460>)
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fa41 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0cb      	b.n	80023f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a8:	2200      	movs	r2, #0
 80022aa:	4955      	ldr	r1, [pc, #340]	; (8002400 <HAL_I2C_Mem_Read+0x460>)
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fa13 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e09d      	b.n	80023f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002330:	e04e      	b.n	80023d0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fb78 	bl	8002a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e058      	b.n	80023f8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d124      	bne.n	80023d0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	2b03      	cmp	r3, #3
 800238c:	d107      	bne.n	800239e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f aeb6 	bne.w	8002146 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
  }
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3728      	adds	r7, #40	; 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	00010004 	.word	0x00010004

08002404 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	460b      	mov	r3, r1
 8002412:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d006      	beq.n	800242e <I2C_MasterRequestWrite+0x2a>
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d003      	beq.n	800242e <I2C_MasterRequestWrite+0x2a>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800242c:	d108      	bne.n	8002440 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e00b      	b.n	8002458 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	2b12      	cmp	r3, #18
 8002446:	d107      	bne.n	8002458 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002456:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f937 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247e:	d103      	bne.n	8002488 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e035      	b.n	80024f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002494:	d108      	bne.n	80024a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002496:	897b      	ldrh	r3, [r7, #10]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024a4:	611a      	str	r2, [r3, #16]
 80024a6:	e01b      	b.n	80024e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024a8:	897b      	ldrh	r3, [r7, #10]
 80024aa:	11db      	asrs	r3, r3, #7
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 0306 	and.w	r3, r3, #6
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f063 030f 	orn	r3, r3, #15
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	490e      	ldr	r1, [pc, #56]	; (8002500 <I2C_MasterRequestWrite+0xfc>)
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f980 	bl	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e010      	b.n	80024f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024d6:	897b      	ldrh	r3, [r7, #10]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <I2C_MasterRequestWrite+0x100>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f970 	bl	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	00010008 	.word	0x00010008
 8002504:	00010002 	.word	0x00010002

08002508 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	817b      	strh	r3, [r7, #10]
 800251a:	460b      	mov	r3, r1
 800251c:	813b      	strh	r3, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002530:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002540:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	2200      	movs	r2, #0
 800254a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f8c2 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002568:	d103      	bne.n	8002572 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e0aa      	b.n	80026cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002576:	897b      	ldrh	r3, [r7, #10]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002584:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	6a3a      	ldr	r2, [r7, #32]
 800258a:	4952      	ldr	r1, [pc, #328]	; (80026d4 <I2C_RequestMemoryRead+0x1cc>)
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f91d 	bl	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e097      	b.n	80026cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	6a39      	ldr	r1, [r7, #32]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f9a8 	bl	800290c <I2C_WaitOnTXEFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00d      	beq.n	80025de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d107      	bne.n	80025da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e076      	b.n	80026cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025e4:	893b      	ldrh	r3, [r7, #8]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	611a      	str	r2, [r3, #16]
 80025ee:	e021      	b.n	8002634 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025f0:	893b      	ldrh	r3, [r7, #8]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	6a39      	ldr	r1, [r7, #32]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f982 	bl	800290c <I2C_WaitOnTXEFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00d      	beq.n	800262a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b04      	cmp	r3, #4
 8002614:	d107      	bne.n	8002626 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002624:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e050      	b.n	80026cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800262a:	893b      	ldrh	r3, [r7, #8]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002636:	6a39      	ldr	r1, [r7, #32]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f967 	bl	800290c <I2C_WaitOnTXEFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	2b04      	cmp	r3, #4
 800264a:	d107      	bne.n	800265c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e035      	b.n	80026cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	2200      	movs	r2, #0
 8002678:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f82b 	bl	80026d8 <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002696:	d103      	bne.n	80026a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e013      	b.n	80026cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026a4:	897b      	ldrh	r3, [r7, #10]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	6a3a      	ldr	r2, [r7, #32]
 80026b8:	4906      	ldr	r1, [pc, #24]	; (80026d4 <I2C_RequestMemoryRead+0x1cc>)
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f886 	bl	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	00010002 	.word	0x00010002

080026d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e8:	e048      	b.n	800277c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d044      	beq.n	800277c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f2:	f7fe ff4f 	bl	8001594 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d139      	bne.n	800277c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	0c1b      	lsrs	r3, r3, #16
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d10d      	bne.n	800272e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	43da      	mvns	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4013      	ands	r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	e00c      	b.n	8002748 <I2C_WaitOnFlagUntilTimeout+0x70>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	43da      	mvns	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	4013      	ands	r3, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	429a      	cmp	r2, r3
 800274c:	d116      	bne.n	800277c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f043 0220 	orr.w	r2, r3, #32
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e023      	b.n	80027c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	0c1b      	lsrs	r3, r3, #16
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d10d      	bne.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	43da      	mvns	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	e00c      	b.n	80027bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	43da      	mvns	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4013      	ands	r3, r2
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d093      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027da:	e071      	b.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	d123      	bne.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002804:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f043 0204 	orr.w	r2, r3, #4
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e067      	b.n	8002904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d041      	beq.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283c:	f7fe feaa 	bl	8001594 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	d302      	bcc.n	8002852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d136      	bne.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d10c      	bne.n	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4013      	ands	r3, r2
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf14      	ite	ne
 800286e:	2301      	movne	r3, #1
 8002870:	2300      	moveq	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	e00b      	b.n	800288e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	43da      	mvns	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4013      	ands	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f043 0220 	orr.w	r2, r3, #32
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e021      	b.n	8002904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10c      	bne.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	43da      	mvns	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4013      	ands	r3, r2
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e00b      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f47f af6d 	bne.w	80027dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002918:	e034      	b.n	8002984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f8e3 	bl	8002ae6 <I2C_IsAcknowledgeFailed>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e034      	b.n	8002994 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d028      	beq.n	8002984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7fe fe2f 	bl	8001594 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d11d      	bne.n	8002984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b80      	cmp	r3, #128	; 0x80
 8002954:	d016      	beq.n	8002984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e007      	b.n	8002994 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b80      	cmp	r3, #128	; 0x80
 8002990:	d1c3      	bne.n	800291a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a8:	e034      	b.n	8002a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f89b 	bl	8002ae6 <I2C_IsAcknowledgeFailed>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e034      	b.n	8002a24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d028      	beq.n	8002a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c2:	f7fe fde7 	bl	8001594 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d302      	bcc.n	80029d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d11d      	bne.n	8002a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d016      	beq.n	8002a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e007      	b.n	8002a24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d1c3      	bne.n	80029aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a38:	e049      	b.n	8002ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d119      	bne.n	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e030      	b.n	8002ade <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7c:	f7fe fd8a 	bl	8001594 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d302      	bcc.n	8002a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d11d      	bne.n	8002ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9c:	2b40      	cmp	r3, #64	; 0x40
 8002a9e:	d016      	beq.n	8002ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e007      	b.n	8002ade <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d1ae      	bne.n	8002a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afc:	d11b      	bne.n	8002b36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0cc      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b58:	4b68      	ldr	r3, [pc, #416]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d90c      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0b8      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b98:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb0:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	494d      	ldr	r1, [pc, #308]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d044      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d119      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e06f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e067      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4934      	ldr	r1, [pc, #208]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c34:	f7fe fcae 	bl	8001594 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f7fe fcaa 	bl	8001594 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e04f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 020c 	and.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1eb      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d20c      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e032      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4916      	ldr	r1, [pc, #88]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cca:	f000 f855 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	490a      	ldr	r1, [pc, #40]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	5ccb      	ldrb	r3, [r1, r3]
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fc0e 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08004ff4 	.word	0x08004ff4
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	20000004 	.word	0x20000004

08002d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000000 	.word	0x20000000

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d2c:	f7ff fff0 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0a9b      	lsrs	r3, r3, #10
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	08005004 	.word	0x08005004

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d54:	f7ff ffdc 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0b5b      	lsrs	r3, r3, #13
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	08005004 	.word	0x08005004

08002d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d7c:	b0ae      	sub	sp, #184	; 0xb8
 8002d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d9e:	4bcb      	ldr	r3, [pc, #812]	; (80030cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	f200 8206 	bhi.w	80031b8 <HAL_RCC_GetSysClockFreq+0x440>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002de9 	.word	0x08002de9
 8002db8:	080031b9 	.word	0x080031b9
 8002dbc:	080031b9 	.word	0x080031b9
 8002dc0:	080031b9 	.word	0x080031b9
 8002dc4:	08002df1 	.word	0x08002df1
 8002dc8:	080031b9 	.word	0x080031b9
 8002dcc:	080031b9 	.word	0x080031b9
 8002dd0:	080031b9 	.word	0x080031b9
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	080031b9 	.word	0x080031b9
 8002ddc:	080031b9 	.word	0x080031b9
 8002de0:	080031b9 	.word	0x080031b9
 8002de4:	08002fe9 	.word	0x08002fe9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de8:	4bb9      	ldr	r3, [pc, #740]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dee:	e1e7      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df0:	4bb8      	ldr	r3, [pc, #736]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002df6:	e1e3      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df8:	4bb4      	ldr	r3, [pc, #720]	; (80030cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e04:	4bb1      	ldr	r3, [pc, #708]	; (80030cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d071      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e10:	4bae      	ldr	r3, [pc, #696]	; (80030cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	2200      	movs	r2, #0
 8002e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e1c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e36:	4622      	mov	r2, r4
 8002e38:	462b      	mov	r3, r5
 8002e3a:	f04f 0000 	mov.w	r0, #0
 8002e3e:	f04f 0100 	mov.w	r1, #0
 8002e42:	0159      	lsls	r1, r3, #5
 8002e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e48:	0150      	lsls	r0, r2, #5
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4621      	mov	r1, r4
 8002e50:	1a51      	subs	r1, r2, r1
 8002e52:	6439      	str	r1, [r7, #64]	; 0x40
 8002e54:	4629      	mov	r1, r5
 8002e56:	eb63 0301 	sbc.w	r3, r3, r1
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e68:	4649      	mov	r1, r9
 8002e6a:	018b      	lsls	r3, r1, #6
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e72:	4641      	mov	r1, r8
 8002e74:	018a      	lsls	r2, r1, #6
 8002e76:	4641      	mov	r1, r8
 8002e78:	1a51      	subs	r1, r2, r1
 8002e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e90:	4649      	mov	r1, r9
 8002e92:	00cb      	lsls	r3, r1, #3
 8002e94:	4641      	mov	r1, r8
 8002e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	00ca      	lsls	r2, r1, #3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4622      	mov	r2, r4
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eaa:	462b      	mov	r3, r5
 8002eac:	460a      	mov	r2, r1
 8002eae:	eb42 0303 	adc.w	r3, r2, r3
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	024b      	lsls	r3, r1, #9
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eca:	4621      	mov	r1, r4
 8002ecc:	024a      	lsls	r2, r1, #9
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ee0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ee4:	f7fd fd22 	bl	800092c <__aeabi_uldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4613      	mov	r3, r2
 8002eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ef2:	e067      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef4:	4b75      	ldr	r3, [pc, #468]	; (80030cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f00:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f0e:	2300      	movs	r3, #0
 8002f10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f16:	4622      	mov	r2, r4
 8002f18:	462b      	mov	r3, r5
 8002f1a:	f04f 0000 	mov.w	r0, #0
 8002f1e:	f04f 0100 	mov.w	r1, #0
 8002f22:	0159      	lsls	r1, r3, #5
 8002f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f28:	0150      	lsls	r0, r2, #5
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4621      	mov	r1, r4
 8002f30:	1a51      	subs	r1, r2, r1
 8002f32:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f34:	4629      	mov	r1, r5
 8002f36:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f48:	4649      	mov	r1, r9
 8002f4a:	018b      	lsls	r3, r1, #6
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f52:	4641      	mov	r1, r8
 8002f54:	018a      	lsls	r2, r1, #6
 8002f56:	4641      	mov	r1, r8
 8002f58:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f76:	4692      	mov	sl, r2
 8002f78:	469b      	mov	fp, r3
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	eb1a 0303 	adds.w	r3, sl, r3
 8002f80:	623b      	str	r3, [r7, #32]
 8002f82:	462b      	mov	r3, r5
 8002f84:	eb4b 0303 	adc.w	r3, fp, r3
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f96:	4629      	mov	r1, r5
 8002f98:	028b      	lsls	r3, r1, #10
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	028a      	lsls	r2, r1, #10
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fac:	2200      	movs	r2, #0
 8002fae:	673b      	str	r3, [r7, #112]	; 0x70
 8002fb0:	677a      	str	r2, [r7, #116]	; 0x74
 8002fb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fb6:	f7fd fcb9 	bl	800092c <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fc4:	4b41      	ldr	r3, [pc, #260]	; (80030cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fe6:	e0eb      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe8:	4b38      	ldr	r3, [pc, #224]	; (80030cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff4:	4b35      	ldr	r3, [pc, #212]	; (80030cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d06b      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	2200      	movs	r2, #0
 8003008:	66bb      	str	r3, [r7, #104]	; 0x68
 800300a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800300c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800300e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
 8003014:	2300      	movs	r3, #0
 8003016:	667b      	str	r3, [r7, #100]	; 0x64
 8003018:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800301c:	4622      	mov	r2, r4
 800301e:	462b      	mov	r3, r5
 8003020:	f04f 0000 	mov.w	r0, #0
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	0159      	lsls	r1, r3, #5
 800302a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302e:	0150      	lsls	r0, r2, #5
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4621      	mov	r1, r4
 8003036:	1a51      	subs	r1, r2, r1
 8003038:	61b9      	str	r1, [r7, #24]
 800303a:	4629      	mov	r1, r5
 800303c:	eb63 0301 	sbc.w	r3, r3, r1
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800304e:	4659      	mov	r1, fp
 8003050:	018b      	lsls	r3, r1, #6
 8003052:	4651      	mov	r1, sl
 8003054:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003058:	4651      	mov	r1, sl
 800305a:	018a      	lsls	r2, r1, #6
 800305c:	4651      	mov	r1, sl
 800305e:	ebb2 0801 	subs.w	r8, r2, r1
 8003062:	4659      	mov	r1, fp
 8003064:	eb63 0901 	sbc.w	r9, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003074:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003078:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307c:	4690      	mov	r8, r2
 800307e:	4699      	mov	r9, r3
 8003080:	4623      	mov	r3, r4
 8003082:	eb18 0303 	adds.w	r3, r8, r3
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	462b      	mov	r3, r5
 800308a:	eb49 0303 	adc.w	r3, r9, r3
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800309c:	4629      	mov	r1, r5
 800309e:	024b      	lsls	r3, r1, #9
 80030a0:	4621      	mov	r1, r4
 80030a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030a6:	4621      	mov	r1, r4
 80030a8:	024a      	lsls	r2, r1, #9
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030b2:	2200      	movs	r2, #0
 80030b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030bc:	f7fd fc36 	bl	800092c <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ca:	e065      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x420>
 80030cc:	40023800 	.word	0x40023800
 80030d0:	00f42400 	.word	0x00f42400
 80030d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d8:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	2200      	movs	r2, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	4611      	mov	r1, r2
 80030e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030e8:	653b      	str	r3, [r7, #80]	; 0x50
 80030ea:	2300      	movs	r3, #0
 80030ec:	657b      	str	r3, [r7, #84]	; 0x54
 80030ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030f2:	4642      	mov	r2, r8
 80030f4:	464b      	mov	r3, r9
 80030f6:	f04f 0000 	mov.w	r0, #0
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	0159      	lsls	r1, r3, #5
 8003100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003104:	0150      	lsls	r0, r2, #5
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4641      	mov	r1, r8
 800310c:	1a51      	subs	r1, r2, r1
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	4649      	mov	r1, r9
 8003112:	eb63 0301 	sbc.w	r3, r3, r1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003124:	4659      	mov	r1, fp
 8003126:	018b      	lsls	r3, r1, #6
 8003128:	4651      	mov	r1, sl
 800312a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800312e:	4651      	mov	r1, sl
 8003130:	018a      	lsls	r2, r1, #6
 8003132:	4651      	mov	r1, sl
 8003134:	1a54      	subs	r4, r2, r1
 8003136:	4659      	mov	r1, fp
 8003138:	eb63 0501 	sbc.w	r5, r3, r1
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	00eb      	lsls	r3, r5, #3
 8003146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314a:	00e2      	lsls	r2, r4, #3
 800314c:	4614      	mov	r4, r2
 800314e:	461d      	mov	r5, r3
 8003150:	4643      	mov	r3, r8
 8003152:	18e3      	adds	r3, r4, r3
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	464b      	mov	r3, r9
 8003158:	eb45 0303 	adc.w	r3, r5, r3
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800316a:	4629      	mov	r1, r5
 800316c:	028b      	lsls	r3, r1, #10
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003174:	4621      	mov	r1, r4
 8003176:	028a      	lsls	r2, r1, #10
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003180:	2200      	movs	r2, #0
 8003182:	64bb      	str	r3, [r7, #72]	; 0x48
 8003184:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003186:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800318a:	f7fd fbcf 	bl	800092c <__aeabi_uldivmod>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4613      	mov	r3, r2
 8003194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	0f1b      	lsrs	r3, r3, #28
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80031a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031b6:	e003      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	37b8      	adds	r7, #184	; 0xb8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	00f42400 	.word	0x00f42400

080031d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e28d      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8083 	beq.w	80032fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031f8:	4b94      	ldr	r3, [pc, #592]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b04      	cmp	r3, #4
 8003202:	d019      	beq.n	8003238 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003204:	4b91      	ldr	r3, [pc, #580]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800320c:	2b08      	cmp	r3, #8
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003210:	4b8e      	ldr	r3, [pc, #568]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321c:	d00c      	beq.n	8003238 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321e:	4b8b      	ldr	r3, [pc, #556]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d112      	bne.n	8003250 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322a:	4b88      	ldr	r3, [pc, #544]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003236:	d10b      	bne.n	8003250 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	4b84      	ldr	r3, [pc, #528]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d05b      	beq.n	80032fc <HAL_RCC_OscConfig+0x124>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d157      	bne.n	80032fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e25a      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d106      	bne.n	8003268 <HAL_RCC_OscConfig+0x90>
 800325a:	4b7c      	ldr	r3, [pc, #496]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7b      	ldr	r2, [pc, #492]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e01d      	b.n	80032a4 <HAL_RCC_OscConfig+0xcc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0xb4>
 8003272:	4b76      	ldr	r3, [pc, #472]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a75      	ldr	r2, [pc, #468]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b73      	ldr	r3, [pc, #460]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a72      	ldr	r2, [pc, #456]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e00b      	b.n	80032a4 <HAL_RCC_OscConfig+0xcc>
 800328c:	4b6f      	ldr	r3, [pc, #444]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a6e      	ldr	r2, [pc, #440]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b6c      	ldr	r3, [pc, #432]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6b      	ldr	r2, [pc, #428]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800329e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe f972 	bl	8001594 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fe f96e 	bl	8001594 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e21f      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	4b61      	ldr	r3, [pc, #388]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0xdc>
 80032d2:	e014      	b.n	80032fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe f95e 	bl	8001594 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032dc:	f7fe f95a 	bl	8001594 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e20b      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	4b57      	ldr	r3, [pc, #348]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x104>
 80032fa:	e000      	b.n	80032fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d06f      	beq.n	80033ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800330a:	4b50      	ldr	r3, [pc, #320]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b00      	cmp	r3, #0
 8003314:	d017      	beq.n	8003346 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003316:	4b4d      	ldr	r3, [pc, #308]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800331e:	2b08      	cmp	r3, #8
 8003320:	d105      	bne.n	800332e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003322:	4b4a      	ldr	r3, [pc, #296]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d11c      	bne.n	8003374 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333a:	4b44      	ldr	r3, [pc, #272]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x186>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1d3      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4937      	ldr	r1, [pc, #220]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	e03a      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b34      	ldr	r3, [pc, #208]	; (8003450 <HAL_RCC_OscConfig+0x278>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe f907 	bl	8001594 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338a:	f7fe f903 	bl	8001594 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1b4      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4925      	ldr	r1, [pc, #148]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_RCC_OscConfig+0x278>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe f8e6 	bl	8001594 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fe f8e2 	bl	8001594 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e193      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d036      	beq.n	8003464 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe f8c6 	bl	8001594 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340c:	f7fe f8c2 	bl	8001594 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e173      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x234>
 800342a:	e01b      	b.n	8003464 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_OscConfig+0x27c>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7fe f8af 	bl	8001594 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	e00e      	b.n	8003458 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343a:	f7fe f8ab 	bl	8001594 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d907      	bls.n	8003458 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e15c      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
 800344c:	40023800 	.word	0x40023800
 8003450:	42470000 	.word	0x42470000
 8003454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	4b8a      	ldr	r3, [pc, #552]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ea      	bne.n	800343a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8097 	beq.w	80035a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b83      	ldr	r3, [pc, #524]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	4b7f      	ldr	r3, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a7e      	ldr	r2, [pc, #504]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b7c      	ldr	r3, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a2:	4b79      	ldr	r3, [pc, #484]	; (8003688 <HAL_RCC_OscConfig+0x4b0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d118      	bne.n	80034e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCC_OscConfig+0x4b0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a75      	ldr	r2, [pc, #468]	; (8003688 <HAL_RCC_OscConfig+0x4b0>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ba:	f7fe f86b 	bl	8001594 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c2:	f7fe f867 	bl	8001594 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e118      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <HAL_RCC_OscConfig+0x4b0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x31e>
 80034e8:	4b66      	ldr	r3, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a65      	ldr	r2, [pc, #404]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
 80034f4:	e01c      	b.n	8003530 <HAL_RCC_OscConfig+0x358>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x340>
 80034fe:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a60      	ldr	r2, [pc, #384]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
 800350a:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a5d      	ldr	r2, [pc, #372]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0x358>
 8003518:	4b5a      	ldr	r3, [pc, #360]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a59      	ldr	r2, [pc, #356]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	4b57      	ldr	r3, [pc, #348]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a56      	ldr	r2, [pc, #344]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800352a:	f023 0304 	bic.w	r3, r3, #4
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe f82c 	bl	8001594 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fe f828 	bl	8001594 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0d7      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	4b4b      	ldr	r3, [pc, #300]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ee      	beq.n	8003540 <HAL_RCC_OscConfig+0x368>
 8003562:	e014      	b.n	800358e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe f816 	bl	8001594 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe f812 	bl	8001594 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e0c1      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003582:	4b40      	ldr	r3, [pc, #256]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ee      	bne.n	800356c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003594:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	4a3a      	ldr	r2, [pc, #232]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800359a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80ad 	beq.w	8003704 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d060      	beq.n	8003678 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d145      	bne.n	800364a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_RCC_OscConfig+0x4b4>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd ffe6 	bl	8001594 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fd ffe2 	bl	8001594 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e093      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	019b      	lsls	r3, r3, #6
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	3b01      	subs	r3, #1
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	071b      	lsls	r3, r3, #28
 8003616:	491b      	ldr	r1, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x4b4>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fd ffb7 	bl	8001594 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7fd ffb3 	bl	8001594 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e064      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x452>
 8003648:	e05c      	b.n	8003704 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_RCC_OscConfig+0x4b4>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd ffa0 	bl	8001594 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003658:	f7fd ff9c 	bl	8001594 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e04d      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x480>
 8003676:	e045      	b.n	8003704 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e040      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
 8003684:	40023800 	.word	0x40023800
 8003688:	40007000 	.word	0x40007000
 800368c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003690:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <HAL_RCC_OscConfig+0x538>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d030      	beq.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d129      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d122      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d119      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d10f      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d107      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e042      	b.n	80037ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fe52 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	; 0x24
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f973 	bl	8003a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800376c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800377c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800378c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d175      	bne.n	80038c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_UART_Transmit+0x2c>
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e06e      	b.n	80038c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2221      	movs	r2, #33	; 0x21
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037f2:	f7fd fecf 	bl	8001594 <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	88fa      	ldrh	r2, [r7, #6]
 8003802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380c:	d108      	bne.n	8003820 <HAL_UART_Transmit+0x6c>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	e003      	b.n	8003828 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003828:	e02e      	b.n	8003888 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f848 	bl	80038ca <UART_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e03a      	b.n	80038c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10b      	bne.n	800386a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	3302      	adds	r3, #2
 8003866:	61bb      	str	r3, [r7, #24]
 8003868:	e007      	b.n	800387a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	3301      	adds	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1cb      	bne.n	800382a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2200      	movs	r2, #0
 800389a:	2140      	movs	r1, #64	; 0x40
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f814 	bl	80038ca <UART_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e006      	b.n	80038c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038da:	e03b      	b.n	8003954 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d037      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e4:	f7fd fe56 	bl	8001594 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	6a3a      	ldr	r2, [r7, #32]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d302      	bcc.n	80038fa <UART_WaitOnFlagUntilTimeout+0x30>
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e03a      	b.n	8003974 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d023      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0x8a>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d020      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d01d      	beq.n	8003954 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b08      	cmp	r3, #8
 8003924:	d116      	bne.n	8003954 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f81d 	bl	800397c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2208      	movs	r2, #8
 8003946:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e00f      	b.n	8003974 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	429a      	cmp	r2, r3
 8003970:	d0b4      	beq.n	80038dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b095      	sub	sp, #84	; 0x54
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	330c      	adds	r3, #12
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039a4:	643a      	str	r2, [r7, #64]	; 0x40
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e5      	bne.n	8003984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3314      	adds	r3, #20
 80039be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3314      	adds	r3, #20
 80039d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e5      	bne.n	80039b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d119      	bne.n	8003a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f023 0310 	bic.w	r3, r3, #16
 8003a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a14:	61ba      	str	r2, [r7, #24]
 8003a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6979      	ldr	r1, [r7, #20]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	613b      	str	r3, [r7, #16]
   return(result);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e5      	bne.n	80039f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a36:	bf00      	nop
 8003a38:	3754      	adds	r7, #84	; 0x54
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a48:	b0c0      	sub	sp, #256	; 0x100
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	68d9      	ldr	r1, [r3, #12]
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	ea40 0301 	orr.w	r3, r0, r1
 8003a6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a9c:	f021 010c 	bic.w	r1, r1, #12
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abe:	6999      	ldr	r1, [r3, #24]
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	ea40 0301 	orr.w	r3, r0, r1
 8003aca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b8f      	ldr	r3, [pc, #572]	; (8003d10 <UART_SetConfig+0x2cc>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d005      	beq.n	8003ae4 <UART_SetConfig+0xa0>
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b8d      	ldr	r3, [pc, #564]	; (8003d14 <UART_SetConfig+0x2d0>)
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d104      	bne.n	8003aee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7ff f934 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 8003ae8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003aec:	e003      	b.n	8003af6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aee:	f7ff f91b 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8003af2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b00:	f040 810c 	bne.w	8003d1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	1891      	adds	r1, r2, r2
 8003b1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b1e:	415b      	adcs	r3, r3
 8003b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b26:	4621      	mov	r1, r4
 8003b28:	eb12 0801 	adds.w	r8, r2, r1
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	eb43 0901 	adc.w	r9, r3, r1
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b46:	4690      	mov	r8, r2
 8003b48:	4699      	mov	r9, r3
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	eb18 0303 	adds.w	r3, r8, r3
 8003b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b54:	462b      	mov	r3, r5
 8003b56:	eb49 0303 	adc.w	r3, r9, r3
 8003b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b72:	460b      	mov	r3, r1
 8003b74:	18db      	adds	r3, r3, r3
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
 8003b78:	4613      	mov	r3, r2
 8003b7a:	eb42 0303 	adc.w	r3, r2, r3
 8003b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b88:	f7fc fed0 	bl	800092c <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003b92:	fba3 2302 	umull	r2, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	011c      	lsls	r4, r3, #4
 8003b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ba8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bac:	4642      	mov	r2, r8
 8003bae:	464b      	mov	r3, r9
 8003bb0:	1891      	adds	r1, r2, r2
 8003bb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bb4:	415b      	adcs	r3, r3
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	eb12 0a01 	adds.w	sl, r2, r1
 8003bc2:	4649      	mov	r1, r9
 8003bc4:	eb43 0b01 	adc.w	fp, r3, r1
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bdc:	4692      	mov	sl, r2
 8003bde:	469b      	mov	fp, r3
 8003be0:	4643      	mov	r3, r8
 8003be2:	eb1a 0303 	adds.w	r3, sl, r3
 8003be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bea:	464b      	mov	r3, r9
 8003bec:	eb4b 0303 	adc.w	r3, fp, r3
 8003bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	18db      	adds	r3, r3, r3
 8003c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c0e:	4613      	mov	r3, r2
 8003c10:	eb42 0303 	adc.w	r3, r2, r3
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
 8003c16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c1e:	f7fc fe85 	bl	800092c <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2264      	movs	r2, #100	; 0x64
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	1acb      	subs	r3, r1, r3
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c3e:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003c40:	fba3 2302 	umull	r2, r3, r3, r2
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c4c:	441c      	add	r4, r3
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c70:	4641      	mov	r1, r8
 8003c72:	1851      	adds	r1, r2, r1
 8003c74:	6339      	str	r1, [r7, #48]	; 0x30
 8003c76:	4649      	mov	r1, r9
 8003c78:	414b      	adcs	r3, r1
 8003c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c88:	4659      	mov	r1, fp
 8003c8a:	00cb      	lsls	r3, r1, #3
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c92:	4651      	mov	r1, sl
 8003c94:	00ca      	lsls	r2, r1, #3
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	eb42 0303 	adc.w	r3, r2, r3
 8003cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	18db      	adds	r3, r3, r3
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cca:	4613      	mov	r3, r2
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cda:	f7fc fe27 	bl	800092c <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	2164      	movs	r1, #100	; 0x64
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	3332      	adds	r3, #50	; 0x32
 8003cf6:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <UART_SetConfig+0x2d4>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	f003 0207 	and.w	r2, r3, #7
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4422      	add	r2, r4
 8003d0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d0c:	e106      	b.n	8003f1c <UART_SetConfig+0x4d8>
 8003d0e:	bf00      	nop
 8003d10:	40011000 	.word	0x40011000
 8003d14:	40011400 	.word	0x40011400
 8003d18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d2e:	4642      	mov	r2, r8
 8003d30:	464b      	mov	r3, r9
 8003d32:	1891      	adds	r1, r2, r2
 8003d34:	6239      	str	r1, [r7, #32]
 8003d36:	415b      	adcs	r3, r3
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d3e:	4641      	mov	r1, r8
 8003d40:	1854      	adds	r4, r2, r1
 8003d42:	4649      	mov	r1, r9
 8003d44:	eb43 0501 	adc.w	r5, r3, r1
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	00eb      	lsls	r3, r5, #3
 8003d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d56:	00e2      	lsls	r2, r4, #3
 8003d58:	4614      	mov	r4, r2
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	4643      	mov	r3, r8
 8003d5e:	18e3      	adds	r3, r4, r3
 8003d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d64:	464b      	mov	r3, r9
 8003d66:	eb45 0303 	adc.w	r3, r5, r3
 8003d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	008b      	lsls	r3, r1, #2
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d94:	4621      	mov	r1, r4
 8003d96:	008a      	lsls	r2, r1, #2
 8003d98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d9c:	f7fc fdc6 	bl	800092c <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4b60      	ldr	r3, [pc, #384]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003da6:	fba3 2302 	umull	r2, r3, r3, r2
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	011c      	lsls	r4, r3, #4
 8003dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003db8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	1891      	adds	r1, r2, r2
 8003dc6:	61b9      	str	r1, [r7, #24]
 8003dc8:	415b      	adcs	r3, r3
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	1851      	adds	r1, r2, r1
 8003dd4:	6139      	str	r1, [r7, #16]
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	414b      	adcs	r3, r1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de8:	4659      	mov	r1, fp
 8003dea:	00cb      	lsls	r3, r1, #3
 8003dec:	4651      	mov	r1, sl
 8003dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df2:	4651      	mov	r1, sl
 8003df4:	00ca      	lsls	r2, r1, #3
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e04:	464b      	mov	r3, r9
 8003e06:	460a      	mov	r2, r1
 8003e08:	eb42 0303 	adc.w	r3, r2, r3
 8003e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e28:	4649      	mov	r1, r9
 8003e2a:	008b      	lsls	r3, r1, #2
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e32:	4641      	mov	r1, r8
 8003e34:	008a      	lsls	r2, r1, #2
 8003e36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e3a:	f7fc fd77 	bl	800092c <__aeabi_uldivmod>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003e46:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2264      	movs	r2, #100	; 0x64
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	1acb      	subs	r3, r1, r3
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	3332      	adds	r3, #50	; 0x32
 8003e58:	4a33      	ldr	r2, [pc, #204]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e64:	441c      	add	r4, r3
 8003e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8003e6e:	677a      	str	r2, [r7, #116]	; 0x74
 8003e70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e84:	4641      	mov	r1, r8
 8003e86:	1851      	adds	r1, r2, r1
 8003e88:	6039      	str	r1, [r7, #0]
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	414b      	adcs	r3, r1
 8003e8e:	607b      	str	r3, [r7, #4]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	00cb      	lsls	r3, r1, #3
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	00ca      	lsls	r2, r1, #3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	460a      	mov	r2, r1
 8003eba:	eb42 0303 	adc.w	r3, r2, r3
 8003ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eca:	667a      	str	r2, [r7, #100]	; 0x64
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ed8:	4649      	mov	r1, r9
 8003eda:	008b      	lsls	r3, r1, #2
 8003edc:	4641      	mov	r1, r8
 8003ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	008a      	lsls	r2, r1, #2
 8003ee6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003eea:	f7fc fd1f 	bl	800092c <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	2164      	movs	r1, #100	; 0x64
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	3332      	adds	r3, #50	; 0x32
 8003f06:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <UART_SetConfig+0x4e4>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4422      	add	r2, r4
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f28:	51eb851f 	.word	0x51eb851f

08003f2c <std>:
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	4604      	mov	r4, r0
 8003f32:	e9c0 3300 	strd	r3, r3, [r0]
 8003f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f3a:	6083      	str	r3, [r0, #8]
 8003f3c:	8181      	strh	r1, [r0, #12]
 8003f3e:	6643      	str	r3, [r0, #100]	; 0x64
 8003f40:	81c2      	strh	r2, [r0, #14]
 8003f42:	6183      	str	r3, [r0, #24]
 8003f44:	4619      	mov	r1, r3
 8003f46:	2208      	movs	r2, #8
 8003f48:	305c      	adds	r0, #92	; 0x5c
 8003f4a:	f000 fa19 	bl	8004380 <memset>
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <std+0x58>)
 8003f50:	6263      	str	r3, [r4, #36]	; 0x24
 8003f52:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <std+0x5c>)
 8003f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <std+0x60>)
 8003f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <std+0x64>)
 8003f5c:	6323      	str	r3, [r4, #48]	; 0x30
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <std+0x68>)
 8003f60:	6224      	str	r4, [r4, #32]
 8003f62:	429c      	cmp	r4, r3
 8003f64:	d006      	beq.n	8003f74 <std+0x48>
 8003f66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003f6a:	4294      	cmp	r4, r2
 8003f6c:	d002      	beq.n	8003f74 <std+0x48>
 8003f6e:	33d0      	adds	r3, #208	; 0xd0
 8003f70:	429c      	cmp	r4, r3
 8003f72:	d105      	bne.n	8003f80 <std+0x54>
 8003f74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f7c:	f000 ba78 	b.w	8004470 <__retarget_lock_init_recursive>
 8003f80:	bd10      	pop	{r4, pc}
 8003f82:	bf00      	nop
 8003f84:	080041d1 	.word	0x080041d1
 8003f88:	080041f3 	.word	0x080041f3
 8003f8c:	0800422b 	.word	0x0800422b
 8003f90:	0800424f 	.word	0x0800424f
 8003f94:	20000128 	.word	0x20000128

08003f98 <stdio_exit_handler>:
 8003f98:	4a02      	ldr	r2, [pc, #8]	; (8003fa4 <stdio_exit_handler+0xc>)
 8003f9a:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <stdio_exit_handler+0x10>)
 8003f9c:	4803      	ldr	r0, [pc, #12]	; (8003fac <stdio_exit_handler+0x14>)
 8003f9e:	f000 b869 	b.w	8004074 <_fwalk_sglue>
 8003fa2:	bf00      	nop
 8003fa4:	2000000c 	.word	0x2000000c
 8003fa8:	08004d45 	.word	0x08004d45
 8003fac:	20000018 	.word	0x20000018

08003fb0 <cleanup_stdio>:
 8003fb0:	6841      	ldr	r1, [r0, #4]
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <cleanup_stdio+0x34>)
 8003fb4:	4299      	cmp	r1, r3
 8003fb6:	b510      	push	{r4, lr}
 8003fb8:	4604      	mov	r4, r0
 8003fba:	d001      	beq.n	8003fc0 <cleanup_stdio+0x10>
 8003fbc:	f000 fec2 	bl	8004d44 <_fflush_r>
 8003fc0:	68a1      	ldr	r1, [r4, #8]
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <cleanup_stdio+0x38>)
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	d002      	beq.n	8003fce <cleanup_stdio+0x1e>
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f000 febb 	bl	8004d44 <_fflush_r>
 8003fce:	68e1      	ldr	r1, [r4, #12]
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <cleanup_stdio+0x3c>)
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	d004      	beq.n	8003fe0 <cleanup_stdio+0x30>
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fdc:	f000 beb2 	b.w	8004d44 <_fflush_r>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000128 	.word	0x20000128
 8003fe8:	20000190 	.word	0x20000190
 8003fec:	200001f8 	.word	0x200001f8

08003ff0 <global_stdio_init.part.0>:
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <global_stdio_init.part.0+0x30>)
 8003ff4:	4c0b      	ldr	r4, [pc, #44]	; (8004024 <global_stdio_init.part.0+0x34>)
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <global_stdio_init.part.0+0x38>)
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2104      	movs	r1, #4
 8004000:	f7ff ff94 	bl	8003f2c <std>
 8004004:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004008:	2201      	movs	r2, #1
 800400a:	2109      	movs	r1, #9
 800400c:	f7ff ff8e 	bl	8003f2c <std>
 8004010:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004014:	2202      	movs	r2, #2
 8004016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800401a:	2112      	movs	r1, #18
 800401c:	f7ff bf86 	b.w	8003f2c <std>
 8004020:	20000260 	.word	0x20000260
 8004024:	20000128 	.word	0x20000128
 8004028:	08003f99 	.word	0x08003f99

0800402c <__sfp_lock_acquire>:
 800402c:	4801      	ldr	r0, [pc, #4]	; (8004034 <__sfp_lock_acquire+0x8>)
 800402e:	f000 ba20 	b.w	8004472 <__retarget_lock_acquire_recursive>
 8004032:	bf00      	nop
 8004034:	20000269 	.word	0x20000269

08004038 <__sfp_lock_release>:
 8004038:	4801      	ldr	r0, [pc, #4]	; (8004040 <__sfp_lock_release+0x8>)
 800403a:	f000 ba1b 	b.w	8004474 <__retarget_lock_release_recursive>
 800403e:	bf00      	nop
 8004040:	20000269 	.word	0x20000269

08004044 <__sinit>:
 8004044:	b510      	push	{r4, lr}
 8004046:	4604      	mov	r4, r0
 8004048:	f7ff fff0 	bl	800402c <__sfp_lock_acquire>
 800404c:	6a23      	ldr	r3, [r4, #32]
 800404e:	b11b      	cbz	r3, 8004058 <__sinit+0x14>
 8004050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004054:	f7ff bff0 	b.w	8004038 <__sfp_lock_release>
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <__sinit+0x28>)
 800405a:	6223      	str	r3, [r4, #32]
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <__sinit+0x2c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f5      	bne.n	8004050 <__sinit+0xc>
 8004064:	f7ff ffc4 	bl	8003ff0 <global_stdio_init.part.0>
 8004068:	e7f2      	b.n	8004050 <__sinit+0xc>
 800406a:	bf00      	nop
 800406c:	08003fb1 	.word	0x08003fb1
 8004070:	20000260 	.word	0x20000260

08004074 <_fwalk_sglue>:
 8004074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004078:	4607      	mov	r7, r0
 800407a:	4688      	mov	r8, r1
 800407c:	4614      	mov	r4, r2
 800407e:	2600      	movs	r6, #0
 8004080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004084:	f1b9 0901 	subs.w	r9, r9, #1
 8004088:	d505      	bpl.n	8004096 <_fwalk_sglue+0x22>
 800408a:	6824      	ldr	r4, [r4, #0]
 800408c:	2c00      	cmp	r4, #0
 800408e:	d1f7      	bne.n	8004080 <_fwalk_sglue+0xc>
 8004090:	4630      	mov	r0, r6
 8004092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004096:	89ab      	ldrh	r3, [r5, #12]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d907      	bls.n	80040ac <_fwalk_sglue+0x38>
 800409c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040a0:	3301      	adds	r3, #1
 80040a2:	d003      	beq.n	80040ac <_fwalk_sglue+0x38>
 80040a4:	4629      	mov	r1, r5
 80040a6:	4638      	mov	r0, r7
 80040a8:	47c0      	blx	r8
 80040aa:	4306      	orrs	r6, r0
 80040ac:	3568      	adds	r5, #104	; 0x68
 80040ae:	e7e9      	b.n	8004084 <_fwalk_sglue+0x10>

080040b0 <_puts_r>:
 80040b0:	6a03      	ldr	r3, [r0, #32]
 80040b2:	b570      	push	{r4, r5, r6, lr}
 80040b4:	6884      	ldr	r4, [r0, #8]
 80040b6:	4605      	mov	r5, r0
 80040b8:	460e      	mov	r6, r1
 80040ba:	b90b      	cbnz	r3, 80040c0 <_puts_r+0x10>
 80040bc:	f7ff ffc2 	bl	8004044 <__sinit>
 80040c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040c2:	07db      	lsls	r3, r3, #31
 80040c4:	d405      	bmi.n	80040d2 <_puts_r+0x22>
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	0598      	lsls	r0, r3, #22
 80040ca:	d402      	bmi.n	80040d2 <_puts_r+0x22>
 80040cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ce:	f000 f9d0 	bl	8004472 <__retarget_lock_acquire_recursive>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	0719      	lsls	r1, r3, #28
 80040d6:	d513      	bpl.n	8004100 <_puts_r+0x50>
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	b18b      	cbz	r3, 8004100 <_puts_r+0x50>
 80040dc:	3e01      	subs	r6, #1
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040e4:	3b01      	subs	r3, #1
 80040e6:	60a3      	str	r3, [r4, #8]
 80040e8:	b9e9      	cbnz	r1, 8004126 <_puts_r+0x76>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	da2e      	bge.n	800414c <_puts_r+0x9c>
 80040ee:	4622      	mov	r2, r4
 80040f0:	210a      	movs	r1, #10
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 f8af 	bl	8004256 <__swbuf_r>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d007      	beq.n	800410c <_puts_r+0x5c>
 80040fc:	250a      	movs	r5, #10
 80040fe:	e007      	b.n	8004110 <_puts_r+0x60>
 8004100:	4621      	mov	r1, r4
 8004102:	4628      	mov	r0, r5
 8004104:	f000 f8e4 	bl	80042d0 <__swsetup_r>
 8004108:	2800      	cmp	r0, #0
 800410a:	d0e7      	beq.n	80040dc <_puts_r+0x2c>
 800410c:	f04f 35ff 	mov.w	r5, #4294967295
 8004110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004112:	07da      	lsls	r2, r3, #31
 8004114:	d405      	bmi.n	8004122 <_puts_r+0x72>
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	059b      	lsls	r3, r3, #22
 800411a:	d402      	bmi.n	8004122 <_puts_r+0x72>
 800411c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800411e:	f000 f9a9 	bl	8004474 <__retarget_lock_release_recursive>
 8004122:	4628      	mov	r0, r5
 8004124:	bd70      	pop	{r4, r5, r6, pc}
 8004126:	2b00      	cmp	r3, #0
 8004128:	da04      	bge.n	8004134 <_puts_r+0x84>
 800412a:	69a2      	ldr	r2, [r4, #24]
 800412c:	429a      	cmp	r2, r3
 800412e:	dc06      	bgt.n	800413e <_puts_r+0x8e>
 8004130:	290a      	cmp	r1, #10
 8004132:	d004      	beq.n	800413e <_puts_r+0x8e>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	6022      	str	r2, [r4, #0]
 800413a:	7019      	strb	r1, [r3, #0]
 800413c:	e7cf      	b.n	80040de <_puts_r+0x2e>
 800413e:	4622      	mov	r2, r4
 8004140:	4628      	mov	r0, r5
 8004142:	f000 f888 	bl	8004256 <__swbuf_r>
 8004146:	3001      	adds	r0, #1
 8004148:	d1c9      	bne.n	80040de <_puts_r+0x2e>
 800414a:	e7df      	b.n	800410c <_puts_r+0x5c>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	250a      	movs	r5, #10
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	6022      	str	r2, [r4, #0]
 8004154:	701d      	strb	r5, [r3, #0]
 8004156:	e7db      	b.n	8004110 <_puts_r+0x60>

08004158 <puts>:
 8004158:	4b02      	ldr	r3, [pc, #8]	; (8004164 <puts+0xc>)
 800415a:	4601      	mov	r1, r0
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	f7ff bfa7 	b.w	80040b0 <_puts_r>
 8004162:	bf00      	nop
 8004164:	20000064 	.word	0x20000064

08004168 <sniprintf>:
 8004168:	b40c      	push	{r2, r3}
 800416a:	b530      	push	{r4, r5, lr}
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <sniprintf+0x64>)
 800416e:	1e0c      	subs	r4, r1, #0
 8004170:	681d      	ldr	r5, [r3, #0]
 8004172:	b09d      	sub	sp, #116	; 0x74
 8004174:	da08      	bge.n	8004188 <sniprintf+0x20>
 8004176:	238b      	movs	r3, #139	; 0x8b
 8004178:	602b      	str	r3, [r5, #0]
 800417a:	f04f 30ff 	mov.w	r0, #4294967295
 800417e:	b01d      	add	sp, #116	; 0x74
 8004180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004184:	b002      	add	sp, #8
 8004186:	4770      	bx	lr
 8004188:	f44f 7302 	mov.w	r3, #520	; 0x208
 800418c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004190:	bf14      	ite	ne
 8004192:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004196:	4623      	moveq	r3, r4
 8004198:	9304      	str	r3, [sp, #16]
 800419a:	9307      	str	r3, [sp, #28]
 800419c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041a0:	9002      	str	r0, [sp, #8]
 80041a2:	9006      	str	r0, [sp, #24]
 80041a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80041a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041aa:	ab21      	add	r3, sp, #132	; 0x84
 80041ac:	a902      	add	r1, sp, #8
 80041ae:	4628      	mov	r0, r5
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	f000 fab3 	bl	800471c <_svfiprintf_r>
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	bfbc      	itt	lt
 80041ba:	238b      	movlt	r3, #139	; 0x8b
 80041bc:	602b      	strlt	r3, [r5, #0]
 80041be:	2c00      	cmp	r4, #0
 80041c0:	d0dd      	beq.n	800417e <sniprintf+0x16>
 80041c2:	9b02      	ldr	r3, [sp, #8]
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	e7d9      	b.n	800417e <sniprintf+0x16>
 80041ca:	bf00      	nop
 80041cc:	20000064 	.word	0x20000064

080041d0 <__sread>:
 80041d0:	b510      	push	{r4, lr}
 80041d2:	460c      	mov	r4, r1
 80041d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d8:	f000 f8fc 	bl	80043d4 <_read_r>
 80041dc:	2800      	cmp	r0, #0
 80041de:	bfab      	itete	ge
 80041e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041e2:	89a3      	ldrhlt	r3, [r4, #12]
 80041e4:	181b      	addge	r3, r3, r0
 80041e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041ea:	bfac      	ite	ge
 80041ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80041ee:	81a3      	strhlt	r3, [r4, #12]
 80041f0:	bd10      	pop	{r4, pc}

080041f2 <__swrite>:
 80041f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f6:	461f      	mov	r7, r3
 80041f8:	898b      	ldrh	r3, [r1, #12]
 80041fa:	05db      	lsls	r3, r3, #23
 80041fc:	4605      	mov	r5, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	4616      	mov	r6, r2
 8004202:	d505      	bpl.n	8004210 <__swrite+0x1e>
 8004204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004208:	2302      	movs	r3, #2
 800420a:	2200      	movs	r2, #0
 800420c:	f000 f8d0 	bl	80043b0 <_lseek_r>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800421a:	81a3      	strh	r3, [r4, #12]
 800421c:	4632      	mov	r2, r6
 800421e:	463b      	mov	r3, r7
 8004220:	4628      	mov	r0, r5
 8004222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004226:	f000 b8e7 	b.w	80043f8 <_write_r>

0800422a <__sseek>:
 800422a:	b510      	push	{r4, lr}
 800422c:	460c      	mov	r4, r1
 800422e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004232:	f000 f8bd 	bl	80043b0 <_lseek_r>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	bf15      	itete	ne
 800423c:	6560      	strne	r0, [r4, #84]	; 0x54
 800423e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004246:	81a3      	strheq	r3, [r4, #12]
 8004248:	bf18      	it	ne
 800424a:	81a3      	strhne	r3, [r4, #12]
 800424c:	bd10      	pop	{r4, pc}

0800424e <__sclose>:
 800424e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004252:	f000 b89d 	b.w	8004390 <_close_r>

08004256 <__swbuf_r>:
 8004256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004258:	460e      	mov	r6, r1
 800425a:	4614      	mov	r4, r2
 800425c:	4605      	mov	r5, r0
 800425e:	b118      	cbz	r0, 8004268 <__swbuf_r+0x12>
 8004260:	6a03      	ldr	r3, [r0, #32]
 8004262:	b90b      	cbnz	r3, 8004268 <__swbuf_r+0x12>
 8004264:	f7ff feee 	bl	8004044 <__sinit>
 8004268:	69a3      	ldr	r3, [r4, #24]
 800426a:	60a3      	str	r3, [r4, #8]
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	071a      	lsls	r2, r3, #28
 8004270:	d525      	bpl.n	80042be <__swbuf_r+0x68>
 8004272:	6923      	ldr	r3, [r4, #16]
 8004274:	b31b      	cbz	r3, 80042be <__swbuf_r+0x68>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	6922      	ldr	r2, [r4, #16]
 800427a:	1a98      	subs	r0, r3, r2
 800427c:	6963      	ldr	r3, [r4, #20]
 800427e:	b2f6      	uxtb	r6, r6
 8004280:	4283      	cmp	r3, r0
 8004282:	4637      	mov	r7, r6
 8004284:	dc04      	bgt.n	8004290 <__swbuf_r+0x3a>
 8004286:	4621      	mov	r1, r4
 8004288:	4628      	mov	r0, r5
 800428a:	f000 fd5b 	bl	8004d44 <_fflush_r>
 800428e:	b9e0      	cbnz	r0, 80042ca <__swbuf_r+0x74>
 8004290:	68a3      	ldr	r3, [r4, #8]
 8004292:	3b01      	subs	r3, #1
 8004294:	60a3      	str	r3, [r4, #8]
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	6022      	str	r2, [r4, #0]
 800429c:	701e      	strb	r6, [r3, #0]
 800429e:	6962      	ldr	r2, [r4, #20]
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d004      	beq.n	80042b0 <__swbuf_r+0x5a>
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	07db      	lsls	r3, r3, #31
 80042aa:	d506      	bpl.n	80042ba <__swbuf_r+0x64>
 80042ac:	2e0a      	cmp	r6, #10
 80042ae:	d104      	bne.n	80042ba <__swbuf_r+0x64>
 80042b0:	4621      	mov	r1, r4
 80042b2:	4628      	mov	r0, r5
 80042b4:	f000 fd46 	bl	8004d44 <_fflush_r>
 80042b8:	b938      	cbnz	r0, 80042ca <__swbuf_r+0x74>
 80042ba:	4638      	mov	r0, r7
 80042bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042be:	4621      	mov	r1, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	f000 f805 	bl	80042d0 <__swsetup_r>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d0d5      	beq.n	8004276 <__swbuf_r+0x20>
 80042ca:	f04f 37ff 	mov.w	r7, #4294967295
 80042ce:	e7f4      	b.n	80042ba <__swbuf_r+0x64>

080042d0 <__swsetup_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4b2a      	ldr	r3, [pc, #168]	; (800437c <__swsetup_r+0xac>)
 80042d4:	4605      	mov	r5, r0
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	460c      	mov	r4, r1
 80042da:	b118      	cbz	r0, 80042e4 <__swsetup_r+0x14>
 80042dc:	6a03      	ldr	r3, [r0, #32]
 80042de:	b90b      	cbnz	r3, 80042e4 <__swsetup_r+0x14>
 80042e0:	f7ff feb0 	bl	8004044 <__sinit>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042ea:	0718      	lsls	r0, r3, #28
 80042ec:	d422      	bmi.n	8004334 <__swsetup_r+0x64>
 80042ee:	06d9      	lsls	r1, r3, #27
 80042f0:	d407      	bmi.n	8004302 <__swsetup_r+0x32>
 80042f2:	2309      	movs	r3, #9
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	e034      	b.n	800436c <__swsetup_r+0x9c>
 8004302:	0758      	lsls	r0, r3, #29
 8004304:	d512      	bpl.n	800432c <__swsetup_r+0x5c>
 8004306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004308:	b141      	cbz	r1, 800431c <__swsetup_r+0x4c>
 800430a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800430e:	4299      	cmp	r1, r3
 8004310:	d002      	beq.n	8004318 <__swsetup_r+0x48>
 8004312:	4628      	mov	r0, r5
 8004314:	f000 f8b0 	bl	8004478 <_free_r>
 8004318:	2300      	movs	r3, #0
 800431a:	6363      	str	r3, [r4, #52]	; 0x34
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004322:	81a3      	strh	r3, [r4, #12]
 8004324:	2300      	movs	r3, #0
 8004326:	6063      	str	r3, [r4, #4]
 8004328:	6923      	ldr	r3, [r4, #16]
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	89a3      	ldrh	r3, [r4, #12]
 800432e:	f043 0308 	orr.w	r3, r3, #8
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	6923      	ldr	r3, [r4, #16]
 8004336:	b94b      	cbnz	r3, 800434c <__swsetup_r+0x7c>
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800433e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004342:	d003      	beq.n	800434c <__swsetup_r+0x7c>
 8004344:	4621      	mov	r1, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 fd4a 	bl	8004de0 <__smakebuf_r>
 800434c:	89a0      	ldrh	r0, [r4, #12]
 800434e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004352:	f010 0301 	ands.w	r3, r0, #1
 8004356:	d00a      	beq.n	800436e <__swsetup_r+0x9e>
 8004358:	2300      	movs	r3, #0
 800435a:	60a3      	str	r3, [r4, #8]
 800435c:	6963      	ldr	r3, [r4, #20]
 800435e:	425b      	negs	r3, r3
 8004360:	61a3      	str	r3, [r4, #24]
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	b943      	cbnz	r3, 8004378 <__swsetup_r+0xa8>
 8004366:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800436a:	d1c4      	bne.n	80042f6 <__swsetup_r+0x26>
 800436c:	bd38      	pop	{r3, r4, r5, pc}
 800436e:	0781      	lsls	r1, r0, #30
 8004370:	bf58      	it	pl
 8004372:	6963      	ldrpl	r3, [r4, #20]
 8004374:	60a3      	str	r3, [r4, #8]
 8004376:	e7f4      	b.n	8004362 <__swsetup_r+0x92>
 8004378:	2000      	movs	r0, #0
 800437a:	e7f7      	b.n	800436c <__swsetup_r+0x9c>
 800437c:	20000064 	.word	0x20000064

08004380 <memset>:
 8004380:	4402      	add	r2, r0
 8004382:	4603      	mov	r3, r0
 8004384:	4293      	cmp	r3, r2
 8004386:	d100      	bne.n	800438a <memset+0xa>
 8004388:	4770      	bx	lr
 800438a:	f803 1b01 	strb.w	r1, [r3], #1
 800438e:	e7f9      	b.n	8004384 <memset+0x4>

08004390 <_close_r>:
 8004390:	b538      	push	{r3, r4, r5, lr}
 8004392:	4d06      	ldr	r5, [pc, #24]	; (80043ac <_close_r+0x1c>)
 8004394:	2300      	movs	r3, #0
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	602b      	str	r3, [r5, #0]
 800439c:	f7fc ff7b 	bl	8001296 <_close>
 80043a0:	1c43      	adds	r3, r0, #1
 80043a2:	d102      	bne.n	80043aa <_close_r+0x1a>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	b103      	cbz	r3, 80043aa <_close_r+0x1a>
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	bd38      	pop	{r3, r4, r5, pc}
 80043ac:	20000264 	.word	0x20000264

080043b0 <_lseek_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d07      	ldr	r5, [pc, #28]	; (80043d0 <_lseek_r+0x20>)
 80043b4:	4604      	mov	r4, r0
 80043b6:	4608      	mov	r0, r1
 80043b8:	4611      	mov	r1, r2
 80043ba:	2200      	movs	r2, #0
 80043bc:	602a      	str	r2, [r5, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	f7fc ff90 	bl	80012e4 <_lseek>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d102      	bne.n	80043ce <_lseek_r+0x1e>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	b103      	cbz	r3, 80043ce <_lseek_r+0x1e>
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	20000264 	.word	0x20000264

080043d4 <_read_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4d07      	ldr	r5, [pc, #28]	; (80043f4 <_read_r+0x20>)
 80043d8:	4604      	mov	r4, r0
 80043da:	4608      	mov	r0, r1
 80043dc:	4611      	mov	r1, r2
 80043de:	2200      	movs	r2, #0
 80043e0:	602a      	str	r2, [r5, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f7fc ff1e 	bl	8001224 <_read>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d102      	bne.n	80043f2 <_read_r+0x1e>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	b103      	cbz	r3, 80043f2 <_read_r+0x1e>
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	20000264 	.word	0x20000264

080043f8 <_write_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4d07      	ldr	r5, [pc, #28]	; (8004418 <_write_r+0x20>)
 80043fc:	4604      	mov	r4, r0
 80043fe:	4608      	mov	r0, r1
 8004400:	4611      	mov	r1, r2
 8004402:	2200      	movs	r2, #0
 8004404:	602a      	str	r2, [r5, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	f7fc ff29 	bl	800125e <_write>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_write_r+0x1e>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	b103      	cbz	r3, 8004416 <_write_r+0x1e>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	20000264 	.word	0x20000264

0800441c <__errno>:
 800441c:	4b01      	ldr	r3, [pc, #4]	; (8004424 <__errno+0x8>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000064 	.word	0x20000064

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f000 fd9e 	bl	8004f7c <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08005048 	.word	0x08005048
 8004464:	08005048 	.word	0x08005048
 8004468:	08005048 	.word	0x08005048
 800446c:	0800504c 	.word	0x0800504c

08004470 <__retarget_lock_init_recursive>:
 8004470:	4770      	bx	lr

08004472 <__retarget_lock_acquire_recursive>:
 8004472:	4770      	bx	lr

08004474 <__retarget_lock_release_recursive>:
 8004474:	4770      	bx	lr
	...

08004478 <_free_r>:
 8004478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800447a:	2900      	cmp	r1, #0
 800447c:	d044      	beq.n	8004508 <_free_r+0x90>
 800447e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004482:	9001      	str	r0, [sp, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f1a1 0404 	sub.w	r4, r1, #4
 800448a:	bfb8      	it	lt
 800448c:	18e4      	addlt	r4, r4, r3
 800448e:	f000 f8df 	bl	8004650 <__malloc_lock>
 8004492:	4a1e      	ldr	r2, [pc, #120]	; (800450c <_free_r+0x94>)
 8004494:	9801      	ldr	r0, [sp, #4]
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	b933      	cbnz	r3, 80044a8 <_free_r+0x30>
 800449a:	6063      	str	r3, [r4, #4]
 800449c:	6014      	str	r4, [r2, #0]
 800449e:	b003      	add	sp, #12
 80044a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044a4:	f000 b8da 	b.w	800465c <__malloc_unlock>
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	d908      	bls.n	80044be <_free_r+0x46>
 80044ac:	6825      	ldr	r5, [r4, #0]
 80044ae:	1961      	adds	r1, r4, r5
 80044b0:	428b      	cmp	r3, r1
 80044b2:	bf01      	itttt	eq
 80044b4:	6819      	ldreq	r1, [r3, #0]
 80044b6:	685b      	ldreq	r3, [r3, #4]
 80044b8:	1949      	addeq	r1, r1, r5
 80044ba:	6021      	streq	r1, [r4, #0]
 80044bc:	e7ed      	b.n	800449a <_free_r+0x22>
 80044be:	461a      	mov	r2, r3
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	b10b      	cbz	r3, 80044c8 <_free_r+0x50>
 80044c4:	42a3      	cmp	r3, r4
 80044c6:	d9fa      	bls.n	80044be <_free_r+0x46>
 80044c8:	6811      	ldr	r1, [r2, #0]
 80044ca:	1855      	adds	r5, r2, r1
 80044cc:	42a5      	cmp	r5, r4
 80044ce:	d10b      	bne.n	80044e8 <_free_r+0x70>
 80044d0:	6824      	ldr	r4, [r4, #0]
 80044d2:	4421      	add	r1, r4
 80044d4:	1854      	adds	r4, r2, r1
 80044d6:	42a3      	cmp	r3, r4
 80044d8:	6011      	str	r1, [r2, #0]
 80044da:	d1e0      	bne.n	800449e <_free_r+0x26>
 80044dc:	681c      	ldr	r4, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	6053      	str	r3, [r2, #4]
 80044e2:	440c      	add	r4, r1
 80044e4:	6014      	str	r4, [r2, #0]
 80044e6:	e7da      	b.n	800449e <_free_r+0x26>
 80044e8:	d902      	bls.n	80044f0 <_free_r+0x78>
 80044ea:	230c      	movs	r3, #12
 80044ec:	6003      	str	r3, [r0, #0]
 80044ee:	e7d6      	b.n	800449e <_free_r+0x26>
 80044f0:	6825      	ldr	r5, [r4, #0]
 80044f2:	1961      	adds	r1, r4, r5
 80044f4:	428b      	cmp	r3, r1
 80044f6:	bf04      	itt	eq
 80044f8:	6819      	ldreq	r1, [r3, #0]
 80044fa:	685b      	ldreq	r3, [r3, #4]
 80044fc:	6063      	str	r3, [r4, #4]
 80044fe:	bf04      	itt	eq
 8004500:	1949      	addeq	r1, r1, r5
 8004502:	6021      	streq	r1, [r4, #0]
 8004504:	6054      	str	r4, [r2, #4]
 8004506:	e7ca      	b.n	800449e <_free_r+0x26>
 8004508:	b003      	add	sp, #12
 800450a:	bd30      	pop	{r4, r5, pc}
 800450c:	2000026c 	.word	0x2000026c

08004510 <sbrk_aligned>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	4e0e      	ldr	r6, [pc, #56]	; (800454c <sbrk_aligned+0x3c>)
 8004514:	460c      	mov	r4, r1
 8004516:	6831      	ldr	r1, [r6, #0]
 8004518:	4605      	mov	r5, r0
 800451a:	b911      	cbnz	r1, 8004522 <sbrk_aligned+0x12>
 800451c:	f000 fcd8 	bl	8004ed0 <_sbrk_r>
 8004520:	6030      	str	r0, [r6, #0]
 8004522:	4621      	mov	r1, r4
 8004524:	4628      	mov	r0, r5
 8004526:	f000 fcd3 	bl	8004ed0 <_sbrk_r>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	d00a      	beq.n	8004544 <sbrk_aligned+0x34>
 800452e:	1cc4      	adds	r4, r0, #3
 8004530:	f024 0403 	bic.w	r4, r4, #3
 8004534:	42a0      	cmp	r0, r4
 8004536:	d007      	beq.n	8004548 <sbrk_aligned+0x38>
 8004538:	1a21      	subs	r1, r4, r0
 800453a:	4628      	mov	r0, r5
 800453c:	f000 fcc8 	bl	8004ed0 <_sbrk_r>
 8004540:	3001      	adds	r0, #1
 8004542:	d101      	bne.n	8004548 <sbrk_aligned+0x38>
 8004544:	f04f 34ff 	mov.w	r4, #4294967295
 8004548:	4620      	mov	r0, r4
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	20000270 	.word	0x20000270

08004550 <_malloc_r>:
 8004550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004554:	1ccd      	adds	r5, r1, #3
 8004556:	f025 0503 	bic.w	r5, r5, #3
 800455a:	3508      	adds	r5, #8
 800455c:	2d0c      	cmp	r5, #12
 800455e:	bf38      	it	cc
 8004560:	250c      	movcc	r5, #12
 8004562:	2d00      	cmp	r5, #0
 8004564:	4607      	mov	r7, r0
 8004566:	db01      	blt.n	800456c <_malloc_r+0x1c>
 8004568:	42a9      	cmp	r1, r5
 800456a:	d905      	bls.n	8004578 <_malloc_r+0x28>
 800456c:	230c      	movs	r3, #12
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	2600      	movs	r6, #0
 8004572:	4630      	mov	r0, r6
 8004574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004578:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800464c <_malloc_r+0xfc>
 800457c:	f000 f868 	bl	8004650 <__malloc_lock>
 8004580:	f8d8 3000 	ldr.w	r3, [r8]
 8004584:	461c      	mov	r4, r3
 8004586:	bb5c      	cbnz	r4, 80045e0 <_malloc_r+0x90>
 8004588:	4629      	mov	r1, r5
 800458a:	4638      	mov	r0, r7
 800458c:	f7ff ffc0 	bl	8004510 <sbrk_aligned>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	4604      	mov	r4, r0
 8004594:	d155      	bne.n	8004642 <_malloc_r+0xf2>
 8004596:	f8d8 4000 	ldr.w	r4, [r8]
 800459a:	4626      	mov	r6, r4
 800459c:	2e00      	cmp	r6, #0
 800459e:	d145      	bne.n	800462c <_malloc_r+0xdc>
 80045a0:	2c00      	cmp	r4, #0
 80045a2:	d048      	beq.n	8004636 <_malloc_r+0xe6>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	4631      	mov	r1, r6
 80045a8:	4638      	mov	r0, r7
 80045aa:	eb04 0903 	add.w	r9, r4, r3
 80045ae:	f000 fc8f 	bl	8004ed0 <_sbrk_r>
 80045b2:	4581      	cmp	r9, r0
 80045b4:	d13f      	bne.n	8004636 <_malloc_r+0xe6>
 80045b6:	6821      	ldr	r1, [r4, #0]
 80045b8:	1a6d      	subs	r5, r5, r1
 80045ba:	4629      	mov	r1, r5
 80045bc:	4638      	mov	r0, r7
 80045be:	f7ff ffa7 	bl	8004510 <sbrk_aligned>
 80045c2:	3001      	adds	r0, #1
 80045c4:	d037      	beq.n	8004636 <_malloc_r+0xe6>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	442b      	add	r3, r5
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	f8d8 3000 	ldr.w	r3, [r8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d038      	beq.n	8004646 <_malloc_r+0xf6>
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	42a2      	cmp	r2, r4
 80045d8:	d12b      	bne.n	8004632 <_malloc_r+0xe2>
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	e00f      	b.n	8004600 <_malloc_r+0xb0>
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	1b52      	subs	r2, r2, r5
 80045e4:	d41f      	bmi.n	8004626 <_malloc_r+0xd6>
 80045e6:	2a0b      	cmp	r2, #11
 80045e8:	d917      	bls.n	800461a <_malloc_r+0xca>
 80045ea:	1961      	adds	r1, r4, r5
 80045ec:	42a3      	cmp	r3, r4
 80045ee:	6025      	str	r5, [r4, #0]
 80045f0:	bf18      	it	ne
 80045f2:	6059      	strne	r1, [r3, #4]
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	bf08      	it	eq
 80045f8:	f8c8 1000 	streq.w	r1, [r8]
 80045fc:	5162      	str	r2, [r4, r5]
 80045fe:	604b      	str	r3, [r1, #4]
 8004600:	4638      	mov	r0, r7
 8004602:	f104 060b 	add.w	r6, r4, #11
 8004606:	f000 f829 	bl	800465c <__malloc_unlock>
 800460a:	f026 0607 	bic.w	r6, r6, #7
 800460e:	1d23      	adds	r3, r4, #4
 8004610:	1af2      	subs	r2, r6, r3
 8004612:	d0ae      	beq.n	8004572 <_malloc_r+0x22>
 8004614:	1b9b      	subs	r3, r3, r6
 8004616:	50a3      	str	r3, [r4, r2]
 8004618:	e7ab      	b.n	8004572 <_malloc_r+0x22>
 800461a:	42a3      	cmp	r3, r4
 800461c:	6862      	ldr	r2, [r4, #4]
 800461e:	d1dd      	bne.n	80045dc <_malloc_r+0x8c>
 8004620:	f8c8 2000 	str.w	r2, [r8]
 8004624:	e7ec      	b.n	8004600 <_malloc_r+0xb0>
 8004626:	4623      	mov	r3, r4
 8004628:	6864      	ldr	r4, [r4, #4]
 800462a:	e7ac      	b.n	8004586 <_malloc_r+0x36>
 800462c:	4634      	mov	r4, r6
 800462e:	6876      	ldr	r6, [r6, #4]
 8004630:	e7b4      	b.n	800459c <_malloc_r+0x4c>
 8004632:	4613      	mov	r3, r2
 8004634:	e7cc      	b.n	80045d0 <_malloc_r+0x80>
 8004636:	230c      	movs	r3, #12
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	4638      	mov	r0, r7
 800463c:	f000 f80e 	bl	800465c <__malloc_unlock>
 8004640:	e797      	b.n	8004572 <_malloc_r+0x22>
 8004642:	6025      	str	r5, [r4, #0]
 8004644:	e7dc      	b.n	8004600 <_malloc_r+0xb0>
 8004646:	605b      	str	r3, [r3, #4]
 8004648:	deff      	udf	#255	; 0xff
 800464a:	bf00      	nop
 800464c:	2000026c 	.word	0x2000026c

08004650 <__malloc_lock>:
 8004650:	4801      	ldr	r0, [pc, #4]	; (8004658 <__malloc_lock+0x8>)
 8004652:	f7ff bf0e 	b.w	8004472 <__retarget_lock_acquire_recursive>
 8004656:	bf00      	nop
 8004658:	20000268 	.word	0x20000268

0800465c <__malloc_unlock>:
 800465c:	4801      	ldr	r0, [pc, #4]	; (8004664 <__malloc_unlock+0x8>)
 800465e:	f7ff bf09 	b.w	8004474 <__retarget_lock_release_recursive>
 8004662:	bf00      	nop
 8004664:	20000268 	.word	0x20000268

08004668 <__ssputs_r>:
 8004668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	688e      	ldr	r6, [r1, #8]
 800466e:	461f      	mov	r7, r3
 8004670:	42be      	cmp	r6, r7
 8004672:	680b      	ldr	r3, [r1, #0]
 8004674:	4682      	mov	sl, r0
 8004676:	460c      	mov	r4, r1
 8004678:	4690      	mov	r8, r2
 800467a:	d82c      	bhi.n	80046d6 <__ssputs_r+0x6e>
 800467c:	898a      	ldrh	r2, [r1, #12]
 800467e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004682:	d026      	beq.n	80046d2 <__ssputs_r+0x6a>
 8004684:	6965      	ldr	r5, [r4, #20]
 8004686:	6909      	ldr	r1, [r1, #16]
 8004688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800468c:	eba3 0901 	sub.w	r9, r3, r1
 8004690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004694:	1c7b      	adds	r3, r7, #1
 8004696:	444b      	add	r3, r9
 8004698:	106d      	asrs	r5, r5, #1
 800469a:	429d      	cmp	r5, r3
 800469c:	bf38      	it	cc
 800469e:	461d      	movcc	r5, r3
 80046a0:	0553      	lsls	r3, r2, #21
 80046a2:	d527      	bpl.n	80046f4 <__ssputs_r+0x8c>
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7ff ff53 	bl	8004550 <_malloc_r>
 80046aa:	4606      	mov	r6, r0
 80046ac:	b360      	cbz	r0, 8004708 <__ssputs_r+0xa0>
 80046ae:	6921      	ldr	r1, [r4, #16]
 80046b0:	464a      	mov	r2, r9
 80046b2:	f000 fc1d 	bl	8004ef0 <memcpy>
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c0:	81a3      	strh	r3, [r4, #12]
 80046c2:	6126      	str	r6, [r4, #16]
 80046c4:	6165      	str	r5, [r4, #20]
 80046c6:	444e      	add	r6, r9
 80046c8:	eba5 0509 	sub.w	r5, r5, r9
 80046cc:	6026      	str	r6, [r4, #0]
 80046ce:	60a5      	str	r5, [r4, #8]
 80046d0:	463e      	mov	r6, r7
 80046d2:	42be      	cmp	r6, r7
 80046d4:	d900      	bls.n	80046d8 <__ssputs_r+0x70>
 80046d6:	463e      	mov	r6, r7
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4632      	mov	r2, r6
 80046dc:	4641      	mov	r1, r8
 80046de:	f000 fbbb 	bl	8004e58 <memmove>
 80046e2:	68a3      	ldr	r3, [r4, #8]
 80046e4:	1b9b      	subs	r3, r3, r6
 80046e6:	60a3      	str	r3, [r4, #8]
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	4433      	add	r3, r6
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	2000      	movs	r0, #0
 80046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f4:	462a      	mov	r2, r5
 80046f6:	f000 fc09 	bl	8004f0c <_realloc_r>
 80046fa:	4606      	mov	r6, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d1e0      	bne.n	80046c2 <__ssputs_r+0x5a>
 8004700:	6921      	ldr	r1, [r4, #16]
 8004702:	4650      	mov	r0, sl
 8004704:	f7ff feb8 	bl	8004478 <_free_r>
 8004708:	230c      	movs	r3, #12
 800470a:	f8ca 3000 	str.w	r3, [sl]
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	f04f 30ff 	mov.w	r0, #4294967295
 800471a:	e7e9      	b.n	80046f0 <__ssputs_r+0x88>

0800471c <_svfiprintf_r>:
 800471c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004720:	4698      	mov	r8, r3
 8004722:	898b      	ldrh	r3, [r1, #12]
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	b09d      	sub	sp, #116	; 0x74
 8004728:	4607      	mov	r7, r0
 800472a:	460d      	mov	r5, r1
 800472c:	4614      	mov	r4, r2
 800472e:	d50e      	bpl.n	800474e <_svfiprintf_r+0x32>
 8004730:	690b      	ldr	r3, [r1, #16]
 8004732:	b963      	cbnz	r3, 800474e <_svfiprintf_r+0x32>
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	f7ff ff0b 	bl	8004550 <_malloc_r>
 800473a:	6028      	str	r0, [r5, #0]
 800473c:	6128      	str	r0, [r5, #16]
 800473e:	b920      	cbnz	r0, 800474a <_svfiprintf_r+0x2e>
 8004740:	230c      	movs	r3, #12
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	e0d0      	b.n	80048ec <_svfiprintf_r+0x1d0>
 800474a:	2340      	movs	r3, #64	; 0x40
 800474c:	616b      	str	r3, [r5, #20]
 800474e:	2300      	movs	r3, #0
 8004750:	9309      	str	r3, [sp, #36]	; 0x24
 8004752:	2320      	movs	r3, #32
 8004754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004758:	f8cd 800c 	str.w	r8, [sp, #12]
 800475c:	2330      	movs	r3, #48	; 0x30
 800475e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004904 <_svfiprintf_r+0x1e8>
 8004762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004766:	f04f 0901 	mov.w	r9, #1
 800476a:	4623      	mov	r3, r4
 800476c:	469a      	mov	sl, r3
 800476e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004772:	b10a      	cbz	r2, 8004778 <_svfiprintf_r+0x5c>
 8004774:	2a25      	cmp	r2, #37	; 0x25
 8004776:	d1f9      	bne.n	800476c <_svfiprintf_r+0x50>
 8004778:	ebba 0b04 	subs.w	fp, sl, r4
 800477c:	d00b      	beq.n	8004796 <_svfiprintf_r+0x7a>
 800477e:	465b      	mov	r3, fp
 8004780:	4622      	mov	r2, r4
 8004782:	4629      	mov	r1, r5
 8004784:	4638      	mov	r0, r7
 8004786:	f7ff ff6f 	bl	8004668 <__ssputs_r>
 800478a:	3001      	adds	r0, #1
 800478c:	f000 80a9 	beq.w	80048e2 <_svfiprintf_r+0x1c6>
 8004790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004792:	445a      	add	r2, fp
 8004794:	9209      	str	r2, [sp, #36]	; 0x24
 8004796:	f89a 3000 	ldrb.w	r3, [sl]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80a1 	beq.w	80048e2 <_svfiprintf_r+0x1c6>
 80047a0:	2300      	movs	r3, #0
 80047a2:	f04f 32ff 	mov.w	r2, #4294967295
 80047a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047aa:	f10a 0a01 	add.w	sl, sl, #1
 80047ae:	9304      	str	r3, [sp, #16]
 80047b0:	9307      	str	r3, [sp, #28]
 80047b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047b6:	931a      	str	r3, [sp, #104]	; 0x68
 80047b8:	4654      	mov	r4, sl
 80047ba:	2205      	movs	r2, #5
 80047bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c0:	4850      	ldr	r0, [pc, #320]	; (8004904 <_svfiprintf_r+0x1e8>)
 80047c2:	f7fb fd2d 	bl	8000220 <memchr>
 80047c6:	9a04      	ldr	r2, [sp, #16]
 80047c8:	b9d8      	cbnz	r0, 8004802 <_svfiprintf_r+0xe6>
 80047ca:	06d0      	lsls	r0, r2, #27
 80047cc:	bf44      	itt	mi
 80047ce:	2320      	movmi	r3, #32
 80047d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047d4:	0711      	lsls	r1, r2, #28
 80047d6:	bf44      	itt	mi
 80047d8:	232b      	movmi	r3, #43	; 0x2b
 80047da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047de:	f89a 3000 	ldrb.w	r3, [sl]
 80047e2:	2b2a      	cmp	r3, #42	; 0x2a
 80047e4:	d015      	beq.n	8004812 <_svfiprintf_r+0xf6>
 80047e6:	9a07      	ldr	r2, [sp, #28]
 80047e8:	4654      	mov	r4, sl
 80047ea:	2000      	movs	r0, #0
 80047ec:	f04f 0c0a 	mov.w	ip, #10
 80047f0:	4621      	mov	r1, r4
 80047f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047f6:	3b30      	subs	r3, #48	; 0x30
 80047f8:	2b09      	cmp	r3, #9
 80047fa:	d94d      	bls.n	8004898 <_svfiprintf_r+0x17c>
 80047fc:	b1b0      	cbz	r0, 800482c <_svfiprintf_r+0x110>
 80047fe:	9207      	str	r2, [sp, #28]
 8004800:	e014      	b.n	800482c <_svfiprintf_r+0x110>
 8004802:	eba0 0308 	sub.w	r3, r0, r8
 8004806:	fa09 f303 	lsl.w	r3, r9, r3
 800480a:	4313      	orrs	r3, r2
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	46a2      	mov	sl, r4
 8004810:	e7d2      	b.n	80047b8 <_svfiprintf_r+0x9c>
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	1d19      	adds	r1, r3, #4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	9103      	str	r1, [sp, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	bfbb      	ittet	lt
 800481e:	425b      	neglt	r3, r3
 8004820:	f042 0202 	orrlt.w	r2, r2, #2
 8004824:	9307      	strge	r3, [sp, #28]
 8004826:	9307      	strlt	r3, [sp, #28]
 8004828:	bfb8      	it	lt
 800482a:	9204      	strlt	r2, [sp, #16]
 800482c:	7823      	ldrb	r3, [r4, #0]
 800482e:	2b2e      	cmp	r3, #46	; 0x2e
 8004830:	d10c      	bne.n	800484c <_svfiprintf_r+0x130>
 8004832:	7863      	ldrb	r3, [r4, #1]
 8004834:	2b2a      	cmp	r3, #42	; 0x2a
 8004836:	d134      	bne.n	80048a2 <_svfiprintf_r+0x186>
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	9203      	str	r2, [sp, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	bfb8      	it	lt
 8004844:	f04f 33ff 	movlt.w	r3, #4294967295
 8004848:	3402      	adds	r4, #2
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004914 <_svfiprintf_r+0x1f8>
 8004850:	7821      	ldrb	r1, [r4, #0]
 8004852:	2203      	movs	r2, #3
 8004854:	4650      	mov	r0, sl
 8004856:	f7fb fce3 	bl	8000220 <memchr>
 800485a:	b138      	cbz	r0, 800486c <_svfiprintf_r+0x150>
 800485c:	9b04      	ldr	r3, [sp, #16]
 800485e:	eba0 000a 	sub.w	r0, r0, sl
 8004862:	2240      	movs	r2, #64	; 0x40
 8004864:	4082      	lsls	r2, r0
 8004866:	4313      	orrs	r3, r2
 8004868:	3401      	adds	r4, #1
 800486a:	9304      	str	r3, [sp, #16]
 800486c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004870:	4825      	ldr	r0, [pc, #148]	; (8004908 <_svfiprintf_r+0x1ec>)
 8004872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004876:	2206      	movs	r2, #6
 8004878:	f7fb fcd2 	bl	8000220 <memchr>
 800487c:	2800      	cmp	r0, #0
 800487e:	d038      	beq.n	80048f2 <_svfiprintf_r+0x1d6>
 8004880:	4b22      	ldr	r3, [pc, #136]	; (800490c <_svfiprintf_r+0x1f0>)
 8004882:	bb1b      	cbnz	r3, 80048cc <_svfiprintf_r+0x1b0>
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	3307      	adds	r3, #7
 8004888:	f023 0307 	bic.w	r3, r3, #7
 800488c:	3308      	adds	r3, #8
 800488e:	9303      	str	r3, [sp, #12]
 8004890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004892:	4433      	add	r3, r6
 8004894:	9309      	str	r3, [sp, #36]	; 0x24
 8004896:	e768      	b.n	800476a <_svfiprintf_r+0x4e>
 8004898:	fb0c 3202 	mla	r2, ip, r2, r3
 800489c:	460c      	mov	r4, r1
 800489e:	2001      	movs	r0, #1
 80048a0:	e7a6      	b.n	80047f0 <_svfiprintf_r+0xd4>
 80048a2:	2300      	movs	r3, #0
 80048a4:	3401      	adds	r4, #1
 80048a6:	9305      	str	r3, [sp, #20]
 80048a8:	4619      	mov	r1, r3
 80048aa:	f04f 0c0a 	mov.w	ip, #10
 80048ae:	4620      	mov	r0, r4
 80048b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048b4:	3a30      	subs	r2, #48	; 0x30
 80048b6:	2a09      	cmp	r2, #9
 80048b8:	d903      	bls.n	80048c2 <_svfiprintf_r+0x1a6>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0c6      	beq.n	800484c <_svfiprintf_r+0x130>
 80048be:	9105      	str	r1, [sp, #20]
 80048c0:	e7c4      	b.n	800484c <_svfiprintf_r+0x130>
 80048c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80048c6:	4604      	mov	r4, r0
 80048c8:	2301      	movs	r3, #1
 80048ca:	e7f0      	b.n	80048ae <_svfiprintf_r+0x192>
 80048cc:	ab03      	add	r3, sp, #12
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	462a      	mov	r2, r5
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <_svfiprintf_r+0x1f4>)
 80048d4:	a904      	add	r1, sp, #16
 80048d6:	4638      	mov	r0, r7
 80048d8:	f3af 8000 	nop.w
 80048dc:	1c42      	adds	r2, r0, #1
 80048de:	4606      	mov	r6, r0
 80048e0:	d1d6      	bne.n	8004890 <_svfiprintf_r+0x174>
 80048e2:	89ab      	ldrh	r3, [r5, #12]
 80048e4:	065b      	lsls	r3, r3, #25
 80048e6:	f53f af2d 	bmi.w	8004744 <_svfiprintf_r+0x28>
 80048ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048ec:	b01d      	add	sp, #116	; 0x74
 80048ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f2:	ab03      	add	r3, sp, #12
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	462a      	mov	r2, r5
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <_svfiprintf_r+0x1f4>)
 80048fa:	a904      	add	r1, sp, #16
 80048fc:	4638      	mov	r0, r7
 80048fe:	f000 f879 	bl	80049f4 <_printf_i>
 8004902:	e7eb      	b.n	80048dc <_svfiprintf_r+0x1c0>
 8004904:	0800500c 	.word	0x0800500c
 8004908:	08005016 	.word	0x08005016
 800490c:	00000000 	.word	0x00000000
 8004910:	08004669 	.word	0x08004669
 8004914:	08005012 	.word	0x08005012

08004918 <_printf_common>:
 8004918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800491c:	4616      	mov	r6, r2
 800491e:	4699      	mov	r9, r3
 8004920:	688a      	ldr	r2, [r1, #8]
 8004922:	690b      	ldr	r3, [r1, #16]
 8004924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004928:	4293      	cmp	r3, r2
 800492a:	bfb8      	it	lt
 800492c:	4613      	movlt	r3, r2
 800492e:	6033      	str	r3, [r6, #0]
 8004930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004934:	4607      	mov	r7, r0
 8004936:	460c      	mov	r4, r1
 8004938:	b10a      	cbz	r2, 800493e <_printf_common+0x26>
 800493a:	3301      	adds	r3, #1
 800493c:	6033      	str	r3, [r6, #0]
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	0699      	lsls	r1, r3, #26
 8004942:	bf42      	ittt	mi
 8004944:	6833      	ldrmi	r3, [r6, #0]
 8004946:	3302      	addmi	r3, #2
 8004948:	6033      	strmi	r3, [r6, #0]
 800494a:	6825      	ldr	r5, [r4, #0]
 800494c:	f015 0506 	ands.w	r5, r5, #6
 8004950:	d106      	bne.n	8004960 <_printf_common+0x48>
 8004952:	f104 0a19 	add.w	sl, r4, #25
 8004956:	68e3      	ldr	r3, [r4, #12]
 8004958:	6832      	ldr	r2, [r6, #0]
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	42ab      	cmp	r3, r5
 800495e:	dc26      	bgt.n	80049ae <_printf_common+0x96>
 8004960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004964:	1e13      	subs	r3, r2, #0
 8004966:	6822      	ldr	r2, [r4, #0]
 8004968:	bf18      	it	ne
 800496a:	2301      	movne	r3, #1
 800496c:	0692      	lsls	r2, r2, #26
 800496e:	d42b      	bmi.n	80049c8 <_printf_common+0xb0>
 8004970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004974:	4649      	mov	r1, r9
 8004976:	4638      	mov	r0, r7
 8004978:	47c0      	blx	r8
 800497a:	3001      	adds	r0, #1
 800497c:	d01e      	beq.n	80049bc <_printf_common+0xa4>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	6922      	ldr	r2, [r4, #16]
 8004982:	f003 0306 	and.w	r3, r3, #6
 8004986:	2b04      	cmp	r3, #4
 8004988:	bf02      	ittt	eq
 800498a:	68e5      	ldreq	r5, [r4, #12]
 800498c:	6833      	ldreq	r3, [r6, #0]
 800498e:	1aed      	subeq	r5, r5, r3
 8004990:	68a3      	ldr	r3, [r4, #8]
 8004992:	bf0c      	ite	eq
 8004994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004998:	2500      	movne	r5, #0
 800499a:	4293      	cmp	r3, r2
 800499c:	bfc4      	itt	gt
 800499e:	1a9b      	subgt	r3, r3, r2
 80049a0:	18ed      	addgt	r5, r5, r3
 80049a2:	2600      	movs	r6, #0
 80049a4:	341a      	adds	r4, #26
 80049a6:	42b5      	cmp	r5, r6
 80049a8:	d11a      	bne.n	80049e0 <_printf_common+0xc8>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e008      	b.n	80049c0 <_printf_common+0xa8>
 80049ae:	2301      	movs	r3, #1
 80049b0:	4652      	mov	r2, sl
 80049b2:	4649      	mov	r1, r9
 80049b4:	4638      	mov	r0, r7
 80049b6:	47c0      	blx	r8
 80049b8:	3001      	adds	r0, #1
 80049ba:	d103      	bne.n	80049c4 <_printf_common+0xac>
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c4:	3501      	adds	r5, #1
 80049c6:	e7c6      	b.n	8004956 <_printf_common+0x3e>
 80049c8:	18e1      	adds	r1, r4, r3
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	2030      	movs	r0, #48	; 0x30
 80049ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049d2:	4422      	add	r2, r4
 80049d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049dc:	3302      	adds	r3, #2
 80049de:	e7c7      	b.n	8004970 <_printf_common+0x58>
 80049e0:	2301      	movs	r3, #1
 80049e2:	4622      	mov	r2, r4
 80049e4:	4649      	mov	r1, r9
 80049e6:	4638      	mov	r0, r7
 80049e8:	47c0      	blx	r8
 80049ea:	3001      	adds	r0, #1
 80049ec:	d0e6      	beq.n	80049bc <_printf_common+0xa4>
 80049ee:	3601      	adds	r6, #1
 80049f0:	e7d9      	b.n	80049a6 <_printf_common+0x8e>
	...

080049f4 <_printf_i>:
 80049f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f8:	7e0f      	ldrb	r7, [r1, #24]
 80049fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049fc:	2f78      	cmp	r7, #120	; 0x78
 80049fe:	4691      	mov	r9, r2
 8004a00:	4680      	mov	r8, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	469a      	mov	sl, r3
 8004a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a0a:	d807      	bhi.n	8004a1c <_printf_i+0x28>
 8004a0c:	2f62      	cmp	r7, #98	; 0x62
 8004a0e:	d80a      	bhi.n	8004a26 <_printf_i+0x32>
 8004a10:	2f00      	cmp	r7, #0
 8004a12:	f000 80d4 	beq.w	8004bbe <_printf_i+0x1ca>
 8004a16:	2f58      	cmp	r7, #88	; 0x58
 8004a18:	f000 80c0 	beq.w	8004b9c <_printf_i+0x1a8>
 8004a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a24:	e03a      	b.n	8004a9c <_printf_i+0xa8>
 8004a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a2a:	2b15      	cmp	r3, #21
 8004a2c:	d8f6      	bhi.n	8004a1c <_printf_i+0x28>
 8004a2e:	a101      	add	r1, pc, #4	; (adr r1, 8004a34 <_printf_i+0x40>)
 8004a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a34:	08004a8d 	.word	0x08004a8d
 8004a38:	08004aa1 	.word	0x08004aa1
 8004a3c:	08004a1d 	.word	0x08004a1d
 8004a40:	08004a1d 	.word	0x08004a1d
 8004a44:	08004a1d 	.word	0x08004a1d
 8004a48:	08004a1d 	.word	0x08004a1d
 8004a4c:	08004aa1 	.word	0x08004aa1
 8004a50:	08004a1d 	.word	0x08004a1d
 8004a54:	08004a1d 	.word	0x08004a1d
 8004a58:	08004a1d 	.word	0x08004a1d
 8004a5c:	08004a1d 	.word	0x08004a1d
 8004a60:	08004ba5 	.word	0x08004ba5
 8004a64:	08004acd 	.word	0x08004acd
 8004a68:	08004b5f 	.word	0x08004b5f
 8004a6c:	08004a1d 	.word	0x08004a1d
 8004a70:	08004a1d 	.word	0x08004a1d
 8004a74:	08004bc7 	.word	0x08004bc7
 8004a78:	08004a1d 	.word	0x08004a1d
 8004a7c:	08004acd 	.word	0x08004acd
 8004a80:	08004a1d 	.word	0x08004a1d
 8004a84:	08004a1d 	.word	0x08004a1d
 8004a88:	08004b67 	.word	0x08004b67
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	1d1a      	adds	r2, r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	602a      	str	r2, [r5, #0]
 8004a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e09f      	b.n	8004be0 <_printf_i+0x1ec>
 8004aa0:	6820      	ldr	r0, [r4, #0]
 8004aa2:	682b      	ldr	r3, [r5, #0]
 8004aa4:	0607      	lsls	r7, r0, #24
 8004aa6:	f103 0104 	add.w	r1, r3, #4
 8004aaa:	6029      	str	r1, [r5, #0]
 8004aac:	d501      	bpl.n	8004ab2 <_printf_i+0xbe>
 8004aae:	681e      	ldr	r6, [r3, #0]
 8004ab0:	e003      	b.n	8004aba <_printf_i+0xc6>
 8004ab2:	0646      	lsls	r6, r0, #25
 8004ab4:	d5fb      	bpl.n	8004aae <_printf_i+0xba>
 8004ab6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004aba:	2e00      	cmp	r6, #0
 8004abc:	da03      	bge.n	8004ac6 <_printf_i+0xd2>
 8004abe:	232d      	movs	r3, #45	; 0x2d
 8004ac0:	4276      	negs	r6, r6
 8004ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac6:	485a      	ldr	r0, [pc, #360]	; (8004c30 <_printf_i+0x23c>)
 8004ac8:	230a      	movs	r3, #10
 8004aca:	e012      	b.n	8004af2 <_printf_i+0xfe>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	6820      	ldr	r0, [r4, #0]
 8004ad0:	1d19      	adds	r1, r3, #4
 8004ad2:	6029      	str	r1, [r5, #0]
 8004ad4:	0605      	lsls	r5, r0, #24
 8004ad6:	d501      	bpl.n	8004adc <_printf_i+0xe8>
 8004ad8:	681e      	ldr	r6, [r3, #0]
 8004ada:	e002      	b.n	8004ae2 <_printf_i+0xee>
 8004adc:	0641      	lsls	r1, r0, #25
 8004ade:	d5fb      	bpl.n	8004ad8 <_printf_i+0xe4>
 8004ae0:	881e      	ldrh	r6, [r3, #0]
 8004ae2:	4853      	ldr	r0, [pc, #332]	; (8004c30 <_printf_i+0x23c>)
 8004ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2308      	moveq	r3, #8
 8004aea:	230a      	movne	r3, #10
 8004aec:	2100      	movs	r1, #0
 8004aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004af2:	6865      	ldr	r5, [r4, #4]
 8004af4:	60a5      	str	r5, [r4, #8]
 8004af6:	2d00      	cmp	r5, #0
 8004af8:	bfa2      	ittt	ge
 8004afa:	6821      	ldrge	r1, [r4, #0]
 8004afc:	f021 0104 	bicge.w	r1, r1, #4
 8004b00:	6021      	strge	r1, [r4, #0]
 8004b02:	b90e      	cbnz	r6, 8004b08 <_printf_i+0x114>
 8004b04:	2d00      	cmp	r5, #0
 8004b06:	d04b      	beq.n	8004ba0 <_printf_i+0x1ac>
 8004b08:	4615      	mov	r5, r2
 8004b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8004b12:	5dc7      	ldrb	r7, [r0, r7]
 8004b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b18:	4637      	mov	r7, r6
 8004b1a:	42bb      	cmp	r3, r7
 8004b1c:	460e      	mov	r6, r1
 8004b1e:	d9f4      	bls.n	8004b0a <_printf_i+0x116>
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d10b      	bne.n	8004b3c <_printf_i+0x148>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	07de      	lsls	r6, r3, #31
 8004b28:	d508      	bpl.n	8004b3c <_printf_i+0x148>
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	6861      	ldr	r1, [r4, #4]
 8004b2e:	4299      	cmp	r1, r3
 8004b30:	bfde      	ittt	le
 8004b32:	2330      	movle	r3, #48	; 0x30
 8004b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b3c:	1b52      	subs	r2, r2, r5
 8004b3e:	6122      	str	r2, [r4, #16]
 8004b40:	f8cd a000 	str.w	sl, [sp]
 8004b44:	464b      	mov	r3, r9
 8004b46:	aa03      	add	r2, sp, #12
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	f7ff fee4 	bl	8004918 <_printf_common>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d14a      	bne.n	8004bea <_printf_i+0x1f6>
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	b004      	add	sp, #16
 8004b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	f043 0320 	orr.w	r3, r3, #32
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	4833      	ldr	r0, [pc, #204]	; (8004c34 <_printf_i+0x240>)
 8004b68:	2778      	movs	r7, #120	; 0x78
 8004b6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	6829      	ldr	r1, [r5, #0]
 8004b72:	061f      	lsls	r7, r3, #24
 8004b74:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b78:	d402      	bmi.n	8004b80 <_printf_i+0x18c>
 8004b7a:	065f      	lsls	r7, r3, #25
 8004b7c:	bf48      	it	mi
 8004b7e:	b2b6      	uxthmi	r6, r6
 8004b80:	07df      	lsls	r7, r3, #31
 8004b82:	bf48      	it	mi
 8004b84:	f043 0320 	orrmi.w	r3, r3, #32
 8004b88:	6029      	str	r1, [r5, #0]
 8004b8a:	bf48      	it	mi
 8004b8c:	6023      	strmi	r3, [r4, #0]
 8004b8e:	b91e      	cbnz	r6, 8004b98 <_printf_i+0x1a4>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	f023 0320 	bic.w	r3, r3, #32
 8004b96:	6023      	str	r3, [r4, #0]
 8004b98:	2310      	movs	r3, #16
 8004b9a:	e7a7      	b.n	8004aec <_printf_i+0xf8>
 8004b9c:	4824      	ldr	r0, [pc, #144]	; (8004c30 <_printf_i+0x23c>)
 8004b9e:	e7e4      	b.n	8004b6a <_printf_i+0x176>
 8004ba0:	4615      	mov	r5, r2
 8004ba2:	e7bd      	b.n	8004b20 <_printf_i+0x12c>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	6826      	ldr	r6, [r4, #0]
 8004ba8:	6961      	ldr	r1, [r4, #20]
 8004baa:	1d18      	adds	r0, r3, #4
 8004bac:	6028      	str	r0, [r5, #0]
 8004bae:	0635      	lsls	r5, r6, #24
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	d501      	bpl.n	8004bb8 <_printf_i+0x1c4>
 8004bb4:	6019      	str	r1, [r3, #0]
 8004bb6:	e002      	b.n	8004bbe <_printf_i+0x1ca>
 8004bb8:	0670      	lsls	r0, r6, #25
 8004bba:	d5fb      	bpl.n	8004bb4 <_printf_i+0x1c0>
 8004bbc:	8019      	strh	r1, [r3, #0]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	4615      	mov	r5, r2
 8004bc4:	e7bc      	b.n	8004b40 <_printf_i+0x14c>
 8004bc6:	682b      	ldr	r3, [r5, #0]
 8004bc8:	1d1a      	adds	r2, r3, #4
 8004bca:	602a      	str	r2, [r5, #0]
 8004bcc:	681d      	ldr	r5, [r3, #0]
 8004bce:	6862      	ldr	r2, [r4, #4]
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f7fb fb24 	bl	8000220 <memchr>
 8004bd8:	b108      	cbz	r0, 8004bde <_printf_i+0x1ea>
 8004bda:	1b40      	subs	r0, r0, r5
 8004bdc:	6060      	str	r0, [r4, #4]
 8004bde:	6863      	ldr	r3, [r4, #4]
 8004be0:	6123      	str	r3, [r4, #16]
 8004be2:	2300      	movs	r3, #0
 8004be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be8:	e7aa      	b.n	8004b40 <_printf_i+0x14c>
 8004bea:	6923      	ldr	r3, [r4, #16]
 8004bec:	462a      	mov	r2, r5
 8004bee:	4649      	mov	r1, r9
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	47d0      	blx	sl
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d0ad      	beq.n	8004b54 <_printf_i+0x160>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	079b      	lsls	r3, r3, #30
 8004bfc:	d413      	bmi.n	8004c26 <_printf_i+0x232>
 8004bfe:	68e0      	ldr	r0, [r4, #12]
 8004c00:	9b03      	ldr	r3, [sp, #12]
 8004c02:	4298      	cmp	r0, r3
 8004c04:	bfb8      	it	lt
 8004c06:	4618      	movlt	r0, r3
 8004c08:	e7a6      	b.n	8004b58 <_printf_i+0x164>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	4649      	mov	r1, r9
 8004c10:	4640      	mov	r0, r8
 8004c12:	47d0      	blx	sl
 8004c14:	3001      	adds	r0, #1
 8004c16:	d09d      	beq.n	8004b54 <_printf_i+0x160>
 8004c18:	3501      	adds	r5, #1
 8004c1a:	68e3      	ldr	r3, [r4, #12]
 8004c1c:	9903      	ldr	r1, [sp, #12]
 8004c1e:	1a5b      	subs	r3, r3, r1
 8004c20:	42ab      	cmp	r3, r5
 8004c22:	dcf2      	bgt.n	8004c0a <_printf_i+0x216>
 8004c24:	e7eb      	b.n	8004bfe <_printf_i+0x20a>
 8004c26:	2500      	movs	r5, #0
 8004c28:	f104 0619 	add.w	r6, r4, #25
 8004c2c:	e7f5      	b.n	8004c1a <_printf_i+0x226>
 8004c2e:	bf00      	nop
 8004c30:	0800501d 	.word	0x0800501d
 8004c34:	0800502e 	.word	0x0800502e

08004c38 <__sflush_r>:
 8004c38:	898a      	ldrh	r2, [r1, #12]
 8004c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3e:	4605      	mov	r5, r0
 8004c40:	0710      	lsls	r0, r2, #28
 8004c42:	460c      	mov	r4, r1
 8004c44:	d458      	bmi.n	8004cf8 <__sflush_r+0xc0>
 8004c46:	684b      	ldr	r3, [r1, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	dc05      	bgt.n	8004c58 <__sflush_r+0x20>
 8004c4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	dc02      	bgt.n	8004c58 <__sflush_r+0x20>
 8004c52:	2000      	movs	r0, #0
 8004c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	d0f9      	beq.n	8004c52 <__sflush_r+0x1a>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c64:	682f      	ldr	r7, [r5, #0]
 8004c66:	6a21      	ldr	r1, [r4, #32]
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	d032      	beq.n	8004cd2 <__sflush_r+0x9a>
 8004c6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	075a      	lsls	r2, r3, #29
 8004c72:	d505      	bpl.n	8004c80 <__sflush_r+0x48>
 8004c74:	6863      	ldr	r3, [r4, #4]
 8004c76:	1ac0      	subs	r0, r0, r3
 8004c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c7a:	b10b      	cbz	r3, 8004c80 <__sflush_r+0x48>
 8004c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c7e:	1ac0      	subs	r0, r0, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	4602      	mov	r2, r0
 8004c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c86:	6a21      	ldr	r1, [r4, #32]
 8004c88:	4628      	mov	r0, r5
 8004c8a:	47b0      	blx	r6
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	d106      	bne.n	8004ca0 <__sflush_r+0x68>
 8004c92:	6829      	ldr	r1, [r5, #0]
 8004c94:	291d      	cmp	r1, #29
 8004c96:	d82b      	bhi.n	8004cf0 <__sflush_r+0xb8>
 8004c98:	4a29      	ldr	r2, [pc, #164]	; (8004d40 <__sflush_r+0x108>)
 8004c9a:	410a      	asrs	r2, r1
 8004c9c:	07d6      	lsls	r6, r2, #31
 8004c9e:	d427      	bmi.n	8004cf0 <__sflush_r+0xb8>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	6062      	str	r2, [r4, #4]
 8004ca4:	04d9      	lsls	r1, r3, #19
 8004ca6:	6922      	ldr	r2, [r4, #16]
 8004ca8:	6022      	str	r2, [r4, #0]
 8004caa:	d504      	bpl.n	8004cb6 <__sflush_r+0x7e>
 8004cac:	1c42      	adds	r2, r0, #1
 8004cae:	d101      	bne.n	8004cb4 <__sflush_r+0x7c>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b903      	cbnz	r3, 8004cb6 <__sflush_r+0x7e>
 8004cb4:	6560      	str	r0, [r4, #84]	; 0x54
 8004cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cb8:	602f      	str	r7, [r5, #0]
 8004cba:	2900      	cmp	r1, #0
 8004cbc:	d0c9      	beq.n	8004c52 <__sflush_r+0x1a>
 8004cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	d002      	beq.n	8004ccc <__sflush_r+0x94>
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f7ff fbd6 	bl	8004478 <_free_r>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	6360      	str	r0, [r4, #52]	; 0x34
 8004cd0:	e7c0      	b.n	8004c54 <__sflush_r+0x1c>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b0      	blx	r6
 8004cd8:	1c41      	adds	r1, r0, #1
 8004cda:	d1c8      	bne.n	8004c6e <__sflush_r+0x36>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0c5      	beq.n	8004c6e <__sflush_r+0x36>
 8004ce2:	2b1d      	cmp	r3, #29
 8004ce4:	d001      	beq.n	8004cea <__sflush_r+0xb2>
 8004ce6:	2b16      	cmp	r3, #22
 8004ce8:	d101      	bne.n	8004cee <__sflush_r+0xb6>
 8004cea:	602f      	str	r7, [r5, #0]
 8004cec:	e7b1      	b.n	8004c52 <__sflush_r+0x1a>
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	e7ad      	b.n	8004c54 <__sflush_r+0x1c>
 8004cf8:	690f      	ldr	r7, [r1, #16]
 8004cfa:	2f00      	cmp	r7, #0
 8004cfc:	d0a9      	beq.n	8004c52 <__sflush_r+0x1a>
 8004cfe:	0793      	lsls	r3, r2, #30
 8004d00:	680e      	ldr	r6, [r1, #0]
 8004d02:	bf08      	it	eq
 8004d04:	694b      	ldreq	r3, [r1, #20]
 8004d06:	600f      	str	r7, [r1, #0]
 8004d08:	bf18      	it	ne
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	eba6 0807 	sub.w	r8, r6, r7
 8004d10:	608b      	str	r3, [r1, #8]
 8004d12:	f1b8 0f00 	cmp.w	r8, #0
 8004d16:	dd9c      	ble.n	8004c52 <__sflush_r+0x1a>
 8004d18:	6a21      	ldr	r1, [r4, #32]
 8004d1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	463a      	mov	r2, r7
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b0      	blx	r6
 8004d24:	2800      	cmp	r0, #0
 8004d26:	dc06      	bgt.n	8004d36 <__sflush_r+0xfe>
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	e78e      	b.n	8004c54 <__sflush_r+0x1c>
 8004d36:	4407      	add	r7, r0
 8004d38:	eba8 0800 	sub.w	r8, r8, r0
 8004d3c:	e7e9      	b.n	8004d12 <__sflush_r+0xda>
 8004d3e:	bf00      	nop
 8004d40:	dfbffffe 	.word	0xdfbffffe

08004d44 <_fflush_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	690b      	ldr	r3, [r1, #16]
 8004d48:	4605      	mov	r5, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	b913      	cbnz	r3, 8004d54 <_fflush_r+0x10>
 8004d4e:	2500      	movs	r5, #0
 8004d50:	4628      	mov	r0, r5
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	b118      	cbz	r0, 8004d5e <_fflush_r+0x1a>
 8004d56:	6a03      	ldr	r3, [r0, #32]
 8004d58:	b90b      	cbnz	r3, 8004d5e <_fflush_r+0x1a>
 8004d5a:	f7ff f973 	bl	8004044 <__sinit>
 8004d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f3      	beq.n	8004d4e <_fflush_r+0xa>
 8004d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d68:	07d0      	lsls	r0, r2, #31
 8004d6a:	d404      	bmi.n	8004d76 <_fflush_r+0x32>
 8004d6c:	0599      	lsls	r1, r3, #22
 8004d6e:	d402      	bmi.n	8004d76 <_fflush_r+0x32>
 8004d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d72:	f7ff fb7e 	bl	8004472 <__retarget_lock_acquire_recursive>
 8004d76:	4628      	mov	r0, r5
 8004d78:	4621      	mov	r1, r4
 8004d7a:	f7ff ff5d 	bl	8004c38 <__sflush_r>
 8004d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d80:	07da      	lsls	r2, r3, #31
 8004d82:	4605      	mov	r5, r0
 8004d84:	d4e4      	bmi.n	8004d50 <_fflush_r+0xc>
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	059b      	lsls	r3, r3, #22
 8004d8a:	d4e1      	bmi.n	8004d50 <_fflush_r+0xc>
 8004d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8e:	f7ff fb71 	bl	8004474 <__retarget_lock_release_recursive>
 8004d92:	e7dd      	b.n	8004d50 <_fflush_r+0xc>

08004d94 <__swhatbuf_r>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	460c      	mov	r4, r1
 8004d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	b096      	sub	sp, #88	; 0x58
 8004da0:	4615      	mov	r5, r2
 8004da2:	461e      	mov	r6, r3
 8004da4:	da0d      	bge.n	8004dc2 <__swhatbuf_r+0x2e>
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	bf0c      	ite	eq
 8004db2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004db6:	2340      	movne	r3, #64	; 0x40
 8004db8:	2000      	movs	r0, #0
 8004dba:	6031      	str	r1, [r6, #0]
 8004dbc:	602b      	str	r3, [r5, #0]
 8004dbe:	b016      	add	sp, #88	; 0x58
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	466a      	mov	r2, sp
 8004dc4:	f000 f862 	bl	8004e8c <_fstat_r>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	dbec      	blt.n	8004da6 <__swhatbuf_r+0x12>
 8004dcc:	9901      	ldr	r1, [sp, #4]
 8004dce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004dd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004dd6:	4259      	negs	r1, r3
 8004dd8:	4159      	adcs	r1, r3
 8004dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dde:	e7eb      	b.n	8004db8 <__swhatbuf_r+0x24>

08004de0 <__smakebuf_r>:
 8004de0:	898b      	ldrh	r3, [r1, #12]
 8004de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004de4:	079d      	lsls	r5, r3, #30
 8004de6:	4606      	mov	r6, r0
 8004de8:	460c      	mov	r4, r1
 8004dea:	d507      	bpl.n	8004dfc <__smakebuf_r+0x1c>
 8004dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	6123      	str	r3, [r4, #16]
 8004df4:	2301      	movs	r3, #1
 8004df6:	6163      	str	r3, [r4, #20]
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	ab01      	add	r3, sp, #4
 8004dfe:	466a      	mov	r2, sp
 8004e00:	f7ff ffc8 	bl	8004d94 <__swhatbuf_r>
 8004e04:	9900      	ldr	r1, [sp, #0]
 8004e06:	4605      	mov	r5, r0
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f7ff fba1 	bl	8004550 <_malloc_r>
 8004e0e:	b948      	cbnz	r0, 8004e24 <__smakebuf_r+0x44>
 8004e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e14:	059a      	lsls	r2, r3, #22
 8004e16:	d4ef      	bmi.n	8004df8 <__smakebuf_r+0x18>
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	e7e3      	b.n	8004dec <__smakebuf_r+0xc>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	6020      	str	r0, [r4, #0]
 8004e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	9b00      	ldr	r3, [sp, #0]
 8004e30:	6163      	str	r3, [r4, #20]
 8004e32:	9b01      	ldr	r3, [sp, #4]
 8004e34:	6120      	str	r0, [r4, #16]
 8004e36:	b15b      	cbz	r3, 8004e50 <__smakebuf_r+0x70>
 8004e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f000 f837 	bl	8004eb0 <_isatty_r>
 8004e42:	b128      	cbz	r0, 8004e50 <__smakebuf_r+0x70>
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	431d      	orrs	r5, r3
 8004e54:	81a5      	strh	r5, [r4, #12]
 8004e56:	e7cf      	b.n	8004df8 <__smakebuf_r+0x18>

08004e58 <memmove>:
 8004e58:	4288      	cmp	r0, r1
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	eb01 0402 	add.w	r4, r1, r2
 8004e60:	d902      	bls.n	8004e68 <memmove+0x10>
 8004e62:	4284      	cmp	r4, r0
 8004e64:	4623      	mov	r3, r4
 8004e66:	d807      	bhi.n	8004e78 <memmove+0x20>
 8004e68:	1e43      	subs	r3, r0, #1
 8004e6a:	42a1      	cmp	r1, r4
 8004e6c:	d008      	beq.n	8004e80 <memmove+0x28>
 8004e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e76:	e7f8      	b.n	8004e6a <memmove+0x12>
 8004e78:	4402      	add	r2, r0
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	428a      	cmp	r2, r1
 8004e7e:	d100      	bne.n	8004e82 <memmove+0x2a>
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e8a:	e7f7      	b.n	8004e7c <memmove+0x24>

08004e8c <_fstat_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4d07      	ldr	r5, [pc, #28]	; (8004eac <_fstat_r+0x20>)
 8004e90:	2300      	movs	r3, #0
 8004e92:	4604      	mov	r4, r0
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	602b      	str	r3, [r5, #0]
 8004e9a:	f7fc fa08 	bl	80012ae <_fstat>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d102      	bne.n	8004ea8 <_fstat_r+0x1c>
 8004ea2:	682b      	ldr	r3, [r5, #0]
 8004ea4:	b103      	cbz	r3, 8004ea8 <_fstat_r+0x1c>
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	bd38      	pop	{r3, r4, r5, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000264 	.word	0x20000264

08004eb0 <_isatty_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d06      	ldr	r5, [pc, #24]	; (8004ecc <_isatty_r+0x1c>)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	4608      	mov	r0, r1
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	f7fc fa07 	bl	80012ce <_isatty>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d102      	bne.n	8004eca <_isatty_r+0x1a>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	b103      	cbz	r3, 8004eca <_isatty_r+0x1a>
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	20000264 	.word	0x20000264

08004ed0 <_sbrk_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d06      	ldr	r5, [pc, #24]	; (8004eec <_sbrk_r+0x1c>)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fc fa10 	bl	8001300 <_sbrk>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_sbrk_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_sbrk_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	20000264 	.word	0x20000264

08004ef0 <memcpy>:
 8004ef0:	440a      	add	r2, r1
 8004ef2:	4291      	cmp	r1, r2
 8004ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ef8:	d100      	bne.n	8004efc <memcpy+0xc>
 8004efa:	4770      	bx	lr
 8004efc:	b510      	push	{r4, lr}
 8004efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f06:	4291      	cmp	r1, r2
 8004f08:	d1f9      	bne.n	8004efe <memcpy+0xe>
 8004f0a:	bd10      	pop	{r4, pc}

08004f0c <_realloc_r>:
 8004f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f10:	4680      	mov	r8, r0
 8004f12:	4614      	mov	r4, r2
 8004f14:	460e      	mov	r6, r1
 8004f16:	b921      	cbnz	r1, 8004f22 <_realloc_r+0x16>
 8004f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	f7ff bb17 	b.w	8004550 <_malloc_r>
 8004f22:	b92a      	cbnz	r2, 8004f30 <_realloc_r+0x24>
 8004f24:	f7ff faa8 	bl	8004478 <_free_r>
 8004f28:	4625      	mov	r5, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f30:	f000 f81b 	bl	8004f6a <_malloc_usable_size_r>
 8004f34:	4284      	cmp	r4, r0
 8004f36:	4607      	mov	r7, r0
 8004f38:	d802      	bhi.n	8004f40 <_realloc_r+0x34>
 8004f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f3e:	d812      	bhi.n	8004f66 <_realloc_r+0x5a>
 8004f40:	4621      	mov	r1, r4
 8004f42:	4640      	mov	r0, r8
 8004f44:	f7ff fb04 	bl	8004550 <_malloc_r>
 8004f48:	4605      	mov	r5, r0
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d0ed      	beq.n	8004f2a <_realloc_r+0x1e>
 8004f4e:	42bc      	cmp	r4, r7
 8004f50:	4622      	mov	r2, r4
 8004f52:	4631      	mov	r1, r6
 8004f54:	bf28      	it	cs
 8004f56:	463a      	movcs	r2, r7
 8004f58:	f7ff ffca 	bl	8004ef0 <memcpy>
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4640      	mov	r0, r8
 8004f60:	f7ff fa8a 	bl	8004478 <_free_r>
 8004f64:	e7e1      	b.n	8004f2a <_realloc_r+0x1e>
 8004f66:	4635      	mov	r5, r6
 8004f68:	e7df      	b.n	8004f2a <_realloc_r+0x1e>

08004f6a <_malloc_usable_size_r>:
 8004f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6e:	1f18      	subs	r0, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bfbc      	itt	lt
 8004f74:	580b      	ldrlt	r3, [r1, r0]
 8004f76:	18c0      	addlt	r0, r0, r3
 8004f78:	4770      	bx	lr
	...

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
