
MPU-6050_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005c40  08005c40  00015c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d68  08005d68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d70  08005d70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000070  08005de8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005de8  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b72c  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cbf  00000000  00000000  0002b80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bd  00000000  00000000  0002dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c82  00000000  00000000  0002e67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5c2  00000000  00000000  000502ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb75c  00000000  00000000  0005f8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003294  00000000  00000000  0012b020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0012e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c28 	.word	0x08005c28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005c28 	.word	0x08005c28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_GPIO_Init+0xb4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <MX_GPIO_Init+0xb8>)
 8000f60:	f001 f832 	bl	8001fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_GPIO_Init+0xbc>)
 8000f7c:	f000 fe90 	bl	8001ca0 <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020800 	.word	0x40020800

08000f94 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <MX_I2C2_Init+0x54>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <MX_I2C2_Init+0x58>)
 8000fa2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <MX_I2C2_Init+0x50>)
 8000fd2:	f001 f813 	bl	8001ffc <HAL_I2C_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fdc:	f000 fba8 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000008c 	.word	0x2000008c
 8000fe8:	40005800 	.word	0x40005800
 8000fec:	000186a0 	.word	0x000186a0

08000ff0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <HAL_I2C_MspInit+0xc4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d14b      	bne.n	80010aa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <HAL_I2C_MspInit+0xc8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <HAL_I2C_MspInit+0xc8>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <HAL_I2C_MspInit+0xc8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_I2C_MspInit+0xc8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <HAL_I2C_MspInit+0xc8>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_I2C_MspInit+0xc8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800104a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001050:	2312      	movs	r3, #18
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800105c:	2304      	movs	r3, #4
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <HAL_I2C_MspInit+0xcc>)
 8001068:	f000 fe1a 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001072:	2312      	movs	r3, #18
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800107e:	2304      	movs	r3, #4
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <HAL_I2C_MspInit+0xd0>)
 800108a:	f000 fe09 	bl	8001ca0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_I2C_MspInit+0xc8>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_I2C_MspInit+0xc8>)
 8001098:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_I2C_MspInit+0xc8>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40005800 	.word	0x40005800
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40020800 	.word	0x40020800

080010c4 <MPU6050_Init>:
int _write(int file, char *data, int len) {
  HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
  return len;
}

void MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	6078      	str	r0, [r7, #4]
  uint8_t check, Data;

  // Check device ID WHO_AM_I
  HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	9302      	str	r3, [sp, #8]
 80010d2:	2301      	movs	r3, #1
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	f107 030f 	add.w	r3, r7, #15
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	2275      	movs	r2, #117	; 0x75
 80010e0:	21d0      	movs	r1, #208	; 0xd0
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f001 f9c8 	bl	8002478 <HAL_I2C_Mem_Read>

  if (check == 104) { // 0x68 will be returned by the sensor if everything goes well
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b68      	cmp	r3, #104	; 0x68
 80010ec:	d13f      	bne.n	800116e <MPU6050_Init+0xaa>
    // Power management register 0X6B we should write all 0's to wake the sensor up
    Data = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x6B, 1, &Data, 1, 1000);
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f107 030e 	add.w	r3, r7, #14
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	226b      	movs	r2, #107	; 0x6b
 8001106:	21d0      	movs	r1, #208	; 0xd0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f001 f8bb 	bl	8002284 <HAL_I2C_Mem_Write>

    // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
    Data = 0x07;
 800110e:	2307      	movs	r3, #7
 8001110:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x19, 1, &Data, 1, 1000);
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2301      	movs	r3, #1
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f107 030e 	add.w	r3, r7, #14
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2219      	movs	r2, #25
 8001126:	21d0      	movs	r1, #208	; 0xd0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f001 f8ab 	bl	8002284 <HAL_I2C_Mem_Write>

    // Set accelerometer configuration in ACCEL_CONFIG Register
    // XA_ST=0, YA_ST=0, ZA_ST=0, AFS_SEL=0 => ±2g
    Data = 0x00;  // Set AFS_SEL to 0 for ±2g
 800112e:	2300      	movs	r3, #0
 8001130:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &Data, 1, 1000);
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	f107 030e 	add.w	r3, r7, #14
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	221c      	movs	r2, #28
 8001146:	21d0      	movs	r1, #208	; 0xd0
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f001 f89b 	bl	8002284 <HAL_I2C_Mem_Write>

    // Set Gyroscopic configuration in GYRO_CONFIG Register
    // XG_ST=0, YG_ST=0, ZG_ST=0, FS_SEL=0 => ±250 °/s
    Data = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &Data, 1, 1000);
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	f107 030e 	add.w	r3, r7, #14
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	221b      	movs	r2, #27
 8001166:	21d0      	movs	r1, #208	; 0xd0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 f88b 	bl	8002284 <HAL_I2C_Mem_Write>
  }
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <MPU6050_Read_Accel>:

HAL_StatusTypeDef MPU6050_Read_Accel(I2C_HandleTypeDef *hi2c, int16_t *Accel_X, int16_t *Accel_Y, int16_t *Accel_Z) {
 8001176:	b580      	push	{r7, lr}
 8001178:	b08a      	sub	sp, #40	; 0x28
 800117a:	af04      	add	r7, sp, #16
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	603b      	str	r3, [r7, #0]
  uint8_t Rec_Data[6];
  HAL_StatusTypeDef ret;

  // Read 6 BYTES of data starting from ACCEL_XOUT_H register
  ret = HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2306      	movs	r3, #6
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	223b      	movs	r2, #59	; 0x3b
 8001198:	21d0      	movs	r1, #208	; 0xd0
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f001 f96c 	bl	8002478 <HAL_I2C_Mem_Read>
 80011a0:	4603      	mov	r3, r0
 80011a2:	75fb      	strb	r3, [r7, #23]

  if (ret == HAL_OK) {
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d11a      	bne.n	80011e0 <MPU6050_Read_Accel+0x6a>
    *Accel_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80011aa:	7c3b      	ldrb	r3, [r7, #16]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	801a      	strh	r2, [r3, #0]
    *Accel_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80011bc:	7cbb      	ldrb	r3, [r7, #18]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	7cfb      	ldrb	r3, [r7, #19]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	801a      	strh	r2, [r3, #0]
    *Accel_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80011ce:	7d3b      	ldrb	r3, [r7, #20]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	7d7b      	ldrb	r3, [r7, #21]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21a      	sxth	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <LowPassFilter>:

void LowPassFilter(int16_t *current, int16_t *previous, float alpha) {
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	ed87 0a01 	vstr	s0, [r7, #4]
  *previous = (int16_t)(alpha * (*current) + (1 - alpha) * (*previous));
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001206:	edd7 7a01 	vldr	s15, [r7, #4]
 800120a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001212:	edd7 7a01 	vldr	s15, [r7, #4]
 8001216:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	b21a      	sxth	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	801a      	strh	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <MovingAverageFilter>:

void MovingAverageFilter(float *new_value, float *average, float *buffer, int size, int *index) {
 800124a:	b480      	push	{r7}
 800124c:	b087      	sub	sp, #28
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	603b      	str	r3, [r7, #0]
  buffer[*index] = *new_value;
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	601a      	str	r2, [r3, #0]
  *index = (*index + 1) % size;
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	fb93 f2f2 	sdiv	r2, r3, r2
 8001274:	6839      	ldr	r1, [r7, #0]
 8001276:	fb01 f202 	mul.w	r2, r1, r2
 800127a:	1a9a      	subs	r2, r3, r2
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	601a      	str	r2, [r3, #0]
  float sum = 0.0;
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < size; i++) {
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	e00e      	b.n	80012aa <MovingAverageFilter+0x60>
    sum += buffer[i];
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ed97 7a05 	vldr	s14, [r7, #20]
 800129c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a0:	edc7 7a05 	vstr	s15, [r7, #20]
  for (int i = 0; i < size; i++) {
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	3301      	adds	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dbec      	blt.n	800128c <MovingAverageFilter+0x42>
  }
  *average = sum / size;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012bc:	edd7 6a05 	vldr	s13, [r7, #20]
 80012c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	edc3 7a00 	vstr	s15, [r3]
}
 80012ca:	bf00      	nop
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <Calculate_Vibration_Percentage>:

void Calculate_Vibration_Percentage(int16_t Accel_X, int16_t Accel_Y, int16_t Accel_Z, int16_t *prev_Accel_X, int16_t *prev_Accel_Y, int16_t *prev_Accel_Z, float *vibration_percentage) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	4603      	mov	r3, r0
 80012e2:	81fb      	strh	r3, [r7, #14]
 80012e4:	460b      	mov	r3, r1
 80012e6:	81bb      	strh	r3, [r7, #12]
 80012e8:	4613      	mov	r3, r2
 80012ea:	817b      	strh	r3, [r7, #10]
  // Apply low-pass filter
  LowPassFilter(&Accel_X, prev_Accel_X, ALPHA);
 80012ec:	f107 030e 	add.w	r3, r7, #14
 80012f0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff77 	bl	80011ea <LowPassFilter>
  LowPassFilter(&Accel_Y, prev_Accel_Y, ALPHA);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff6f 	bl	80011ea <LowPassFilter>
  LowPassFilter(&Accel_Z, prev_Accel_Z, ALPHA);
 800130c:	f107 030a 	add.w	r3, r7, #10
 8001310:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff67 	bl	80011ea <LowPassFilter>

  // Calculate the difference between the current and previous values
  float diff_X = (float)(Accel_X - *prev_Accel_X) / ACCEL_SCALE;
 800131c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001320:	461a      	mov	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001332:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80013f0 <Calculate_Vibration_Percentage+0x118>
 8001336:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133a:	edc7 7a07 	vstr	s15, [r7, #28]
  float diff_Y = (float)(Accel_Y - *prev_Accel_Y) / ACCEL_SCALE;
 800133e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001342:	461a      	mov	r2, r3
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001354:	eddf 6a26 	vldr	s13, [pc, #152]	; 80013f0 <Calculate_Vibration_Percentage+0x118>
 8001358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135c:	edc7 7a06 	vstr	s15, [r7, #24]
  float diff_Z = (float)(Accel_Z - *prev_Accel_Z) / ACCEL_SCALE;
 8001360:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001364:	461a      	mov	r2, r3
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001376:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013f0 <Calculate_Vibration_Percentage+0x118>
 800137a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137e:	edc7 7a05 	vstr	s15, [r7, #20]

  // Calculate the magnitude of the differences
  float magnitude = sqrtf(diff_X * diff_X + diff_Y * diff_Y + diff_Z * diff_Z);
 8001382:	edd7 7a07 	vldr	s15, [r7, #28]
 8001386:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800138a:	edd7 7a06 	vldr	s15, [r7, #24]
 800138e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001396:	edd7 7a05 	vldr	s15, [r7, #20]
 800139a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	eeb0 0a67 	vmov.f32	s0, s15
 80013a6:	f003 fd55 	bl	8004e54 <sqrtf>
 80013aa:	ed87 0a04 	vstr	s0, [r7, #16]

  // Apply sensitivity multiplier
  magnitude *= SENSITIVITY_MULTIPLIER;
 80013ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ba:	edc7 7a04 	vstr	s15, [r7, #16]

  // Calculate the percentage of the vibration level
  *vibration_percentage = (magnitude / MAX_VIBRATION_LEVEL) * 100.0;  // Convert to percentage
 80013be:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80013f4 <Calculate_Vibration_Percentage+0x11c>
 80013c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013cc:	edc3 7a00 	vstr	s15, [r3]

  // Update previous values
  *prev_Accel_X = Accel_X;
 80013d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	801a      	strh	r2, [r3, #0]
  *prev_Accel_Y = Accel_Y;
 80013d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013de:	801a      	strh	r2, [r3, #0]
  *prev_Accel_Z = Accel_Z;
 80013e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	801a      	strh	r2, [r3, #0]
}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	46800000 	.word	0x46800000
 80013f4:	42c80000 	.word	0x42c80000

080013f8 <FloatToString>:

void FloatToString(char* buffer, float value, int decimalPlaces) {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	ed87 0a02 	vstr	s0, [r7, #8]
 8001404:	6079      	str	r1, [r7, #4]
  int integerPart = (int)value;
 8001406:	edd7 7a02 	vldr	s15, [r7, #8]
 800140a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140e:	ee17 3a90 	vmov	r3, s15
 8001412:	617b      	str	r3, [r7, #20]
  int fractionPart = (int)((value - integerPart) * pow(10, decimalPlaces));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001426:	ee17 0a90 	vmov	r0, s15
 800142a:	f7ff f8a5 	bl	8000578 <__aeabi_f2d>
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff f88e 	bl	8000554 <__aeabi_i2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	ec43 2b11 	vmov	d1, r2, r3
 8001440:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001488 <FloatToString+0x90>
 8001444:	f003 fc96 	bl	8004d74 <pow>
 8001448:	ec53 2b10 	vmov	r2, r3, d0
 800144c:	4620      	mov	r0, r4
 800144e:	4629      	mov	r1, r5
 8001450:	f7ff f8ea 	bl	8000628 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fb94 	bl	8000b88 <__aeabi_d2iz>
 8001460:	4603      	mov	r3, r0
 8001462:	613b      	str	r3, [r7, #16]
  sprintf(buffer, "%d.%0*d", integerPart, decimalPlaces, abs(fractionPart));
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	bfb8      	it	lt
 800146a:	425b      	neglt	r3, r3
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	4907      	ldr	r1, [pc, #28]	; (8001490 <FloatToString+0x98>)
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f002 ffd9 	bl	800442c <siprintf>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bdb0      	pop	{r4, r5, r7, pc}
 8001482:	bf00      	nop
 8001484:	f3af 8000 	nop.w
 8001488:	00000000 	.word	0x00000000
 800148c:	40240000 	.word	0x40240000
 8001490:	08005c40 	.word	0x08005c40

08001494 <main>:

int main(void) {
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b0b1      	sub	sp, #196	; 0xc4
 8001498:	af04      	add	r7, sp, #16

  HAL_Init();
 800149a:	f000 fa85 	bl	80019a8 <HAL_Init>
  SystemClock_Config();
 800149e:	f000 f8d9 	bl	8001654 <SystemClock_Config>
  MX_GPIO_Init();
 80014a2:	f7ff fd17 	bl	8000ed4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014a6:	f000 f9e3 	bl	8001870 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80014aa:	f7ff fd73 	bl	8000f94 <MX_I2C2_Init>
  MPU6050_Init(&hi2c2);
 80014ae:	4862      	ldr	r0, [pc, #392]	; (8001638 <main+0x1a4>)
 80014b0:	f7ff fe08 	bl	80010c4 <MPU6050_Init>
  int16_t Accel_X, Accel_Y, Accel_Z;
  int16_t prev_Accel_X = 0, prev_Accel_Y = 0, prev_Accel_Z = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
  float vibration_percentage;
  char uart_buf[100];
  char float_buf[20];
  int uart_buf_len;
  uint8_t i2c_address = MPU6050_ADDR >> 1; // Print the 7-bit address
 80014c6:	2368      	movs	r3, #104	; 0x68
 80014c8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  uart_buf_len = sprintf(uart_buf, "I2C Address: 0x%02X\r\n", i2c_address);
 80014cc:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 80014d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014d4:	4959      	ldr	r1, [pc, #356]	; (800163c <main+0x1a8>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 ffa8 	bl	800442c <siprintf>
 80014dc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 80014e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	4854      	ldr	r0, [pc, #336]	; (8001640 <main+0x1ac>)
 80014ee:	f002 fbe1 	bl	8003cb4 <HAL_UART_Transmit>

  // Moving average variables
  float vibration_buffer[MOVING_AVERAGE_SIZE] = {0};
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
  float smoothed_vibration = 0.0;
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  int buffer_index = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]

  // Read initial accelerometer values to initialize previous values
  if (MPU6050_Read_Accel(&hi2c2, &prev_Accel_X, &prev_Accel_Y, &prev_Accel_Z) != HAL_OK) {
 800150c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001510:	f107 029e 	add.w	r2, r7, #158	; 0x9e
 8001514:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001518:	4847      	ldr	r0, [pc, #284]	; (8001638 <main+0x1a4>)
 800151a:	f7ff fe2c 	bl	8001176 <MPU6050_Read_Accel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d010      	beq.n	8001546 <main+0xb2>
    uart_buf_len = sprintf(uart_buf, "Error reading initial accelerometer data\r\n");
 8001524:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001528:	4946      	ldr	r1, [pc, #280]	; (8001644 <main+0x1b0>)
 800152a:	4618      	mov	r0, r3
 800152c:	f002 ff7e 	bl	800442c <siprintf>
 8001530:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 8001534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001538:	b29a      	uxth	r2, r3
 800153a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	483f      	ldr	r0, [pc, #252]	; (8001640 <main+0x1ac>)
 8001542:	f002 fbb7 	bl	8003cb4 <HAL_UART_Transmit>
  }

  while (1) {
    if (MPU6050_Read_Accel(&hi2c2, &Accel_X, &Accel_Y, &Accel_Z) == HAL_OK) {
 8001546:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 800154a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800154e:	f107 01a6 	add.w	r1, r7, #166	; 0xa6
 8001552:	4839      	ldr	r0, [pc, #228]	; (8001638 <main+0x1a4>)
 8001554:	f7ff fe0f 	bl	8001176 <MPU6050_Read_Accel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d156      	bne.n	800160c <main+0x178>

      Calculate_Vibration_Percentage(Accel_X, Accel_Y, Accel_Z, &prev_Accel_X, &prev_Accel_Y, &prev_Accel_Z, &vibration_percentage);
 800155e:	f9b7 00a6 	ldrsh.w	r0, [r7, #166]	; 0xa6
 8001562:	f9b7 10a4 	ldrsh.w	r1, [r7, #164]	; 0xa4
 8001566:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 800156a:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800156e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	f107 039e 	add.w	r3, r7, #158	; 0x9e
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	4623      	mov	r3, r4
 8001582:	f7ff fea9 	bl	80012d8 <Calculate_Vibration_Percentage>

      // Apply moving average filter to vibration percentage
      MovingAverageFilter(&vibration_percentage, &smoothed_vibration, vibration_buffer, MOVING_AVERAGE_SIZE, &buffer_index);
 8001586:	f107 020c 	add.w	r2, r7, #12
 800158a:	f107 0108 	add.w	r1, r7, #8
 800158e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2305      	movs	r3, #5
 8001598:	f7ff fe57 	bl	800124a <MovingAverageFilter>

      uart_buf_len = sprintf(uart_buf, "Accel_X: %d, Accel_Y: %d, Accel_Z: %d\r\n", Accel_X, Accel_Y, Accel_Z);
 800159c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80015a0:	461a      	mov	r2, r3
 80015a2:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80015a6:	4619      	mov	r1, r3
 80015a8:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 80015ac:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	460b      	mov	r3, r1
 80015b4:	4924      	ldr	r1, [pc, #144]	; (8001648 <main+0x1b4>)
 80015b6:	f002 ff39 	bl	800442c <siprintf>
 80015ba:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 80015be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80015c8:	2364      	movs	r3, #100	; 0x64
 80015ca:	481d      	ldr	r0, [pc, #116]	; (8001640 <main+0x1ac>)
 80015cc:	f002 fb72 	bl	8003cb4 <HAL_UART_Transmit>

      FloatToString(float_buf, smoothed_vibration, 2);
 80015d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d4:	f107 0320 	add.w	r3, r7, #32
 80015d8:	2102      	movs	r1, #2
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff0a 	bl	80013f8 <FloatToString>
      uart_buf_len = sprintf(uart_buf, "Vibration: %s%%\r\n", float_buf);
 80015e4:	f107 0220 	add.w	r2, r7, #32
 80015e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ec:	4917      	ldr	r1, [pc, #92]	; (800164c <main+0x1b8>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 ff1c 	bl	800442c <siprintf>
 80015f4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 80015f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001602:	2364      	movs	r3, #100	; 0x64
 8001604:	480e      	ldr	r0, [pc, #56]	; (8001640 <main+0x1ac>)
 8001606:	f002 fb55 	bl	8003cb4 <HAL_UART_Transmit>
 800160a:	e010      	b.n	800162e <main+0x19a>

    } else {
      uart_buf_len = sprintf(uart_buf, "Error reading accelerometer data\r\n");
 800160c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001610:	490f      	ldr	r1, [pc, #60]	; (8001650 <main+0x1bc>)
 8001612:	4618      	mov	r0, r3
 8001614:	f002 ff0a 	bl	800442c <siprintf>
 8001618:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_buf_len, 100);
 800161c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001620:	b29a      	uxth	r2, r3
 8001622:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001626:	2364      	movs	r3, #100	; 0x64
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <main+0x1ac>)
 800162a:	f002 fb43 	bl	8003cb4 <HAL_UART_Transmit>
    }

    HAL_Delay(1000); // Delay of 1 second for more frequent readings
 800162e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001632:	f000 fa2b 	bl	8001a8c <HAL_Delay>
    if (MPU6050_Read_Accel(&hi2c2, &Accel_X, &Accel_Y, &Accel_Z) == HAL_OK) {
 8001636:	e786      	b.n	8001546 <main+0xb2>
 8001638:	2000008c 	.word	0x2000008c
 800163c:	08005c48 	.word	0x08005c48
 8001640:	200000e4 	.word	0x200000e4
 8001644:	08005c60 	.word	0x08005c60
 8001648:	08005c8c 	.word	0x08005c8c
 800164c:	08005cb4 	.word	0x08005cb4
 8001650:	08005cc8 	.word	0x08005cc8

08001654 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	; 0x50
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	2234      	movs	r2, #52	; 0x34
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f002 ff02 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <SystemClock_Config+0xd4>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a29      	ldr	r2, [pc, #164]	; (8001728 <SystemClock_Config+0xd4>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <SystemClock_Config+0xd4>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001694:	2300      	movs	r3, #0
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <SystemClock_Config+0xd8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <SystemClock_Config+0xd8>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <SystemClock_Config+0xd8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016bc:	2310      	movs	r3, #16
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c0:	2302      	movs	r3, #2
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c4:	2300      	movs	r3, #0
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016c8:	2310      	movs	r3, #16
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016d2:	2304      	movs	r3, #4
 80016d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016da:	2302      	movs	r3, #2
 80016dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 fff8 	bl	80036d8 <HAL_RCC_OscConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016ee:	f000 f81f 	bl	8001730 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f2:	230f      	movs	r3, #15
 80016f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f6:	2302      	movs	r3, #2
 80016f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	2102      	movs	r1, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fc98 	bl	8003044 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800171a:	f000 f809 	bl	8001730 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3750      	adds	r7, #80	; 0x50
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <Error_Handler>:

void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  __disable_irq();
  while (1)
 8001738:	e7fe      	b.n	8001738 <Error_Handler+0x8>
	...

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_MspInit+0x4c>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_MspInit+0x4c>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800177a:	2007      	movs	r0, #7
 800177c:	f000 fa5c 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 f938 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <_sbrk+0x5c>)
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <_sbrk+0x60>)
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x64>)
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <_sbrk+0x68>)
 8001800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	d207      	bcs.n	8001820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001810:	f002 fe34 	bl	800447c <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	220c      	movs	r2, #12
 8001818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e009      	b.n	8001834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	4a05      	ldr	r2, [pc, #20]	; (8001844 <_sbrk+0x64>)
 8001830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20020000 	.word	0x20020000
 8001840:	00000400 	.word	0x00000400
 8001844:	200000e0 	.word	0x200000e0
 8001848:	20000278 	.word	0x20000278

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_USART2_UART_Init+0x4c>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_USART2_UART_Init+0x50>)
 8001878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_USART2_UART_Init+0x4c>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_USART2_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_USART2_UART_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_USART2_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_USART2_UART_Init+0x4c>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_USART2_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_USART2_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_USART2_UART_Init+0x4c>)
 80018a8:	f002 f9b4 	bl	8003c14 <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018b2:	f7ff ff3d 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200000e4 	.word	0x200000e4
 80018c0:	40004400 	.word	0x40004400

080018c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_UART_MspInit+0x84>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d12b      	bne.n	800193e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x88>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_UART_MspInit+0x88>)
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x88>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_UART_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_UART_MspInit+0x88>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_UART_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800191e:	230c      	movs	r3, #12
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800192e:	2307      	movs	r3, #7
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_UART_MspInit+0x8c>)
 800193a:	f000 f9b1 	bl	8001ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40004400 	.word	0x40004400
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000

08001954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800198c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001958:	f7ff ff78 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195e:	490d      	ldr	r1, [pc, #52]	; (8001994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001974:	4c0a      	ldr	r4, [pc, #40]	; (80019a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001982:	f002 fd81 	bl	8004488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001986:	f7ff fd85 	bl	8001494 <main>
  bx  lr    
 800198a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001998:	08005d78 	.word	0x08005d78
  ldr r2, =_sbss
 800199c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019a0:	20000278 	.word	0x20000278

080019a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_Init+0x40>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_Init+0x40>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_Init+0x40>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f931 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f808 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff feae 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f93b 	bl	8001c86 <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f911 	bl	8001c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x20>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x24>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_IncTick+0x24>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	2000012c 	.word	0x2000012c

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000012c 	.word	0x2000012c

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff ffee 	bl	8001a74 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff47 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff5c 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff8e 	bl	8001b8c <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5d 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffb0 	bl	8001bf4 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e165      	b.n	8001f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	f040 8154 	bne.w	8001f82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d005      	beq.n	8001cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d130      	bne.n	8001d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 0201 	and.w	r2, r3, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d017      	beq.n	8001d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d123      	bne.n	8001de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0203 	and.w	r2, r3, #3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80ae 	beq.w	8001f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a5c      	ldr	r2, [pc, #368]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e42:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4f      	ldr	r2, [pc, #316]	; (8001fa8 <HAL_GPIO_Init+0x308>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d025      	beq.n	8001eba <HAL_GPIO_Init+0x21a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4e      	ldr	r2, [pc, #312]	; (8001fac <HAL_GPIO_Init+0x30c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <HAL_GPIO_Init+0x216>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <HAL_GPIO_Init+0x310>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4c      	ldr	r2, [pc, #304]	; (8001fb4 <HAL_GPIO_Init+0x314>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x20e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4b      	ldr	r2, [pc, #300]	; (8001fb8 <HAL_GPIO_Init+0x318>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x20a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4a      	ldr	r2, [pc, #296]	; (8001fbc <HAL_GPIO_Init+0x31c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x206>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a49      	ldr	r2, [pc, #292]	; (8001fc0 <HAL_GPIO_Init+0x320>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x202>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e00c      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e00a      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	e008      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eaa:	2304      	movs	r3, #4
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e004      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x21c>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f002 0203 	and.w	r2, r2, #3
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	4093      	lsls	r3, r2
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ecc:	4935      	ldr	r1, [pc, #212]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efe:	4a31      	ldr	r2, [pc, #196]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_GPIO_Init+0x324>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	f67f ae96 	bls.w	8001cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40013800 	.word	0x40013800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40021400 	.word	0x40021400
 8001fc0:	40021800 	.word	0x40021800
 8001fc4:	40013c00 	.word	0x40013c00

08001fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd8:	787b      	ldrb	r3, [r7, #1]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe4:	e003      	b.n	8001fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	041a      	lsls	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e12b      	b.n	8002266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe ffe4 	bl	8000ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800204e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800205e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002060:	f001 f8e2 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8002064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a81      	ldr	r2, [pc, #516]	; (8002270 <HAL_I2C_Init+0x274>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d807      	bhi.n	8002080 <HAL_I2C_Init+0x84>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a80      	ldr	r2, [pc, #512]	; (8002274 <HAL_I2C_Init+0x278>)
 8002074:	4293      	cmp	r3, r2
 8002076:	bf94      	ite	ls
 8002078:	2301      	movls	r3, #1
 800207a:	2300      	movhi	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e006      	b.n	800208e <HAL_I2C_Init+0x92>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a7d      	ldr	r2, [pc, #500]	; (8002278 <HAL_I2C_Init+0x27c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	bf94      	ite	ls
 8002088:	2301      	movls	r3, #1
 800208a:	2300      	movhi	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0e7      	b.n	8002266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a78      	ldr	r2, [pc, #480]	; (800227c <HAL_I2C_Init+0x280>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0c9b      	lsrs	r3, r3, #18
 80020a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a6a      	ldr	r2, [pc, #424]	; (8002270 <HAL_I2C_Init+0x274>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d802      	bhi.n	80020d0 <HAL_I2C_Init+0xd4>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3301      	adds	r3, #1
 80020ce:	e009      	b.n	80020e4 <HAL_I2C_Init+0xe8>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	4a69      	ldr	r2, [pc, #420]	; (8002280 <HAL_I2C_Init+0x284>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	3301      	adds	r3, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	495c      	ldr	r1, [pc, #368]	; (8002270 <HAL_I2C_Init+0x274>)
 8002100:	428b      	cmp	r3, r1
 8002102:	d819      	bhi.n	8002138 <HAL_I2C_Init+0x13c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e59      	subs	r1, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002112:	1c59      	adds	r1, r3, #1
 8002114:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002118:	400b      	ands	r3, r1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_I2C_Init+0x138>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1e59      	subs	r1, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fbb1 f3f3 	udiv	r3, r1, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	e051      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002134:	2304      	movs	r3, #4
 8002136:	e04f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <HAL_I2C_Init+0x168>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	440b      	add	r3, r1
 800214e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002152:	3301      	adds	r3, #1
 8002154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf0c      	ite	eq
 800215c:	2301      	moveq	r3, #1
 800215e:	2300      	movne	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e012      	b.n	800218a <HAL_I2C_Init+0x18e>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e58      	subs	r0, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	0099      	lsls	r1, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	fbb0 f3f3 	udiv	r3, r0, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Init+0x196>
 800218e:	2301      	movs	r3, #1
 8002190:	e022      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10e      	bne.n	80021b8 <HAL_I2C_Init+0x1bc>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1e58      	subs	r0, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	440b      	add	r3, r1
 80021a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b6:	e00f      	b.n	80021d8 <HAL_I2C_Init+0x1dc>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1e58      	subs	r0, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	0099      	lsls	r1, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	6809      	ldr	r1, [r1, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6911      	ldr	r1, [r2, #16]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68d2      	ldr	r2, [r2, #12]
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	430b      	orrs	r3, r1
 800221a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	000186a0 	.word	0x000186a0
 8002274:	001e847f 	.word	0x001e847f
 8002278:	003d08ff 	.word	0x003d08ff
 800227c:	431bde83 	.word	0x431bde83
 8002280:	10624dd3 	.word	0x10624dd3

08002284 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	4608      	mov	r0, r1
 800228e:	4611      	mov	r1, r2
 8002290:	461a      	mov	r2, r3
 8002292:	4603      	mov	r3, r0
 8002294:	817b      	strh	r3, [r7, #10]
 8002296:	460b      	mov	r3, r1
 8002298:	813b      	strh	r3, [r7, #8]
 800229a:	4613      	mov	r3, r2
 800229c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800229e:	f7ff fbe9 	bl	8001a74 <HAL_GetTick>
 80022a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	f040 80d9 	bne.w	8002464 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2319      	movs	r3, #25
 80022b8:	2201      	movs	r2, #1
 80022ba:	496d      	ldr	r1, [pc, #436]	; (8002470 <HAL_I2C_Mem_Write+0x1ec>)
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fc8b 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
 80022ca:	e0cc      	b.n	8002466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_I2C_Mem_Write+0x56>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0c5      	b.n	8002466 <HAL_I2C_Mem_Write+0x1e2>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d007      	beq.n	8002300 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2221      	movs	r2, #33	; 0x21
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a3a      	ldr	r2, [r7, #32]
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <HAL_I2C_Mem_Write+0x1f0>)
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002342:	88f8      	ldrh	r0, [r7, #6]
 8002344:	893a      	ldrh	r2, [r7, #8]
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fac2 	bl	80028dc <I2C_RequestMemoryWrite>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d052      	beq.n	8002404 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e081      	b.n	8002466 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fd50 	bl	8002e0c <I2C_WaitOnTXEFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2b04      	cmp	r3, #4
 8002378:	d107      	bne.n	800238a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002388:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06b      	b.n	8002466 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d11b      	bne.n	8002404 <HAL_I2C_Mem_Write+0x180>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d017      	beq.n	8002404 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1aa      	bne.n	8002362 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fd43 	bl	8002e9c <I2C_WaitOnBTFFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00d      	beq.n	8002438 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2b04      	cmp	r3, #4
 8002422:	d107      	bne.n	8002434 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002432:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e016      	b.n	8002466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002464:	2302      	movs	r3, #2
  }
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	00100002 	.word	0x00100002
 8002474:	ffff0000 	.word	0xffff0000

08002478 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	817b      	strh	r3, [r7, #10]
 800248a:	460b      	mov	r3, r1
 800248c:	813b      	strh	r3, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002492:	f7ff faef 	bl	8001a74 <HAL_GetTick>
 8002496:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	f040 8214 	bne.w	80028ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2319      	movs	r3, #25
 80024ac:	2201      	movs	r2, #1
 80024ae:	497b      	ldr	r1, [pc, #492]	; (800269c <HAL_I2C_Mem_Read+0x224>)
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fb91 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024bc:	2302      	movs	r3, #2
 80024be:	e207      	b.n	80028d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_I2C_Mem_Read+0x56>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e200      	b.n	80028d0 <HAL_I2C_Mem_Read+0x458>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d007      	beq.n	80024f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2222      	movs	r2, #34	; 0x22
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a5b      	ldr	r2, [pc, #364]	; (80026a0 <HAL_I2C_Mem_Read+0x228>)
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002536:	88f8      	ldrh	r0, [r7, #6]
 8002538:	893a      	ldrh	r2, [r7, #8]
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4603      	mov	r3, r0
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fa5e 	bl	8002a08 <I2C_RequestMemoryRead>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e1bc      	b.n	80028d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d113      	bne.n	8002586 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	623b      	str	r3, [r7, #32]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	623b      	str	r3, [r7, #32]
 8002572:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e190      	b.n	80028a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	2b01      	cmp	r3, #1
 800258c:	d11b      	bne.n	80025c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e170      	b.n	80028a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d11b      	bne.n	8002606 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	e150      	b.n	80028a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800261c:	e144      	b.n	80028a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	2b03      	cmp	r3, #3
 8002624:	f200 80f1 	bhi.w	800280a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	2b01      	cmp	r3, #1
 800262e:	d123      	bne.n	8002678 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fc79 	bl	8002f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e145      	b.n	80028d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002676:	e117      	b.n	80028a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	2b02      	cmp	r3, #2
 800267e:	d14e      	bne.n	800271e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	2200      	movs	r2, #0
 8002688:	4906      	ldr	r1, [pc, #24]	; (80026a4 <HAL_I2C_Mem_Read+0x22c>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 faa4 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e11a      	b.n	80028d0 <HAL_I2C_Mem_Read+0x458>
 800269a:	bf00      	nop
 800269c:	00100002 	.word	0x00100002
 80026a0:	ffff0000 	.word	0xffff0000
 80026a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800271c:	e0c4      	b.n	80028a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	2200      	movs	r2, #0
 8002726:	496c      	ldr	r1, [pc, #432]	; (80028d8 <HAL_I2C_Mem_Read+0x460>)
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fa55 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0cb      	b.n	80028d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002780:	2200      	movs	r2, #0
 8002782:	4955      	ldr	r1, [pc, #340]	; (80028d8 <HAL_I2C_Mem_Read+0x460>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fa27 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e09d      	b.n	80028d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002808:	e04e      	b.n	80028a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fb8c 	bl	8002f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e058      	b.n	80028d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b04      	cmp	r3, #4
 800285c:	d124      	bne.n	80028a8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	2b03      	cmp	r3, #3
 8002864:	d107      	bne.n	8002876 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002874:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f47f aeb6 	bne.w	800261e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3728      	adds	r7, #40	; 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	00010004 	.word	0x00010004

080028dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	4608      	mov	r0, r1
 80028e6:	4611      	mov	r1, r2
 80028e8:	461a      	mov	r2, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	817b      	strh	r3, [r7, #10]
 80028ee:	460b      	mov	r3, r1
 80028f0:	813b      	strh	r3, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002904:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	2200      	movs	r2, #0
 800290e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f960 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00d      	beq.n	800293a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292c:	d103      	bne.n	8002936 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e05f      	b.n	80029fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002948:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	6a3a      	ldr	r2, [r7, #32]
 800294e:	492d      	ldr	r1, [pc, #180]	; (8002a04 <I2C_RequestMemoryWrite+0x128>)
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f9bb 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e04c      	b.n	80029fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002978:	6a39      	ldr	r1, [r7, #32]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fa46 	bl	8002e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00d      	beq.n	80029a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2b04      	cmp	r3, #4
 800298c:	d107      	bne.n	800299e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e02b      	b.n	80029fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	611a      	str	r2, [r3, #16]
 80029b2:	e021      	b.n	80029f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029b4:	893b      	ldrh	r3, [r7, #8]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c4:	6a39      	ldr	r1, [r7, #32]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fa20 	bl	8002e0c <I2C_WaitOnTXEFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00d      	beq.n	80029ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d107      	bne.n	80029ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e005      	b.n	80029fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ee:	893b      	ldrh	r3, [r7, #8]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	00010002 	.word	0x00010002

08002a08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	817b      	strh	r3, [r7, #10]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	813b      	strh	r3, [r7, #8]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f8c2 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a68:	d103      	bne.n	8002a72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0aa      	b.n	8002bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	4952      	ldr	r1, [pc, #328]	; (8002bd4 <I2C_RequestMemoryRead+0x1cc>)
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f91d 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e097      	b.n	8002bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab4:	6a39      	ldr	r1, [r7, #32]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f9a8 	bl	8002e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d107      	bne.n	8002ada <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e076      	b.n	8002bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae4:	893b      	ldrh	r3, [r7, #8]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	e021      	b.n	8002b34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002af0:	893b      	ldrh	r3, [r7, #8]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	6a39      	ldr	r1, [r7, #32]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f982 	bl	8002e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00d      	beq.n	8002b2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d107      	bne.n	8002b26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e050      	b.n	8002bcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2a:	893b      	ldrh	r3, [r7, #8]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b36:	6a39      	ldr	r1, [r7, #32]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f967 	bl	8002e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d107      	bne.n	8002b5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e035      	b.n	8002bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f82b 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00d      	beq.n	8002ba4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b96:	d103      	bne.n	8002ba0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e013      	b.n	8002bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ba4:	897b      	ldrh	r3, [r7, #10]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	6a3a      	ldr	r2, [r7, #32]
 8002bb8:	4906      	ldr	r1, [pc, #24]	; (8002bd4 <I2C_RequestMemoryRead+0x1cc>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f886 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	00010002 	.word	0x00010002

08002bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be8:	e048      	b.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d044      	beq.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7fe ff3f 	bl	8001a74 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d139      	bne.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10d      	bne.n	8002c2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	e00c      	b.n	8002c48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	43da      	mvns	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d116      	bne.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e023      	b.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	0c1b      	lsrs	r3, r3, #16
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10d      	bne.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	e00c      	b.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4013      	ands	r3, r2
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d093      	beq.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cda:	e071      	b.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cea:	d123      	bne.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f043 0204 	orr.w	r2, r3, #4
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e067      	b.n	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d041      	beq.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3c:	f7fe fe9a 	bl	8001a74 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d302      	bcc.n	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d136      	bne.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10c      	bne.n	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	43da      	mvns	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4013      	ands	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e00b      	b.n	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e021      	b.n	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10c      	bne.n	8002de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e00b      	b.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f47f af6d 	bne.w	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e18:	e034      	b.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8e3 	bl	8002fe6 <I2C_IsAcknowledgeFailed>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e034      	b.n	8002e94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d028      	beq.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fe fe1f 	bl	8001a74 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11d      	bne.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b80      	cmp	r3, #128	; 0x80
 8002e54:	d016      	beq.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e007      	b.n	8002e94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b80      	cmp	r3, #128	; 0x80
 8002e90:	d1c3      	bne.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ea8:	e034      	b.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f89b 	bl	8002fe6 <I2C_IsAcknowledgeFailed>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e034      	b.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d028      	beq.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec2:	f7fe fdd7 	bl	8001a74 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11d      	bne.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d016      	beq.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e007      	b.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d1c3      	bne.n	8002eaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f38:	e049      	b.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d119      	bne.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0210 	mvn.w	r2, #16
 8002f50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e030      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7fe fd7a 	bl	8001a74 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d11d      	bne.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d016      	beq.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e007      	b.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d1ae      	bne.n	8002f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffc:	d11b      	bne.n	8003036 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003006:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0cc      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b68      	ldr	r3, [pc, #416]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d90c      	bls.n	8003080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b65      	ldr	r3, [pc, #404]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b63      	ldr	r3, [pc, #396]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b8      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003098:	4b59      	ldr	r3, [pc, #356]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a58      	ldr	r2, [pc, #352]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b50      	ldr	r3, [pc, #320]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	494d      	ldr	r1, [pc, #308]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d044      	beq.n	8003164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d119      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e07f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e067      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4934      	ldr	r1, [pc, #208]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003134:	f7fe fc9e 	bl	8001a74 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fe fc9a 	bl	8001a74 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e04f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d20c      	bcs.n	800318c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e032      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4916      	ldr	r1, [pc, #88]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	490e      	ldr	r1, [pc, #56]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ca:	f000 f855 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	490a      	ldr	r1, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	5ccb      	ldrb	r3, [r1, r3]
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fbfe 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023c00 	.word	0x40023c00
 8003200:	40023800 	.word	0x40023800
 8003204:	08005cec 	.word	0x08005cec
 8003208:	20000000 	.word	0x20000000
 800320c:	20000004 	.word	0x20000004

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_RCC_GetHCLKFreq+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000000 	.word	0x20000000

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800322c:	f7ff fff0 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0a9b      	lsrs	r3, r3, #10
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4903      	ldr	r1, [pc, #12]	; (800324c <HAL_RCC_GetPCLK1Freq+0x24>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800
 800324c:	08005cfc 	.word	0x08005cfc

08003250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003254:	f7ff ffdc 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0b5b      	lsrs	r3, r3, #13
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4903      	ldr	r1, [pc, #12]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40023800 	.word	0x40023800
 8003274:	08005cfc 	.word	0x08005cfc

08003278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b0ae      	sub	sp, #184	; 0xb8
 800327e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329e:	4bcb      	ldr	r3, [pc, #812]	; (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	f200 8206 	bhi.w	80036b8 <HAL_RCC_GetSysClockFreq+0x440>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	080036b9 	.word	0x080036b9
 80032bc:	080036b9 	.word	0x080036b9
 80032c0:	080036b9 	.word	0x080036b9
 80032c4:	080032f1 	.word	0x080032f1
 80032c8:	080036b9 	.word	0x080036b9
 80032cc:	080036b9 	.word	0x080036b9
 80032d0:	080036b9 	.word	0x080036b9
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	080036b9 	.word	0x080036b9
 80032dc:	080036b9 	.word	0x080036b9
 80032e0:	080036b9 	.word	0x080036b9
 80032e4:	080034e9 	.word	0x080034e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4bb9      	ldr	r3, [pc, #740]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80032ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80032ee:	e1e7      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f0:	4bb8      	ldr	r3, [pc, #736]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80032f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032f6:	e1e3      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f8:	4bb4      	ldr	r3, [pc, #720]	; (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003304:	4bb1      	ldr	r3, [pc, #708]	; (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d071      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003310:	4bae      	ldr	r3, [pc, #696]	; (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800331c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003336:	4622      	mov	r2, r4
 8003338:	462b      	mov	r3, r5
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	0159      	lsls	r1, r3, #5
 8003344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003348:	0150      	lsls	r0, r2, #5
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4621      	mov	r1, r4
 8003350:	1a51      	subs	r1, r2, r1
 8003352:	6439      	str	r1, [r7, #64]	; 0x40
 8003354:	4629      	mov	r1, r5
 8003356:	eb63 0301 	sbc.w	r3, r3, r1
 800335a:	647b      	str	r3, [r7, #68]	; 0x44
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003368:	4649      	mov	r1, r9
 800336a:	018b      	lsls	r3, r1, #6
 800336c:	4641      	mov	r1, r8
 800336e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003372:	4641      	mov	r1, r8
 8003374:	018a      	lsls	r2, r1, #6
 8003376:	4641      	mov	r1, r8
 8003378:	1a51      	subs	r1, r2, r1
 800337a:	63b9      	str	r1, [r7, #56]	; 0x38
 800337c:	4649      	mov	r1, r9
 800337e:	eb63 0301 	sbc.w	r3, r3, r1
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003390:	4649      	mov	r1, r9
 8003392:	00cb      	lsls	r3, r1, #3
 8003394:	4641      	mov	r1, r8
 8003396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339a:	4641      	mov	r1, r8
 800339c:	00ca      	lsls	r2, r1, #3
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	4622      	mov	r2, r4
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30
 80033aa:	462b      	mov	r3, r5
 80033ac:	460a      	mov	r2, r1
 80033ae:	eb42 0303 	adc.w	r3, r2, r3
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033c0:	4629      	mov	r1, r5
 80033c2:	024b      	lsls	r3, r1, #9
 80033c4:	4621      	mov	r1, r4
 80033c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033ca:	4621      	mov	r1, r4
 80033cc:	024a      	lsls	r2, r1, #9
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80033e4:	f7fd fbf8 	bl	8000bd8 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033f2:	e067      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f4:	4b75      	ldr	r3, [pc, #468]	; (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003400:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340c:	67bb      	str	r3, [r7, #120]	; 0x78
 800340e:	2300      	movs	r3, #0
 8003410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003412:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003416:	4622      	mov	r2, r4
 8003418:	462b      	mov	r3, r5
 800341a:	f04f 0000 	mov.w	r0, #0
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	0159      	lsls	r1, r3, #5
 8003424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003428:	0150      	lsls	r0, r2, #5
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4621      	mov	r1, r4
 8003430:	1a51      	subs	r1, r2, r1
 8003432:	62b9      	str	r1, [r7, #40]	; 0x28
 8003434:	4629      	mov	r1, r5
 8003436:	eb63 0301 	sbc.w	r3, r3, r1
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003448:	4649      	mov	r1, r9
 800344a:	018b      	lsls	r3, r1, #6
 800344c:	4641      	mov	r1, r8
 800344e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003452:	4641      	mov	r1, r8
 8003454:	018a      	lsls	r2, r1, #6
 8003456:	4641      	mov	r1, r8
 8003458:	ebb2 0a01 	subs.w	sl, r2, r1
 800345c:	4649      	mov	r1, r9
 800345e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800346e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003476:	4692      	mov	sl, r2
 8003478:	469b      	mov	fp, r3
 800347a:	4623      	mov	r3, r4
 800347c:	eb1a 0303 	adds.w	r3, sl, r3
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	462b      	mov	r3, r5
 8003484:	eb4b 0303 	adc.w	r3, fp, r3
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003496:	4629      	mov	r1, r5
 8003498:	028b      	lsls	r3, r1, #10
 800349a:	4621      	mov	r1, r4
 800349c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034a0:	4621      	mov	r1, r4
 80034a2:	028a      	lsls	r2, r1, #10
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ac:	2200      	movs	r2, #0
 80034ae:	673b      	str	r3, [r7, #112]	; 0x70
 80034b0:	677a      	str	r2, [r7, #116]	; 0x74
 80034b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80034b6:	f7fd fb8f 	bl	8000bd8 <__aeabi_uldivmod>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4613      	mov	r3, r2
 80034c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034c4:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80034d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034e6:	e0eb      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e8:	4b38      	ldr	r3, [pc, #224]	; (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d06b      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003500:	4b32      	ldr	r3, [pc, #200]	; (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	099b      	lsrs	r3, r3, #6
 8003506:	2200      	movs	r2, #0
 8003508:	66bb      	str	r3, [r7, #104]	; 0x68
 800350a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800350c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	663b      	str	r3, [r7, #96]	; 0x60
 8003514:	2300      	movs	r3, #0
 8003516:	667b      	str	r3, [r7, #100]	; 0x64
 8003518:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800351c:	4622      	mov	r2, r4
 800351e:	462b      	mov	r3, r5
 8003520:	f04f 0000 	mov.w	r0, #0
 8003524:	f04f 0100 	mov.w	r1, #0
 8003528:	0159      	lsls	r1, r3, #5
 800352a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800352e:	0150      	lsls	r0, r2, #5
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4621      	mov	r1, r4
 8003536:	1a51      	subs	r1, r2, r1
 8003538:	61b9      	str	r1, [r7, #24]
 800353a:	4629      	mov	r1, r5
 800353c:	eb63 0301 	sbc.w	r3, r3, r1
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800354e:	4659      	mov	r1, fp
 8003550:	018b      	lsls	r3, r1, #6
 8003552:	4651      	mov	r1, sl
 8003554:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003558:	4651      	mov	r1, sl
 800355a:	018a      	lsls	r2, r1, #6
 800355c:	4651      	mov	r1, sl
 800355e:	ebb2 0801 	subs.w	r8, r2, r1
 8003562:	4659      	mov	r1, fp
 8003564:	eb63 0901 	sbc.w	r9, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003574:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003578:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800357c:	4690      	mov	r8, r2
 800357e:	4699      	mov	r9, r3
 8003580:	4623      	mov	r3, r4
 8003582:	eb18 0303 	adds.w	r3, r8, r3
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	462b      	mov	r3, r5
 800358a:	eb49 0303 	adc.w	r3, r9, r3
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800359c:	4629      	mov	r1, r5
 800359e:	024b      	lsls	r3, r1, #9
 80035a0:	4621      	mov	r1, r4
 80035a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035a6:	4621      	mov	r1, r4
 80035a8:	024a      	lsls	r2, r1, #9
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035b2:	2200      	movs	r2, #0
 80035b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80035b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80035b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035bc:	f7fd fb0c 	bl	8000bd8 <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4613      	mov	r3, r2
 80035c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035ca:	e065      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x420>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d8:	4b3d      	ldr	r3, [pc, #244]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	099b      	lsrs	r3, r3, #6
 80035de:	2200      	movs	r2, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	4611      	mov	r1, r2
 80035e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035e8:	653b      	str	r3, [r7, #80]	; 0x50
 80035ea:	2300      	movs	r3, #0
 80035ec:	657b      	str	r3, [r7, #84]	; 0x54
 80035ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80035f2:	4642      	mov	r2, r8
 80035f4:	464b      	mov	r3, r9
 80035f6:	f04f 0000 	mov.w	r0, #0
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	0159      	lsls	r1, r3, #5
 8003600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003604:	0150      	lsls	r0, r2, #5
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4641      	mov	r1, r8
 800360c:	1a51      	subs	r1, r2, r1
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	4649      	mov	r1, r9
 8003612:	eb63 0301 	sbc.w	r3, r3, r1
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003624:	4659      	mov	r1, fp
 8003626:	018b      	lsls	r3, r1, #6
 8003628:	4651      	mov	r1, sl
 800362a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800362e:	4651      	mov	r1, sl
 8003630:	018a      	lsls	r2, r1, #6
 8003632:	4651      	mov	r1, sl
 8003634:	1a54      	subs	r4, r2, r1
 8003636:	4659      	mov	r1, fp
 8003638:	eb63 0501 	sbc.w	r5, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	00eb      	lsls	r3, r5, #3
 8003646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364a:	00e2      	lsls	r2, r4, #3
 800364c:	4614      	mov	r4, r2
 800364e:	461d      	mov	r5, r3
 8003650:	4643      	mov	r3, r8
 8003652:	18e3      	adds	r3, r4, r3
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	464b      	mov	r3, r9
 8003658:	eb45 0303 	adc.w	r3, r5, r3
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800366a:	4629      	mov	r1, r5
 800366c:	028b      	lsls	r3, r1, #10
 800366e:	4621      	mov	r1, r4
 8003670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003674:	4621      	mov	r1, r4
 8003676:	028a      	lsls	r2, r1, #10
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003680:	2200      	movs	r2, #0
 8003682:	64bb      	str	r3, [r7, #72]	; 0x48
 8003684:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003686:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800368a:	f7fd faa5 	bl	8000bd8 <__aeabi_uldivmod>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4613      	mov	r3, r2
 8003694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0f1b      	lsrs	r3, r3, #28
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80036a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036b6:	e003      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80036ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	37b8      	adds	r7, #184	; 0xb8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	00f42400 	.word	0x00f42400

080036d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e28d      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8083 	beq.w	80037fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036f8:	4b94      	ldr	r3, [pc, #592]	; (800394c <HAL_RCC_OscConfig+0x274>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b04      	cmp	r3, #4
 8003702:	d019      	beq.n	8003738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003704:	4b91      	ldr	r3, [pc, #580]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800370c:	2b08      	cmp	r3, #8
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003710:	4b8e      	ldr	r3, [pc, #568]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371c:	d00c      	beq.n	8003738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371e:	4b8b      	ldr	r3, [pc, #556]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d112      	bne.n	8003750 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372a:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003736:	d10b      	bne.n	8003750 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	4b84      	ldr	r3, [pc, #528]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d05b      	beq.n	80037fc <HAL_RCC_OscConfig+0x124>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d157      	bne.n	80037fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e25a      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003758:	d106      	bne.n	8003768 <HAL_RCC_OscConfig+0x90>
 800375a:	4b7c      	ldr	r3, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a7b      	ldr	r2, [pc, #492]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e01d      	b.n	80037a4 <HAL_RCC_OscConfig+0xcc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0xb4>
 8003772:	4b76      	ldr	r3, [pc, #472]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b73      	ldr	r3, [pc, #460]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a72      	ldr	r2, [pc, #456]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0xcc>
 800378c:	4b6f      	ldr	r3, [pc, #444]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6e      	ldr	r2, [pc, #440]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b6c      	ldr	r3, [pc, #432]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6b      	ldr	r2, [pc, #428]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe f962 	bl	8001a74 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe f95e 	bl	8001a74 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e21f      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_OscConfig+0x274>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0xdc>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe f94e 	bl	8001a74 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fe f94a 	bl	8001a74 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e20b      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	4b57      	ldr	r3, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x274>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x104>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d06f      	beq.n	80038ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800380a:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b00      	cmp	r3, #0
 8003814:	d017      	beq.n	8003846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003816:	4b4d      	ldr	r3, [pc, #308]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800381e:	2b08      	cmp	r3, #8
 8003820:	d105      	bne.n	800382e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003822:	4b4a      	ldr	r3, [pc, #296]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003836:	2b0c      	cmp	r3, #12
 8003838:	d11c      	bne.n	8003874 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b44      	ldr	r3, [pc, #272]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_RCC_OscConfig+0x186>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1d3      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4937      	ldr	r1, [pc, #220]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	e03a      	b.n	80038ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387c:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_RCC_OscConfig+0x278>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fe f8f7 	bl	8001a74 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388a:	f7fe f8f3 	bl	8001a74 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1b4      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b28      	ldr	r3, [pc, #160]	; (800394c <HAL_RCC_OscConfig+0x274>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4925      	ldr	r1, [pc, #148]	; (800394c <HAL_RCC_OscConfig+0x274>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCC_OscConfig+0x278>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe f8d6 	bl	8001a74 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038cc:	f7fe f8d2 	bl	8001a74 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e193      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x274>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d036      	beq.n	8003964 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fe f8b6 	bl	8001a74 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390c:	f7fe f8b2 	bl	8001a74 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e173      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_OscConfig+0x274>)
 8003920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x234>
 800392a:	e01b      	b.n	8003964 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fe f89f 	bl	8001a74 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00e      	b.n	8003958 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393a:	f7fe f89b 	bl	8001a74 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d907      	bls.n	8003958 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e15c      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
 800394c:	40023800 	.word	0x40023800
 8003950:	42470000 	.word	0x42470000
 8003954:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	4b8a      	ldr	r3, [pc, #552]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ea      	bne.n	800393a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8097 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b83      	ldr	r3, [pc, #524]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	4b7f      	ldr	r3, [pc, #508]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a7e      	ldr	r2, [pc, #504]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b7c      	ldr	r3, [pc, #496]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b79      	ldr	r3, [pc, #484]	; (8003b88 <HAL_RCC_OscConfig+0x4b0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b76      	ldr	r3, [pc, #472]	; (8003b88 <HAL_RCC_OscConfig+0x4b0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a75      	ldr	r2, [pc, #468]	; (8003b88 <HAL_RCC_OscConfig+0x4b0>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fe f85b 	bl	8001a74 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fe f857 	bl	8001a74 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e118      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b6c      	ldr	r3, [pc, #432]	; (8003b88 <HAL_RCC_OscConfig+0x4b0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x31e>
 80039e8:	4b66      	ldr	r3, [pc, #408]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0x358>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x340>
 80039fe:	4b61      	ldr	r3, [pc, #388]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0a:	4b5e      	ldr	r3, [pc, #376]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a5d      	ldr	r2, [pc, #372]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0x358>
 8003a18:	4b5a      	ldr	r3, [pc, #360]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a59      	ldr	r2, [pc, #356]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	4b57      	ldr	r3, [pc, #348]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a56      	ldr	r2, [pc, #344]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a2a:	f023 0304 	bic.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe f81c 	bl	8001a74 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe f818 	bl	8001a74 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0d7      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a56:	4b4b      	ldr	r3, [pc, #300]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ee      	beq.n	8003a40 <HAL_RCC_OscConfig+0x368>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fe f806 	bl	8001a74 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe f802 	bl	8001a74 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0c1      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a82:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ee      	bne.n	8003a6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	4a3a      	ldr	r2, [pc, #232]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80ad 	beq.w	8003c04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aaa:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d060      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d145      	bne.n	8003b4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <HAL_RCC_OscConfig+0x4b4>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd ffd6 	bl	8001a74 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd ffd2 	bl	8001a74 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e093      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	4b29      	ldr	r3, [pc, #164]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	019b      	lsls	r3, r3, #6
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	071b      	lsls	r3, r3, #28
 8003b16:	491b      	ldr	r1, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_RCC_OscConfig+0x4b4>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fd ffa7 	bl	8001a74 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2a:	f7fd ffa3 	bl	8001a74 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e064      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x452>
 8003b48:	e05c      	b.n	8003c04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_RCC_OscConfig+0x4b4>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd ff90 	bl	8001a74 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b58:	f7fd ff8c 	bl	8001a74 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e04d      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x480>
 8003b76:	e045      	b.n	8003c04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d107      	bne.n	8003b90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e040      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <HAL_RCC_OscConfig+0x538>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d030      	beq.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d129      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d122      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d119      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d10f      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e042      	b.n	8003cac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fe42 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f973 	bl	8003f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d175      	bne.n	8003dc0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_UART_Transmit+0x2c>
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e06e      	b.n	8003dc2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2221      	movs	r2, #33	; 0x21
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf2:	f7fd febf 	bl	8001a74 <HAL_GetTick>
 8003cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	88fa      	ldrh	r2, [r7, #6]
 8003d02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d108      	bne.n	8003d20 <HAL_UART_Transmit+0x6c>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e003      	b.n	8003d28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d28:	e02e      	b.n	8003d88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f848 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e03a      	b.n	8003dc2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	3302      	adds	r3, #2
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	e007      	b.n	8003d7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	3301      	adds	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1cb      	bne.n	8003d2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2140      	movs	r1, #64	; 0x40
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f814 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e006      	b.n	8003dc2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dda:	e03b      	b.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d037      	beq.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fd fe46 	bl	8001a74 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	6a3a      	ldr	r2, [r7, #32]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x30>
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e03a      	b.n	8003e74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d023      	beq.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b80      	cmp	r3, #128	; 0x80
 8003e10:	d020      	beq.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d01d      	beq.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d116      	bne.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f81d 	bl	8003e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2208      	movs	r2, #8
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e00f      	b.n	8003e74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d0b4      	beq.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b095      	sub	sp, #84	; 0x54
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ea4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e5      	bne.n	8003e84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3314      	adds	r3, #20
 8003ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e5      	bne.n	8003eb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d119      	bne.n	8003f28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f023 0310 	bic.w	r3, r3, #16
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f14:	61ba      	str	r2, [r7, #24]
 8003f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6979      	ldr	r1, [r7, #20]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	613b      	str	r3, [r7, #16]
   return(result);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e5      	bne.n	8003ef4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f36:	bf00      	nop
 8003f38:	3754      	adds	r7, #84	; 0x54
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f48:	b0c0      	sub	sp, #256	; 0x100
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	68d9      	ldr	r1, [r3, #12]
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	ea40 0301 	orr.w	r3, r0, r1
 8003f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f9c:	f021 010c 	bic.w	r1, r1, #12
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003faa:	430b      	orrs	r3, r1
 8003fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbe:	6999      	ldr	r1, [r3, #24]
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	ea40 0301 	orr.w	r3, r0, r1
 8003fca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4b8f      	ldr	r3, [pc, #572]	; (8004210 <UART_SetConfig+0x2cc>)
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d005      	beq.n	8003fe4 <UART_SetConfig+0xa0>
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b8d      	ldr	r3, [pc, #564]	; (8004214 <UART_SetConfig+0x2d0>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d104      	bne.n	8003fee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fe4:	f7ff f934 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 8003fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fec:	e003      	b.n	8003ff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fee:	f7ff f91b 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8003ff2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004000:	f040 810c 	bne.w	800421c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004008:	2200      	movs	r2, #0
 800400a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800400e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004016:	4622      	mov	r2, r4
 8004018:	462b      	mov	r3, r5
 800401a:	1891      	adds	r1, r2, r2
 800401c:	65b9      	str	r1, [r7, #88]	; 0x58
 800401e:	415b      	adcs	r3, r3
 8004020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004026:	4621      	mov	r1, r4
 8004028:	eb12 0801 	adds.w	r8, r2, r1
 800402c:	4629      	mov	r1, r5
 800402e:	eb43 0901 	adc.w	r9, r3, r1
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800403e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004046:	4690      	mov	r8, r2
 8004048:	4699      	mov	r9, r3
 800404a:	4623      	mov	r3, r4
 800404c:	eb18 0303 	adds.w	r3, r8, r3
 8004050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004054:	462b      	mov	r3, r5
 8004056:	eb49 0303 	adc.w	r3, r9, r3
 800405a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800406a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800406e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004072:	460b      	mov	r3, r1
 8004074:	18db      	adds	r3, r3, r3
 8004076:	653b      	str	r3, [r7, #80]	; 0x50
 8004078:	4613      	mov	r3, r2
 800407a:	eb42 0303 	adc.w	r3, r2, r3
 800407e:	657b      	str	r3, [r7, #84]	; 0x54
 8004080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004088:	f7fc fda6 	bl	8000bd8 <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4b61      	ldr	r3, [pc, #388]	; (8004218 <UART_SetConfig+0x2d4>)
 8004092:	fba3 2302 	umull	r2, r3, r3, r2
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	011c      	lsls	r4, r3, #4
 800409a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040ac:	4642      	mov	r2, r8
 80040ae:	464b      	mov	r3, r9
 80040b0:	1891      	adds	r1, r2, r2
 80040b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80040b4:	415b      	adcs	r3, r3
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040bc:	4641      	mov	r1, r8
 80040be:	eb12 0a01 	adds.w	sl, r2, r1
 80040c2:	4649      	mov	r1, r9
 80040c4:	eb43 0b01 	adc.w	fp, r3, r1
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040dc:	4692      	mov	sl, r2
 80040de:	469b      	mov	fp, r3
 80040e0:	4643      	mov	r3, r8
 80040e2:	eb1a 0303 	adds.w	r3, sl, r3
 80040e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ea:	464b      	mov	r3, r9
 80040ec:	eb4b 0303 	adc.w	r3, fp, r3
 80040f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004100:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004108:	460b      	mov	r3, r1
 800410a:	18db      	adds	r3, r3, r3
 800410c:	643b      	str	r3, [r7, #64]	; 0x40
 800410e:	4613      	mov	r3, r2
 8004110:	eb42 0303 	adc.w	r3, r2, r3
 8004114:	647b      	str	r3, [r7, #68]	; 0x44
 8004116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800411a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800411e:	f7fc fd5b 	bl	8000bd8 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4611      	mov	r1, r2
 8004128:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <UART_SetConfig+0x2d4>)
 800412a:	fba3 2301 	umull	r2, r3, r3, r1
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	2264      	movs	r2, #100	; 0x64
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	1acb      	subs	r3, r1, r3
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <UART_SetConfig+0x2d4>)
 8004140:	fba3 2302 	umull	r2, r3, r3, r2
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800414c:	441c      	add	r4, r3
 800414e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004152:	2200      	movs	r2, #0
 8004154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004158:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800415c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	1891      	adds	r1, r2, r2
 8004166:	63b9      	str	r1, [r7, #56]	; 0x38
 8004168:	415b      	adcs	r3, r3
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800416c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004170:	4641      	mov	r1, r8
 8004172:	1851      	adds	r1, r2, r1
 8004174:	6339      	str	r1, [r7, #48]	; 0x30
 8004176:	4649      	mov	r1, r9
 8004178:	414b      	adcs	r3, r1
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004188:	4659      	mov	r1, fp
 800418a:	00cb      	lsls	r3, r1, #3
 800418c:	4651      	mov	r1, sl
 800418e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004192:	4651      	mov	r1, sl
 8004194:	00ca      	lsls	r2, r1, #3
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	4603      	mov	r3, r0
 800419c:	4642      	mov	r2, r8
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a4:	464b      	mov	r3, r9
 80041a6:	460a      	mov	r2, r1
 80041a8:	eb42 0303 	adc.w	r3, r2, r3
 80041ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041c4:	460b      	mov	r3, r1
 80041c6:	18db      	adds	r3, r3, r3
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ca:	4613      	mov	r3, r2
 80041cc:	eb42 0303 	adc.w	r3, r2, r3
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041da:	f7fc fcfd 	bl	8000bd8 <__aeabi_uldivmod>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <UART_SetConfig+0x2d4>)
 80041e4:	fba3 1302 	umull	r1, r3, r3, r2
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	2164      	movs	r1, #100	; 0x64
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	3332      	adds	r3, #50	; 0x32
 80041f6:	4a08      	ldr	r2, [pc, #32]	; (8004218 <UART_SetConfig+0x2d4>)
 80041f8:	fba2 2303 	umull	r2, r3, r2, r3
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	f003 0207 	and.w	r2, r3, #7
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4422      	add	r2, r4
 800420a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800420c:	e106      	b.n	800441c <UART_SetConfig+0x4d8>
 800420e:	bf00      	nop
 8004210:	40011000 	.word	0x40011000
 8004214:	40011400 	.word	0x40011400
 8004218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004220:	2200      	movs	r2, #0
 8004222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004226:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800422a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800422e:	4642      	mov	r2, r8
 8004230:	464b      	mov	r3, r9
 8004232:	1891      	adds	r1, r2, r2
 8004234:	6239      	str	r1, [r7, #32]
 8004236:	415b      	adcs	r3, r3
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
 800423a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800423e:	4641      	mov	r1, r8
 8004240:	1854      	adds	r4, r2, r1
 8004242:	4649      	mov	r1, r9
 8004244:	eb43 0501 	adc.w	r5, r3, r1
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	00eb      	lsls	r3, r5, #3
 8004252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004256:	00e2      	lsls	r2, r4, #3
 8004258:	4614      	mov	r4, r2
 800425a:	461d      	mov	r5, r3
 800425c:	4643      	mov	r3, r8
 800425e:	18e3      	adds	r3, r4, r3
 8004260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004264:	464b      	mov	r3, r9
 8004266:	eb45 0303 	adc.w	r3, r5, r3
 800426a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800427a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800428a:	4629      	mov	r1, r5
 800428c:	008b      	lsls	r3, r1, #2
 800428e:	4621      	mov	r1, r4
 8004290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004294:	4621      	mov	r1, r4
 8004296:	008a      	lsls	r2, r1, #2
 8004298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800429c:	f7fc fc9c 	bl	8000bd8 <__aeabi_uldivmod>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4b60      	ldr	r3, [pc, #384]	; (8004428 <UART_SetConfig+0x4e4>)
 80042a6:	fba3 2302 	umull	r2, r3, r3, r2
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	011c      	lsls	r4, r3, #4
 80042ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042c0:	4642      	mov	r2, r8
 80042c2:	464b      	mov	r3, r9
 80042c4:	1891      	adds	r1, r2, r2
 80042c6:	61b9      	str	r1, [r7, #24]
 80042c8:	415b      	adcs	r3, r3
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d0:	4641      	mov	r1, r8
 80042d2:	1851      	adds	r1, r2, r1
 80042d4:	6139      	str	r1, [r7, #16]
 80042d6:	4649      	mov	r1, r9
 80042d8:	414b      	adcs	r3, r1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042e8:	4659      	mov	r1, fp
 80042ea:	00cb      	lsls	r3, r1, #3
 80042ec:	4651      	mov	r1, sl
 80042ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042f2:	4651      	mov	r1, sl
 80042f4:	00ca      	lsls	r2, r1, #3
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	4642      	mov	r2, r8
 80042fe:	189b      	adds	r3, r3, r2
 8004300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004304:	464b      	mov	r3, r9
 8004306:	460a      	mov	r2, r1
 8004308:	eb42 0303 	adc.w	r3, r2, r3
 800430c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	67bb      	str	r3, [r7, #120]	; 0x78
 800431a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004328:	4649      	mov	r1, r9
 800432a:	008b      	lsls	r3, r1, #2
 800432c:	4641      	mov	r1, r8
 800432e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004332:	4641      	mov	r1, r8
 8004334:	008a      	lsls	r2, r1, #2
 8004336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800433a:	f7fc fc4d 	bl	8000bd8 <__aeabi_uldivmod>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4611      	mov	r1, r2
 8004344:	4b38      	ldr	r3, [pc, #224]	; (8004428 <UART_SetConfig+0x4e4>)
 8004346:	fba3 2301 	umull	r2, r3, r3, r1
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2264      	movs	r2, #100	; 0x64
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	1acb      	subs	r3, r1, r3
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	3332      	adds	r3, #50	; 0x32
 8004358:	4a33      	ldr	r2, [pc, #204]	; (8004428 <UART_SetConfig+0x4e4>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004364:	441c      	add	r4, r3
 8004366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800436a:	2200      	movs	r2, #0
 800436c:	673b      	str	r3, [r7, #112]	; 0x70
 800436e:	677a      	str	r2, [r7, #116]	; 0x74
 8004370:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004374:	4642      	mov	r2, r8
 8004376:	464b      	mov	r3, r9
 8004378:	1891      	adds	r1, r2, r2
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	415b      	adcs	r3, r3
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004384:	4641      	mov	r1, r8
 8004386:	1851      	adds	r1, r2, r1
 8004388:	6039      	str	r1, [r7, #0]
 800438a:	4649      	mov	r1, r9
 800438c:	414b      	adcs	r3, r1
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800439c:	4659      	mov	r1, fp
 800439e:	00cb      	lsls	r3, r1, #3
 80043a0:	4651      	mov	r1, sl
 80043a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a6:	4651      	mov	r1, sl
 80043a8:	00ca      	lsls	r2, r1, #3
 80043aa:	4610      	mov	r0, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	4603      	mov	r3, r0
 80043b0:	4642      	mov	r2, r8
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80043b6:	464b      	mov	r3, r9
 80043b8:	460a      	mov	r2, r1
 80043ba:	eb42 0303 	adc.w	r3, r2, r3
 80043be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	663b      	str	r3, [r7, #96]	; 0x60
 80043ca:	667a      	str	r2, [r7, #100]	; 0x64
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043d8:	4649      	mov	r1, r9
 80043da:	008b      	lsls	r3, r1, #2
 80043dc:	4641      	mov	r1, r8
 80043de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e2:	4641      	mov	r1, r8
 80043e4:	008a      	lsls	r2, r1, #2
 80043e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043ea:	f7fc fbf5 	bl	8000bd8 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <UART_SetConfig+0x4e4>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <UART_SetConfig+0x4e4>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	f003 020f 	and.w	r2, r3, #15
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4422      	add	r2, r4
 800441a:	609a      	str	r2, [r3, #8]
}
 800441c:	bf00      	nop
 800441e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004422:	46bd      	mov	sp, r7
 8004424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004428:	51eb851f 	.word	0x51eb851f

0800442c <siprintf>:
 800442c:	b40e      	push	{r1, r2, r3}
 800442e:	b500      	push	{lr}
 8004430:	b09c      	sub	sp, #112	; 0x70
 8004432:	ab1d      	add	r3, sp, #116	; 0x74
 8004434:	9002      	str	r0, [sp, #8]
 8004436:	9006      	str	r0, [sp, #24]
 8004438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800443c:	4809      	ldr	r0, [pc, #36]	; (8004464 <siprintf+0x38>)
 800443e:	9107      	str	r1, [sp, #28]
 8004440:	9104      	str	r1, [sp, #16]
 8004442:	4909      	ldr	r1, [pc, #36]	; (8004468 <siprintf+0x3c>)
 8004444:	f853 2b04 	ldr.w	r2, [r3], #4
 8004448:	9105      	str	r1, [sp, #20]
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	a902      	add	r1, sp, #8
 8004450:	f000 f992 	bl	8004778 <_svfiprintf_r>
 8004454:	9b02      	ldr	r3, [sp, #8]
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	b01c      	add	sp, #112	; 0x70
 800445c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004460:	b003      	add	sp, #12
 8004462:	4770      	bx	lr
 8004464:	20000058 	.word	0x20000058
 8004468:	ffff0208 	.word	0xffff0208

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <__errno>:
 800447c:	4b01      	ldr	r3, [pc, #4]	; (8004484 <__errno+0x8>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000058 	.word	0x20000058

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	4d0d      	ldr	r5, [pc, #52]	; (80044c0 <__libc_init_array+0x38>)
 800448c:	4c0d      	ldr	r4, [pc, #52]	; (80044c4 <__libc_init_array+0x3c>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	2600      	movs	r6, #0
 8004494:	42a6      	cmp	r6, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	4d0b      	ldr	r5, [pc, #44]	; (80044c8 <__libc_init_array+0x40>)
 800449a:	4c0c      	ldr	r4, [pc, #48]	; (80044cc <__libc_init_array+0x44>)
 800449c:	f001 fbc4 	bl	8005c28 <_init>
 80044a0:	1b64      	subs	r4, r4, r5
 80044a2:	10a4      	asrs	r4, r4, #2
 80044a4:	2600      	movs	r6, #0
 80044a6:	42a6      	cmp	r6, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b0:	4798      	blx	r3
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ba:	4798      	blx	r3
 80044bc:	3601      	adds	r6, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	08005d70 	.word	0x08005d70
 80044c4:	08005d70 	.word	0x08005d70
 80044c8:	08005d70 	.word	0x08005d70
 80044cc:	08005d74 	.word	0x08005d74

080044d0 <__retarget_lock_acquire_recursive>:
 80044d0:	4770      	bx	lr

080044d2 <__retarget_lock_release_recursive>:
 80044d2:	4770      	bx	lr

080044d4 <_free_r>:
 80044d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044d6:	2900      	cmp	r1, #0
 80044d8:	d044      	beq.n	8004564 <_free_r+0x90>
 80044da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044de:	9001      	str	r0, [sp, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f1a1 0404 	sub.w	r4, r1, #4
 80044e6:	bfb8      	it	lt
 80044e8:	18e4      	addlt	r4, r4, r3
 80044ea:	f000 f8df 	bl	80046ac <__malloc_lock>
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <_free_r+0x94>)
 80044f0:	9801      	ldr	r0, [sp, #4]
 80044f2:	6813      	ldr	r3, [r2, #0]
 80044f4:	b933      	cbnz	r3, 8004504 <_free_r+0x30>
 80044f6:	6063      	str	r3, [r4, #4]
 80044f8:	6014      	str	r4, [r2, #0]
 80044fa:	b003      	add	sp, #12
 80044fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004500:	f000 b8da 	b.w	80046b8 <__malloc_unlock>
 8004504:	42a3      	cmp	r3, r4
 8004506:	d908      	bls.n	800451a <_free_r+0x46>
 8004508:	6825      	ldr	r5, [r4, #0]
 800450a:	1961      	adds	r1, r4, r5
 800450c:	428b      	cmp	r3, r1
 800450e:	bf01      	itttt	eq
 8004510:	6819      	ldreq	r1, [r3, #0]
 8004512:	685b      	ldreq	r3, [r3, #4]
 8004514:	1949      	addeq	r1, r1, r5
 8004516:	6021      	streq	r1, [r4, #0]
 8004518:	e7ed      	b.n	80044f6 <_free_r+0x22>
 800451a:	461a      	mov	r2, r3
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	b10b      	cbz	r3, 8004524 <_free_r+0x50>
 8004520:	42a3      	cmp	r3, r4
 8004522:	d9fa      	bls.n	800451a <_free_r+0x46>
 8004524:	6811      	ldr	r1, [r2, #0]
 8004526:	1855      	adds	r5, r2, r1
 8004528:	42a5      	cmp	r5, r4
 800452a:	d10b      	bne.n	8004544 <_free_r+0x70>
 800452c:	6824      	ldr	r4, [r4, #0]
 800452e:	4421      	add	r1, r4
 8004530:	1854      	adds	r4, r2, r1
 8004532:	42a3      	cmp	r3, r4
 8004534:	6011      	str	r1, [r2, #0]
 8004536:	d1e0      	bne.n	80044fa <_free_r+0x26>
 8004538:	681c      	ldr	r4, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	6053      	str	r3, [r2, #4]
 800453e:	440c      	add	r4, r1
 8004540:	6014      	str	r4, [r2, #0]
 8004542:	e7da      	b.n	80044fa <_free_r+0x26>
 8004544:	d902      	bls.n	800454c <_free_r+0x78>
 8004546:	230c      	movs	r3, #12
 8004548:	6003      	str	r3, [r0, #0]
 800454a:	e7d6      	b.n	80044fa <_free_r+0x26>
 800454c:	6825      	ldr	r5, [r4, #0]
 800454e:	1961      	adds	r1, r4, r5
 8004550:	428b      	cmp	r3, r1
 8004552:	bf04      	itt	eq
 8004554:	6819      	ldreq	r1, [r3, #0]
 8004556:	685b      	ldreq	r3, [r3, #4]
 8004558:	6063      	str	r3, [r4, #4]
 800455a:	bf04      	itt	eq
 800455c:	1949      	addeq	r1, r1, r5
 800455e:	6021      	streq	r1, [r4, #0]
 8004560:	6054      	str	r4, [r2, #4]
 8004562:	e7ca      	b.n	80044fa <_free_r+0x26>
 8004564:	b003      	add	sp, #12
 8004566:	bd30      	pop	{r4, r5, pc}
 8004568:	20000270 	.word	0x20000270

0800456c <sbrk_aligned>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	4e0e      	ldr	r6, [pc, #56]	; (80045a8 <sbrk_aligned+0x3c>)
 8004570:	460c      	mov	r4, r1
 8004572:	6831      	ldr	r1, [r6, #0]
 8004574:	4605      	mov	r5, r0
 8004576:	b911      	cbnz	r1, 800457e <sbrk_aligned+0x12>
 8004578:	f000 fba6 	bl	8004cc8 <_sbrk_r>
 800457c:	6030      	str	r0, [r6, #0]
 800457e:	4621      	mov	r1, r4
 8004580:	4628      	mov	r0, r5
 8004582:	f000 fba1 	bl	8004cc8 <_sbrk_r>
 8004586:	1c43      	adds	r3, r0, #1
 8004588:	d00a      	beq.n	80045a0 <sbrk_aligned+0x34>
 800458a:	1cc4      	adds	r4, r0, #3
 800458c:	f024 0403 	bic.w	r4, r4, #3
 8004590:	42a0      	cmp	r0, r4
 8004592:	d007      	beq.n	80045a4 <sbrk_aligned+0x38>
 8004594:	1a21      	subs	r1, r4, r0
 8004596:	4628      	mov	r0, r5
 8004598:	f000 fb96 	bl	8004cc8 <_sbrk_r>
 800459c:	3001      	adds	r0, #1
 800459e:	d101      	bne.n	80045a4 <sbrk_aligned+0x38>
 80045a0:	f04f 34ff 	mov.w	r4, #4294967295
 80045a4:	4620      	mov	r0, r4
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	20000274 	.word	0x20000274

080045ac <_malloc_r>:
 80045ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b0:	1ccd      	adds	r5, r1, #3
 80045b2:	f025 0503 	bic.w	r5, r5, #3
 80045b6:	3508      	adds	r5, #8
 80045b8:	2d0c      	cmp	r5, #12
 80045ba:	bf38      	it	cc
 80045bc:	250c      	movcc	r5, #12
 80045be:	2d00      	cmp	r5, #0
 80045c0:	4607      	mov	r7, r0
 80045c2:	db01      	blt.n	80045c8 <_malloc_r+0x1c>
 80045c4:	42a9      	cmp	r1, r5
 80045c6:	d905      	bls.n	80045d4 <_malloc_r+0x28>
 80045c8:	230c      	movs	r3, #12
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	2600      	movs	r6, #0
 80045ce:	4630      	mov	r0, r6
 80045d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80046a8 <_malloc_r+0xfc>
 80045d8:	f000 f868 	bl	80046ac <__malloc_lock>
 80045dc:	f8d8 3000 	ldr.w	r3, [r8]
 80045e0:	461c      	mov	r4, r3
 80045e2:	bb5c      	cbnz	r4, 800463c <_malloc_r+0x90>
 80045e4:	4629      	mov	r1, r5
 80045e6:	4638      	mov	r0, r7
 80045e8:	f7ff ffc0 	bl	800456c <sbrk_aligned>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	4604      	mov	r4, r0
 80045f0:	d155      	bne.n	800469e <_malloc_r+0xf2>
 80045f2:	f8d8 4000 	ldr.w	r4, [r8]
 80045f6:	4626      	mov	r6, r4
 80045f8:	2e00      	cmp	r6, #0
 80045fa:	d145      	bne.n	8004688 <_malloc_r+0xdc>
 80045fc:	2c00      	cmp	r4, #0
 80045fe:	d048      	beq.n	8004692 <_malloc_r+0xe6>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	4631      	mov	r1, r6
 8004604:	4638      	mov	r0, r7
 8004606:	eb04 0903 	add.w	r9, r4, r3
 800460a:	f000 fb5d 	bl	8004cc8 <_sbrk_r>
 800460e:	4581      	cmp	r9, r0
 8004610:	d13f      	bne.n	8004692 <_malloc_r+0xe6>
 8004612:	6821      	ldr	r1, [r4, #0]
 8004614:	1a6d      	subs	r5, r5, r1
 8004616:	4629      	mov	r1, r5
 8004618:	4638      	mov	r0, r7
 800461a:	f7ff ffa7 	bl	800456c <sbrk_aligned>
 800461e:	3001      	adds	r0, #1
 8004620:	d037      	beq.n	8004692 <_malloc_r+0xe6>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	442b      	add	r3, r5
 8004626:	6023      	str	r3, [r4, #0]
 8004628:	f8d8 3000 	ldr.w	r3, [r8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d038      	beq.n	80046a2 <_malloc_r+0xf6>
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	42a2      	cmp	r2, r4
 8004634:	d12b      	bne.n	800468e <_malloc_r+0xe2>
 8004636:	2200      	movs	r2, #0
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	e00f      	b.n	800465c <_malloc_r+0xb0>
 800463c:	6822      	ldr	r2, [r4, #0]
 800463e:	1b52      	subs	r2, r2, r5
 8004640:	d41f      	bmi.n	8004682 <_malloc_r+0xd6>
 8004642:	2a0b      	cmp	r2, #11
 8004644:	d917      	bls.n	8004676 <_malloc_r+0xca>
 8004646:	1961      	adds	r1, r4, r5
 8004648:	42a3      	cmp	r3, r4
 800464a:	6025      	str	r5, [r4, #0]
 800464c:	bf18      	it	ne
 800464e:	6059      	strne	r1, [r3, #4]
 8004650:	6863      	ldr	r3, [r4, #4]
 8004652:	bf08      	it	eq
 8004654:	f8c8 1000 	streq.w	r1, [r8]
 8004658:	5162      	str	r2, [r4, r5]
 800465a:	604b      	str	r3, [r1, #4]
 800465c:	4638      	mov	r0, r7
 800465e:	f104 060b 	add.w	r6, r4, #11
 8004662:	f000 f829 	bl	80046b8 <__malloc_unlock>
 8004666:	f026 0607 	bic.w	r6, r6, #7
 800466a:	1d23      	adds	r3, r4, #4
 800466c:	1af2      	subs	r2, r6, r3
 800466e:	d0ae      	beq.n	80045ce <_malloc_r+0x22>
 8004670:	1b9b      	subs	r3, r3, r6
 8004672:	50a3      	str	r3, [r4, r2]
 8004674:	e7ab      	b.n	80045ce <_malloc_r+0x22>
 8004676:	42a3      	cmp	r3, r4
 8004678:	6862      	ldr	r2, [r4, #4]
 800467a:	d1dd      	bne.n	8004638 <_malloc_r+0x8c>
 800467c:	f8c8 2000 	str.w	r2, [r8]
 8004680:	e7ec      	b.n	800465c <_malloc_r+0xb0>
 8004682:	4623      	mov	r3, r4
 8004684:	6864      	ldr	r4, [r4, #4]
 8004686:	e7ac      	b.n	80045e2 <_malloc_r+0x36>
 8004688:	4634      	mov	r4, r6
 800468a:	6876      	ldr	r6, [r6, #4]
 800468c:	e7b4      	b.n	80045f8 <_malloc_r+0x4c>
 800468e:	4613      	mov	r3, r2
 8004690:	e7cc      	b.n	800462c <_malloc_r+0x80>
 8004692:	230c      	movs	r3, #12
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	4638      	mov	r0, r7
 8004698:	f000 f80e 	bl	80046b8 <__malloc_unlock>
 800469c:	e797      	b.n	80045ce <_malloc_r+0x22>
 800469e:	6025      	str	r5, [r4, #0]
 80046a0:	e7dc      	b.n	800465c <_malloc_r+0xb0>
 80046a2:	605b      	str	r3, [r3, #4]
 80046a4:	deff      	udf	#255	; 0xff
 80046a6:	bf00      	nop
 80046a8:	20000270 	.word	0x20000270

080046ac <__malloc_lock>:
 80046ac:	4801      	ldr	r0, [pc, #4]	; (80046b4 <__malloc_lock+0x8>)
 80046ae:	f7ff bf0f 	b.w	80044d0 <__retarget_lock_acquire_recursive>
 80046b2:	bf00      	nop
 80046b4:	2000026c 	.word	0x2000026c

080046b8 <__malloc_unlock>:
 80046b8:	4801      	ldr	r0, [pc, #4]	; (80046c0 <__malloc_unlock+0x8>)
 80046ba:	f7ff bf0a 	b.w	80044d2 <__retarget_lock_release_recursive>
 80046be:	bf00      	nop
 80046c0:	2000026c 	.word	0x2000026c

080046c4 <__ssputs_r>:
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	688e      	ldr	r6, [r1, #8]
 80046ca:	461f      	mov	r7, r3
 80046cc:	42be      	cmp	r6, r7
 80046ce:	680b      	ldr	r3, [r1, #0]
 80046d0:	4682      	mov	sl, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	4690      	mov	r8, r2
 80046d6:	d82c      	bhi.n	8004732 <__ssputs_r+0x6e>
 80046d8:	898a      	ldrh	r2, [r1, #12]
 80046da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046de:	d026      	beq.n	800472e <__ssputs_r+0x6a>
 80046e0:	6965      	ldr	r5, [r4, #20]
 80046e2:	6909      	ldr	r1, [r1, #16]
 80046e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046e8:	eba3 0901 	sub.w	r9, r3, r1
 80046ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046f0:	1c7b      	adds	r3, r7, #1
 80046f2:	444b      	add	r3, r9
 80046f4:	106d      	asrs	r5, r5, #1
 80046f6:	429d      	cmp	r5, r3
 80046f8:	bf38      	it	cc
 80046fa:	461d      	movcc	r5, r3
 80046fc:	0553      	lsls	r3, r2, #21
 80046fe:	d527      	bpl.n	8004750 <__ssputs_r+0x8c>
 8004700:	4629      	mov	r1, r5
 8004702:	f7ff ff53 	bl	80045ac <_malloc_r>
 8004706:	4606      	mov	r6, r0
 8004708:	b360      	cbz	r0, 8004764 <__ssputs_r+0xa0>
 800470a:	6921      	ldr	r1, [r4, #16]
 800470c:	464a      	mov	r2, r9
 800470e:	f000 faeb 	bl	8004ce8 <memcpy>
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471c:	81a3      	strh	r3, [r4, #12]
 800471e:	6126      	str	r6, [r4, #16]
 8004720:	6165      	str	r5, [r4, #20]
 8004722:	444e      	add	r6, r9
 8004724:	eba5 0509 	sub.w	r5, r5, r9
 8004728:	6026      	str	r6, [r4, #0]
 800472a:	60a5      	str	r5, [r4, #8]
 800472c:	463e      	mov	r6, r7
 800472e:	42be      	cmp	r6, r7
 8004730:	d900      	bls.n	8004734 <__ssputs_r+0x70>
 8004732:	463e      	mov	r6, r7
 8004734:	6820      	ldr	r0, [r4, #0]
 8004736:	4632      	mov	r2, r6
 8004738:	4641      	mov	r1, r8
 800473a:	f000 faab 	bl	8004c94 <memmove>
 800473e:	68a3      	ldr	r3, [r4, #8]
 8004740:	1b9b      	subs	r3, r3, r6
 8004742:	60a3      	str	r3, [r4, #8]
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	4433      	add	r3, r6
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	2000      	movs	r0, #0
 800474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004750:	462a      	mov	r2, r5
 8004752:	f000 fad7 	bl	8004d04 <_realloc_r>
 8004756:	4606      	mov	r6, r0
 8004758:	2800      	cmp	r0, #0
 800475a:	d1e0      	bne.n	800471e <__ssputs_r+0x5a>
 800475c:	6921      	ldr	r1, [r4, #16]
 800475e:	4650      	mov	r0, sl
 8004760:	f7ff feb8 	bl	80044d4 <_free_r>
 8004764:	230c      	movs	r3, #12
 8004766:	f8ca 3000 	str.w	r3, [sl]
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004770:	81a3      	strh	r3, [r4, #12]
 8004772:	f04f 30ff 	mov.w	r0, #4294967295
 8004776:	e7e9      	b.n	800474c <__ssputs_r+0x88>

08004778 <_svfiprintf_r>:
 8004778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477c:	4698      	mov	r8, r3
 800477e:	898b      	ldrh	r3, [r1, #12]
 8004780:	061b      	lsls	r3, r3, #24
 8004782:	b09d      	sub	sp, #116	; 0x74
 8004784:	4607      	mov	r7, r0
 8004786:	460d      	mov	r5, r1
 8004788:	4614      	mov	r4, r2
 800478a:	d50e      	bpl.n	80047aa <_svfiprintf_r+0x32>
 800478c:	690b      	ldr	r3, [r1, #16]
 800478e:	b963      	cbnz	r3, 80047aa <_svfiprintf_r+0x32>
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	f7ff ff0b 	bl	80045ac <_malloc_r>
 8004796:	6028      	str	r0, [r5, #0]
 8004798:	6128      	str	r0, [r5, #16]
 800479a:	b920      	cbnz	r0, 80047a6 <_svfiprintf_r+0x2e>
 800479c:	230c      	movs	r3, #12
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	e0d0      	b.n	8004948 <_svfiprintf_r+0x1d0>
 80047a6:	2340      	movs	r3, #64	; 0x40
 80047a8:	616b      	str	r3, [r5, #20]
 80047aa:	2300      	movs	r3, #0
 80047ac:	9309      	str	r3, [sp, #36]	; 0x24
 80047ae:	2320      	movs	r3, #32
 80047b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047b8:	2330      	movs	r3, #48	; 0x30
 80047ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004960 <_svfiprintf_r+0x1e8>
 80047be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047c2:	f04f 0901 	mov.w	r9, #1
 80047c6:	4623      	mov	r3, r4
 80047c8:	469a      	mov	sl, r3
 80047ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ce:	b10a      	cbz	r2, 80047d4 <_svfiprintf_r+0x5c>
 80047d0:	2a25      	cmp	r2, #37	; 0x25
 80047d2:	d1f9      	bne.n	80047c8 <_svfiprintf_r+0x50>
 80047d4:	ebba 0b04 	subs.w	fp, sl, r4
 80047d8:	d00b      	beq.n	80047f2 <_svfiprintf_r+0x7a>
 80047da:	465b      	mov	r3, fp
 80047dc:	4622      	mov	r2, r4
 80047de:	4629      	mov	r1, r5
 80047e0:	4638      	mov	r0, r7
 80047e2:	f7ff ff6f 	bl	80046c4 <__ssputs_r>
 80047e6:	3001      	adds	r0, #1
 80047e8:	f000 80a9 	beq.w	800493e <_svfiprintf_r+0x1c6>
 80047ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ee:	445a      	add	r2, fp
 80047f0:	9209      	str	r2, [sp, #36]	; 0x24
 80047f2:	f89a 3000 	ldrb.w	r3, [sl]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 80a1 	beq.w	800493e <_svfiprintf_r+0x1c6>
 80047fc:	2300      	movs	r3, #0
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004806:	f10a 0a01 	add.w	sl, sl, #1
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	9307      	str	r3, [sp, #28]
 800480e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004812:	931a      	str	r3, [sp, #104]	; 0x68
 8004814:	4654      	mov	r4, sl
 8004816:	2205      	movs	r2, #5
 8004818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800481c:	4850      	ldr	r0, [pc, #320]	; (8004960 <_svfiprintf_r+0x1e8>)
 800481e:	f7fb fcf7 	bl	8000210 <memchr>
 8004822:	9a04      	ldr	r2, [sp, #16]
 8004824:	b9d8      	cbnz	r0, 800485e <_svfiprintf_r+0xe6>
 8004826:	06d0      	lsls	r0, r2, #27
 8004828:	bf44      	itt	mi
 800482a:	2320      	movmi	r3, #32
 800482c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004830:	0711      	lsls	r1, r2, #28
 8004832:	bf44      	itt	mi
 8004834:	232b      	movmi	r3, #43	; 0x2b
 8004836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800483a:	f89a 3000 	ldrb.w	r3, [sl]
 800483e:	2b2a      	cmp	r3, #42	; 0x2a
 8004840:	d015      	beq.n	800486e <_svfiprintf_r+0xf6>
 8004842:	9a07      	ldr	r2, [sp, #28]
 8004844:	4654      	mov	r4, sl
 8004846:	2000      	movs	r0, #0
 8004848:	f04f 0c0a 	mov.w	ip, #10
 800484c:	4621      	mov	r1, r4
 800484e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004852:	3b30      	subs	r3, #48	; 0x30
 8004854:	2b09      	cmp	r3, #9
 8004856:	d94d      	bls.n	80048f4 <_svfiprintf_r+0x17c>
 8004858:	b1b0      	cbz	r0, 8004888 <_svfiprintf_r+0x110>
 800485a:	9207      	str	r2, [sp, #28]
 800485c:	e014      	b.n	8004888 <_svfiprintf_r+0x110>
 800485e:	eba0 0308 	sub.w	r3, r0, r8
 8004862:	fa09 f303 	lsl.w	r3, r9, r3
 8004866:	4313      	orrs	r3, r2
 8004868:	9304      	str	r3, [sp, #16]
 800486a:	46a2      	mov	sl, r4
 800486c:	e7d2      	b.n	8004814 <_svfiprintf_r+0x9c>
 800486e:	9b03      	ldr	r3, [sp, #12]
 8004870:	1d19      	adds	r1, r3, #4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	9103      	str	r1, [sp, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	bfbb      	ittet	lt
 800487a:	425b      	neglt	r3, r3
 800487c:	f042 0202 	orrlt.w	r2, r2, #2
 8004880:	9307      	strge	r3, [sp, #28]
 8004882:	9307      	strlt	r3, [sp, #28]
 8004884:	bfb8      	it	lt
 8004886:	9204      	strlt	r2, [sp, #16]
 8004888:	7823      	ldrb	r3, [r4, #0]
 800488a:	2b2e      	cmp	r3, #46	; 0x2e
 800488c:	d10c      	bne.n	80048a8 <_svfiprintf_r+0x130>
 800488e:	7863      	ldrb	r3, [r4, #1]
 8004890:	2b2a      	cmp	r3, #42	; 0x2a
 8004892:	d134      	bne.n	80048fe <_svfiprintf_r+0x186>
 8004894:	9b03      	ldr	r3, [sp, #12]
 8004896:	1d1a      	adds	r2, r3, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	9203      	str	r2, [sp, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	bfb8      	it	lt
 80048a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80048a4:	3402      	adds	r4, #2
 80048a6:	9305      	str	r3, [sp, #20]
 80048a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004970 <_svfiprintf_r+0x1f8>
 80048ac:	7821      	ldrb	r1, [r4, #0]
 80048ae:	2203      	movs	r2, #3
 80048b0:	4650      	mov	r0, sl
 80048b2:	f7fb fcad 	bl	8000210 <memchr>
 80048b6:	b138      	cbz	r0, 80048c8 <_svfiprintf_r+0x150>
 80048b8:	9b04      	ldr	r3, [sp, #16]
 80048ba:	eba0 000a 	sub.w	r0, r0, sl
 80048be:	2240      	movs	r2, #64	; 0x40
 80048c0:	4082      	lsls	r2, r0
 80048c2:	4313      	orrs	r3, r2
 80048c4:	3401      	adds	r4, #1
 80048c6:	9304      	str	r3, [sp, #16]
 80048c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048cc:	4825      	ldr	r0, [pc, #148]	; (8004964 <_svfiprintf_r+0x1ec>)
 80048ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048d2:	2206      	movs	r2, #6
 80048d4:	f7fb fc9c 	bl	8000210 <memchr>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d038      	beq.n	800494e <_svfiprintf_r+0x1d6>
 80048dc:	4b22      	ldr	r3, [pc, #136]	; (8004968 <_svfiprintf_r+0x1f0>)
 80048de:	bb1b      	cbnz	r3, 8004928 <_svfiprintf_r+0x1b0>
 80048e0:	9b03      	ldr	r3, [sp, #12]
 80048e2:	3307      	adds	r3, #7
 80048e4:	f023 0307 	bic.w	r3, r3, #7
 80048e8:	3308      	adds	r3, #8
 80048ea:	9303      	str	r3, [sp, #12]
 80048ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ee:	4433      	add	r3, r6
 80048f0:	9309      	str	r3, [sp, #36]	; 0x24
 80048f2:	e768      	b.n	80047c6 <_svfiprintf_r+0x4e>
 80048f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048f8:	460c      	mov	r4, r1
 80048fa:	2001      	movs	r0, #1
 80048fc:	e7a6      	b.n	800484c <_svfiprintf_r+0xd4>
 80048fe:	2300      	movs	r3, #0
 8004900:	3401      	adds	r4, #1
 8004902:	9305      	str	r3, [sp, #20]
 8004904:	4619      	mov	r1, r3
 8004906:	f04f 0c0a 	mov.w	ip, #10
 800490a:	4620      	mov	r0, r4
 800490c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004910:	3a30      	subs	r2, #48	; 0x30
 8004912:	2a09      	cmp	r2, #9
 8004914:	d903      	bls.n	800491e <_svfiprintf_r+0x1a6>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0c6      	beq.n	80048a8 <_svfiprintf_r+0x130>
 800491a:	9105      	str	r1, [sp, #20]
 800491c:	e7c4      	b.n	80048a8 <_svfiprintf_r+0x130>
 800491e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004922:	4604      	mov	r4, r0
 8004924:	2301      	movs	r3, #1
 8004926:	e7f0      	b.n	800490a <_svfiprintf_r+0x192>
 8004928:	ab03      	add	r3, sp, #12
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	462a      	mov	r2, r5
 800492e:	4b0f      	ldr	r3, [pc, #60]	; (800496c <_svfiprintf_r+0x1f4>)
 8004930:	a904      	add	r1, sp, #16
 8004932:	4638      	mov	r0, r7
 8004934:	f3af 8000 	nop.w
 8004938:	1c42      	adds	r2, r0, #1
 800493a:	4606      	mov	r6, r0
 800493c:	d1d6      	bne.n	80048ec <_svfiprintf_r+0x174>
 800493e:	89ab      	ldrh	r3, [r5, #12]
 8004940:	065b      	lsls	r3, r3, #25
 8004942:	f53f af2d 	bmi.w	80047a0 <_svfiprintf_r+0x28>
 8004946:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004948:	b01d      	add	sp, #116	; 0x74
 800494a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494e:	ab03      	add	r3, sp, #12
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	462a      	mov	r2, r5
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <_svfiprintf_r+0x1f4>)
 8004956:	a904      	add	r1, sp, #16
 8004958:	4638      	mov	r0, r7
 800495a:	f000 f879 	bl	8004a50 <_printf_i>
 800495e:	e7eb      	b.n	8004938 <_svfiprintf_r+0x1c0>
 8004960:	08005d04 	.word	0x08005d04
 8004964:	08005d0e 	.word	0x08005d0e
 8004968:	00000000 	.word	0x00000000
 800496c:	080046c5 	.word	0x080046c5
 8004970:	08005d0a 	.word	0x08005d0a

08004974 <_printf_common>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	4616      	mov	r6, r2
 800497a:	4699      	mov	r9, r3
 800497c:	688a      	ldr	r2, [r1, #8]
 800497e:	690b      	ldr	r3, [r1, #16]
 8004980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004984:	4293      	cmp	r3, r2
 8004986:	bfb8      	it	lt
 8004988:	4613      	movlt	r3, r2
 800498a:	6033      	str	r3, [r6, #0]
 800498c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004990:	4607      	mov	r7, r0
 8004992:	460c      	mov	r4, r1
 8004994:	b10a      	cbz	r2, 800499a <_printf_common+0x26>
 8004996:	3301      	adds	r3, #1
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0699      	lsls	r1, r3, #26
 800499e:	bf42      	ittt	mi
 80049a0:	6833      	ldrmi	r3, [r6, #0]
 80049a2:	3302      	addmi	r3, #2
 80049a4:	6033      	strmi	r3, [r6, #0]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	f015 0506 	ands.w	r5, r5, #6
 80049ac:	d106      	bne.n	80049bc <_printf_common+0x48>
 80049ae:	f104 0a19 	add.w	sl, r4, #25
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	6832      	ldr	r2, [r6, #0]
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	42ab      	cmp	r3, r5
 80049ba:	dc26      	bgt.n	8004a0a <_printf_common+0x96>
 80049bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049c0:	1e13      	subs	r3, r2, #0
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	bf18      	it	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	0692      	lsls	r2, r2, #26
 80049ca:	d42b      	bmi.n	8004a24 <_printf_common+0xb0>
 80049cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d0:	4649      	mov	r1, r9
 80049d2:	4638      	mov	r0, r7
 80049d4:	47c0      	blx	r8
 80049d6:	3001      	adds	r0, #1
 80049d8:	d01e      	beq.n	8004a18 <_printf_common+0xa4>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	6922      	ldr	r2, [r4, #16]
 80049de:	f003 0306 	and.w	r3, r3, #6
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	bf02      	ittt	eq
 80049e6:	68e5      	ldreq	r5, [r4, #12]
 80049e8:	6833      	ldreq	r3, [r6, #0]
 80049ea:	1aed      	subeq	r5, r5, r3
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	bf0c      	ite	eq
 80049f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f4:	2500      	movne	r5, #0
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bfc4      	itt	gt
 80049fa:	1a9b      	subgt	r3, r3, r2
 80049fc:	18ed      	addgt	r5, r5, r3
 80049fe:	2600      	movs	r6, #0
 8004a00:	341a      	adds	r4, #26
 8004a02:	42b5      	cmp	r5, r6
 8004a04:	d11a      	bne.n	8004a3c <_printf_common+0xc8>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e008      	b.n	8004a1c <_printf_common+0xa8>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4652      	mov	r2, sl
 8004a0e:	4649      	mov	r1, r9
 8004a10:	4638      	mov	r0, r7
 8004a12:	47c0      	blx	r8
 8004a14:	3001      	adds	r0, #1
 8004a16:	d103      	bne.n	8004a20 <_printf_common+0xac>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7c6      	b.n	80049b2 <_printf_common+0x3e>
 8004a24:	18e1      	adds	r1, r4, r3
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	2030      	movs	r0, #48	; 0x30
 8004a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a2e:	4422      	add	r2, r4
 8004a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a38:	3302      	adds	r3, #2
 8004a3a:	e7c7      	b.n	80049cc <_printf_common+0x58>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4622      	mov	r2, r4
 8004a40:	4649      	mov	r1, r9
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c0      	blx	r8
 8004a46:	3001      	adds	r0, #1
 8004a48:	d0e6      	beq.n	8004a18 <_printf_common+0xa4>
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7d9      	b.n	8004a02 <_printf_common+0x8e>
	...

08004a50 <_printf_i>:
 8004a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	7e0f      	ldrb	r7, [r1, #24]
 8004a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a58:	2f78      	cmp	r7, #120	; 0x78
 8004a5a:	4691      	mov	r9, r2
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	469a      	mov	sl, r3
 8004a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a66:	d807      	bhi.n	8004a78 <_printf_i+0x28>
 8004a68:	2f62      	cmp	r7, #98	; 0x62
 8004a6a:	d80a      	bhi.n	8004a82 <_printf_i+0x32>
 8004a6c:	2f00      	cmp	r7, #0
 8004a6e:	f000 80d4 	beq.w	8004c1a <_printf_i+0x1ca>
 8004a72:	2f58      	cmp	r7, #88	; 0x58
 8004a74:	f000 80c0 	beq.w	8004bf8 <_printf_i+0x1a8>
 8004a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a80:	e03a      	b.n	8004af8 <_printf_i+0xa8>
 8004a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a86:	2b15      	cmp	r3, #21
 8004a88:	d8f6      	bhi.n	8004a78 <_printf_i+0x28>
 8004a8a:	a101      	add	r1, pc, #4	; (adr r1, 8004a90 <_printf_i+0x40>)
 8004a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a90:	08004ae9 	.word	0x08004ae9
 8004a94:	08004afd 	.word	0x08004afd
 8004a98:	08004a79 	.word	0x08004a79
 8004a9c:	08004a79 	.word	0x08004a79
 8004aa0:	08004a79 	.word	0x08004a79
 8004aa4:	08004a79 	.word	0x08004a79
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004a79 	.word	0x08004a79
 8004ab0:	08004a79 	.word	0x08004a79
 8004ab4:	08004a79 	.word	0x08004a79
 8004ab8:	08004a79 	.word	0x08004a79
 8004abc:	08004c01 	.word	0x08004c01
 8004ac0:	08004b29 	.word	0x08004b29
 8004ac4:	08004bbb 	.word	0x08004bbb
 8004ac8:	08004a79 	.word	0x08004a79
 8004acc:	08004a79 	.word	0x08004a79
 8004ad0:	08004c23 	.word	0x08004c23
 8004ad4:	08004a79 	.word	0x08004a79
 8004ad8:	08004b29 	.word	0x08004b29
 8004adc:	08004a79 	.word	0x08004a79
 8004ae0:	08004a79 	.word	0x08004a79
 8004ae4:	08004bc3 	.word	0x08004bc3
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	602a      	str	r2, [r5, #0]
 8004af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af8:	2301      	movs	r3, #1
 8004afa:	e09f      	b.n	8004c3c <_printf_i+0x1ec>
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	0607      	lsls	r7, r0, #24
 8004b02:	f103 0104 	add.w	r1, r3, #4
 8004b06:	6029      	str	r1, [r5, #0]
 8004b08:	d501      	bpl.n	8004b0e <_printf_i+0xbe>
 8004b0a:	681e      	ldr	r6, [r3, #0]
 8004b0c:	e003      	b.n	8004b16 <_printf_i+0xc6>
 8004b0e:	0646      	lsls	r6, r0, #25
 8004b10:	d5fb      	bpl.n	8004b0a <_printf_i+0xba>
 8004b12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	da03      	bge.n	8004b22 <_printf_i+0xd2>
 8004b1a:	232d      	movs	r3, #45	; 0x2d
 8004b1c:	4276      	negs	r6, r6
 8004b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b22:	485a      	ldr	r0, [pc, #360]	; (8004c8c <_printf_i+0x23c>)
 8004b24:	230a      	movs	r3, #10
 8004b26:	e012      	b.n	8004b4e <_printf_i+0xfe>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	6820      	ldr	r0, [r4, #0]
 8004b2c:	1d19      	adds	r1, r3, #4
 8004b2e:	6029      	str	r1, [r5, #0]
 8004b30:	0605      	lsls	r5, r0, #24
 8004b32:	d501      	bpl.n	8004b38 <_printf_i+0xe8>
 8004b34:	681e      	ldr	r6, [r3, #0]
 8004b36:	e002      	b.n	8004b3e <_printf_i+0xee>
 8004b38:	0641      	lsls	r1, r0, #25
 8004b3a:	d5fb      	bpl.n	8004b34 <_printf_i+0xe4>
 8004b3c:	881e      	ldrh	r6, [r3, #0]
 8004b3e:	4853      	ldr	r0, [pc, #332]	; (8004c8c <_printf_i+0x23c>)
 8004b40:	2f6f      	cmp	r7, #111	; 0x6f
 8004b42:	bf0c      	ite	eq
 8004b44:	2308      	moveq	r3, #8
 8004b46:	230a      	movne	r3, #10
 8004b48:	2100      	movs	r1, #0
 8004b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b4e:	6865      	ldr	r5, [r4, #4]
 8004b50:	60a5      	str	r5, [r4, #8]
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	bfa2      	ittt	ge
 8004b56:	6821      	ldrge	r1, [r4, #0]
 8004b58:	f021 0104 	bicge.w	r1, r1, #4
 8004b5c:	6021      	strge	r1, [r4, #0]
 8004b5e:	b90e      	cbnz	r6, 8004b64 <_printf_i+0x114>
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	d04b      	beq.n	8004bfc <_printf_i+0x1ac>
 8004b64:	4615      	mov	r5, r2
 8004b66:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b6a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b6e:	5dc7      	ldrb	r7, [r0, r7]
 8004b70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b74:	4637      	mov	r7, r6
 8004b76:	42bb      	cmp	r3, r7
 8004b78:	460e      	mov	r6, r1
 8004b7a:	d9f4      	bls.n	8004b66 <_printf_i+0x116>
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d10b      	bne.n	8004b98 <_printf_i+0x148>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	07de      	lsls	r6, r3, #31
 8004b84:	d508      	bpl.n	8004b98 <_printf_i+0x148>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	6861      	ldr	r1, [r4, #4]
 8004b8a:	4299      	cmp	r1, r3
 8004b8c:	bfde      	ittt	le
 8004b8e:	2330      	movle	r3, #48	; 0x30
 8004b90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b98:	1b52      	subs	r2, r2, r5
 8004b9a:	6122      	str	r2, [r4, #16]
 8004b9c:	f8cd a000 	str.w	sl, [sp]
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	aa03      	add	r2, sp, #12
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	f7ff fee4 	bl	8004974 <_printf_common>
 8004bac:	3001      	adds	r0, #1
 8004bae:	d14a      	bne.n	8004c46 <_printf_i+0x1f6>
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	b004      	add	sp, #16
 8004bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	f043 0320 	orr.w	r3, r3, #32
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	4833      	ldr	r0, [pc, #204]	; (8004c90 <_printf_i+0x240>)
 8004bc4:	2778      	movs	r7, #120	; 0x78
 8004bc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	6829      	ldr	r1, [r5, #0]
 8004bce:	061f      	lsls	r7, r3, #24
 8004bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bd4:	d402      	bmi.n	8004bdc <_printf_i+0x18c>
 8004bd6:	065f      	lsls	r7, r3, #25
 8004bd8:	bf48      	it	mi
 8004bda:	b2b6      	uxthmi	r6, r6
 8004bdc:	07df      	lsls	r7, r3, #31
 8004bde:	bf48      	it	mi
 8004be0:	f043 0320 	orrmi.w	r3, r3, #32
 8004be4:	6029      	str	r1, [r5, #0]
 8004be6:	bf48      	it	mi
 8004be8:	6023      	strmi	r3, [r4, #0]
 8004bea:	b91e      	cbnz	r6, 8004bf4 <_printf_i+0x1a4>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f023 0320 	bic.w	r3, r3, #32
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	e7a7      	b.n	8004b48 <_printf_i+0xf8>
 8004bf8:	4824      	ldr	r0, [pc, #144]	; (8004c8c <_printf_i+0x23c>)
 8004bfa:	e7e4      	b.n	8004bc6 <_printf_i+0x176>
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	e7bd      	b.n	8004b7c <_printf_i+0x12c>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	6826      	ldr	r6, [r4, #0]
 8004c04:	6961      	ldr	r1, [r4, #20]
 8004c06:	1d18      	adds	r0, r3, #4
 8004c08:	6028      	str	r0, [r5, #0]
 8004c0a:	0635      	lsls	r5, r6, #24
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	d501      	bpl.n	8004c14 <_printf_i+0x1c4>
 8004c10:	6019      	str	r1, [r3, #0]
 8004c12:	e002      	b.n	8004c1a <_printf_i+0x1ca>
 8004c14:	0670      	lsls	r0, r6, #25
 8004c16:	d5fb      	bpl.n	8004c10 <_printf_i+0x1c0>
 8004c18:	8019      	strh	r1, [r3, #0]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	4615      	mov	r5, r2
 8004c20:	e7bc      	b.n	8004b9c <_printf_i+0x14c>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	602a      	str	r2, [r5, #0]
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	6862      	ldr	r2, [r4, #4]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7fb faee 	bl	8000210 <memchr>
 8004c34:	b108      	cbz	r0, 8004c3a <_printf_i+0x1ea>
 8004c36:	1b40      	subs	r0, r0, r5
 8004c38:	6060      	str	r0, [r4, #4]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c44:	e7aa      	b.n	8004b9c <_printf_i+0x14c>
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	47d0      	blx	sl
 8004c50:	3001      	adds	r0, #1
 8004c52:	d0ad      	beq.n	8004bb0 <_printf_i+0x160>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	079b      	lsls	r3, r3, #30
 8004c58:	d413      	bmi.n	8004c82 <_printf_i+0x232>
 8004c5a:	68e0      	ldr	r0, [r4, #12]
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	4298      	cmp	r0, r3
 8004c60:	bfb8      	it	lt
 8004c62:	4618      	movlt	r0, r3
 8004c64:	e7a6      	b.n	8004bb4 <_printf_i+0x164>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	47d0      	blx	sl
 8004c70:	3001      	adds	r0, #1
 8004c72:	d09d      	beq.n	8004bb0 <_printf_i+0x160>
 8004c74:	3501      	adds	r5, #1
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	9903      	ldr	r1, [sp, #12]
 8004c7a:	1a5b      	subs	r3, r3, r1
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dcf2      	bgt.n	8004c66 <_printf_i+0x216>
 8004c80:	e7eb      	b.n	8004c5a <_printf_i+0x20a>
 8004c82:	2500      	movs	r5, #0
 8004c84:	f104 0619 	add.w	r6, r4, #25
 8004c88:	e7f5      	b.n	8004c76 <_printf_i+0x226>
 8004c8a:	bf00      	nop
 8004c8c:	08005d15 	.word	0x08005d15
 8004c90:	08005d26 	.word	0x08005d26

08004c94 <memmove>:
 8004c94:	4288      	cmp	r0, r1
 8004c96:	b510      	push	{r4, lr}
 8004c98:	eb01 0402 	add.w	r4, r1, r2
 8004c9c:	d902      	bls.n	8004ca4 <memmove+0x10>
 8004c9e:	4284      	cmp	r4, r0
 8004ca0:	4623      	mov	r3, r4
 8004ca2:	d807      	bhi.n	8004cb4 <memmove+0x20>
 8004ca4:	1e43      	subs	r3, r0, #1
 8004ca6:	42a1      	cmp	r1, r4
 8004ca8:	d008      	beq.n	8004cbc <memmove+0x28>
 8004caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cb2:	e7f8      	b.n	8004ca6 <memmove+0x12>
 8004cb4:	4402      	add	r2, r0
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	428a      	cmp	r2, r1
 8004cba:	d100      	bne.n	8004cbe <memmove+0x2a>
 8004cbc:	bd10      	pop	{r4, pc}
 8004cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cc6:	e7f7      	b.n	8004cb8 <memmove+0x24>

08004cc8 <_sbrk_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d06      	ldr	r5, [pc, #24]	; (8004ce4 <_sbrk_r+0x1c>)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f7fc fd84 	bl	80017e0 <_sbrk>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_sbrk_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_sbrk_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000268 	.word	0x20000268

08004ce8 <memcpy>:
 8004ce8:	440a      	add	r2, r1
 8004cea:	4291      	cmp	r1, r2
 8004cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cf0:	d100      	bne.n	8004cf4 <memcpy+0xc>
 8004cf2:	4770      	bx	lr
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cfe:	4291      	cmp	r1, r2
 8004d00:	d1f9      	bne.n	8004cf6 <memcpy+0xe>
 8004d02:	bd10      	pop	{r4, pc}

08004d04 <_realloc_r>:
 8004d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d08:	4680      	mov	r8, r0
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	460e      	mov	r6, r1
 8004d0e:	b921      	cbnz	r1, 8004d1a <_realloc_r+0x16>
 8004d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d14:	4611      	mov	r1, r2
 8004d16:	f7ff bc49 	b.w	80045ac <_malloc_r>
 8004d1a:	b92a      	cbnz	r2, 8004d28 <_realloc_r+0x24>
 8004d1c:	f7ff fbda 	bl	80044d4 <_free_r>
 8004d20:	4625      	mov	r5, r4
 8004d22:	4628      	mov	r0, r5
 8004d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d28:	f000 f81b 	bl	8004d62 <_malloc_usable_size_r>
 8004d2c:	4284      	cmp	r4, r0
 8004d2e:	4607      	mov	r7, r0
 8004d30:	d802      	bhi.n	8004d38 <_realloc_r+0x34>
 8004d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d36:	d812      	bhi.n	8004d5e <_realloc_r+0x5a>
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7ff fc36 	bl	80045ac <_malloc_r>
 8004d40:	4605      	mov	r5, r0
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d0ed      	beq.n	8004d22 <_realloc_r+0x1e>
 8004d46:	42bc      	cmp	r4, r7
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	bf28      	it	cs
 8004d4e:	463a      	movcs	r2, r7
 8004d50:	f7ff ffca 	bl	8004ce8 <memcpy>
 8004d54:	4631      	mov	r1, r6
 8004d56:	4640      	mov	r0, r8
 8004d58:	f7ff fbbc 	bl	80044d4 <_free_r>
 8004d5c:	e7e1      	b.n	8004d22 <_realloc_r+0x1e>
 8004d5e:	4635      	mov	r5, r6
 8004d60:	e7df      	b.n	8004d22 <_realloc_r+0x1e>

08004d62 <_malloc_usable_size_r>:
 8004d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d66:	1f18      	subs	r0, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bfbc      	itt	lt
 8004d6c:	580b      	ldrlt	r3, [r1, r0]
 8004d6e:	18c0      	addlt	r0, r0, r3
 8004d70:	4770      	bx	lr
	...

08004d74 <pow>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	ed2d 8b02 	vpush	{d8}
 8004d7a:	eeb0 8a40 	vmov.f32	s16, s0
 8004d7e:	eef0 8a60 	vmov.f32	s17, s1
 8004d82:	ec55 4b11 	vmov	r4, r5, d1
 8004d86:	f000 f893 	bl	8004eb0 <__ieee754_pow>
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	4620      	mov	r0, r4
 8004d90:	4629      	mov	r1, r5
 8004d92:	ec57 6b10 	vmov	r6, r7, d0
 8004d96:	f7fb fee1 	bl	8000b5c <__aeabi_dcmpun>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d13b      	bne.n	8004e16 <pow+0xa2>
 8004d9e:	ec51 0b18 	vmov	r0, r1, d8
 8004da2:	2200      	movs	r2, #0
 8004da4:	2300      	movs	r3, #0
 8004da6:	f7fb fea7 	bl	8000af8 <__aeabi_dcmpeq>
 8004daa:	b1b8      	cbz	r0, 8004ddc <pow+0x68>
 8004dac:	2200      	movs	r2, #0
 8004dae:	2300      	movs	r3, #0
 8004db0:	4620      	mov	r0, r4
 8004db2:	4629      	mov	r1, r5
 8004db4:	f7fb fea0 	bl	8000af8 <__aeabi_dcmpeq>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d146      	bne.n	8004e4a <pow+0xd6>
 8004dbc:	ec45 4b10 	vmov	d0, r4, r5
 8004dc0:	f000 f866 	bl	8004e90 <finite>
 8004dc4:	b338      	cbz	r0, 8004e16 <pow+0xa2>
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4620      	mov	r0, r4
 8004dcc:	4629      	mov	r1, r5
 8004dce:	f7fb fe9d 	bl	8000b0c <__aeabi_dcmplt>
 8004dd2:	b300      	cbz	r0, 8004e16 <pow+0xa2>
 8004dd4:	f7ff fb52 	bl	800447c <__errno>
 8004dd8:	2322      	movs	r3, #34	; 0x22
 8004dda:	e01b      	b.n	8004e14 <pow+0xa0>
 8004ddc:	ec47 6b10 	vmov	d0, r6, r7
 8004de0:	f000 f856 	bl	8004e90 <finite>
 8004de4:	b9e0      	cbnz	r0, 8004e20 <pow+0xac>
 8004de6:	eeb0 0a48 	vmov.f32	s0, s16
 8004dea:	eef0 0a68 	vmov.f32	s1, s17
 8004dee:	f000 f84f 	bl	8004e90 <finite>
 8004df2:	b1a8      	cbz	r0, 8004e20 <pow+0xac>
 8004df4:	ec45 4b10 	vmov	d0, r4, r5
 8004df8:	f000 f84a 	bl	8004e90 <finite>
 8004dfc:	b180      	cbz	r0, 8004e20 <pow+0xac>
 8004dfe:	4632      	mov	r2, r6
 8004e00:	463b      	mov	r3, r7
 8004e02:	4630      	mov	r0, r6
 8004e04:	4639      	mov	r1, r7
 8004e06:	f7fb fea9 	bl	8000b5c <__aeabi_dcmpun>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d0e2      	beq.n	8004dd4 <pow+0x60>
 8004e0e:	f7ff fb35 	bl	800447c <__errno>
 8004e12:	2321      	movs	r3, #33	; 0x21
 8004e14:	6003      	str	r3, [r0, #0]
 8004e16:	ecbd 8b02 	vpop	{d8}
 8004e1a:	ec47 6b10 	vmov	d0, r6, r7
 8004e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e20:	2200      	movs	r2, #0
 8004e22:	2300      	movs	r3, #0
 8004e24:	4630      	mov	r0, r6
 8004e26:	4639      	mov	r1, r7
 8004e28:	f7fb fe66 	bl	8000af8 <__aeabi_dcmpeq>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d0f2      	beq.n	8004e16 <pow+0xa2>
 8004e30:	eeb0 0a48 	vmov.f32	s0, s16
 8004e34:	eef0 0a68 	vmov.f32	s1, s17
 8004e38:	f000 f82a 	bl	8004e90 <finite>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d0ea      	beq.n	8004e16 <pow+0xa2>
 8004e40:	ec45 4b10 	vmov	d0, r4, r5
 8004e44:	f000 f824 	bl	8004e90 <finite>
 8004e48:	e7c3      	b.n	8004dd2 <pow+0x5e>
 8004e4a:	4f01      	ldr	r7, [pc, #4]	; (8004e50 <pow+0xdc>)
 8004e4c:	2600      	movs	r6, #0
 8004e4e:	e7e2      	b.n	8004e16 <pow+0xa2>
 8004e50:	3ff00000 	.word	0x3ff00000

08004e54 <sqrtf>:
 8004e54:	b508      	push	{r3, lr}
 8004e56:	ed2d 8b02 	vpush	{d8}
 8004e5a:	eeb0 8a40 	vmov.f32	s16, s0
 8004e5e:	f000 f822 	bl	8004ea6 <__ieee754_sqrtf>
 8004e62:	eeb4 8a48 	vcmp.f32	s16, s16
 8004e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6a:	d60c      	bvs.n	8004e86 <sqrtf+0x32>
 8004e6c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004e8c <sqrtf+0x38>
 8004e70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e78:	d505      	bpl.n	8004e86 <sqrtf+0x32>
 8004e7a:	f7ff faff 	bl	800447c <__errno>
 8004e7e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004e82:	2321      	movs	r3, #33	; 0x21
 8004e84:	6003      	str	r3, [r0, #0]
 8004e86:	ecbd 8b02 	vpop	{d8}
 8004e8a:	bd08      	pop	{r3, pc}
 8004e8c:	00000000 	.word	0x00000000

08004e90 <finite>:
 8004e90:	b082      	sub	sp, #8
 8004e92:	ed8d 0b00 	vstr	d0, [sp]
 8004e96:	9801      	ldr	r0, [sp, #4]
 8004e98:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004e9c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004ea0:	0fc0      	lsrs	r0, r0, #31
 8004ea2:	b002      	add	sp, #8
 8004ea4:	4770      	bx	lr

08004ea6 <__ieee754_sqrtf>:
 8004ea6:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004eaa:	4770      	bx	lr
 8004eac:	0000      	movs	r0, r0
	...

08004eb0 <__ieee754_pow>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	ed2d 8b06 	vpush	{d8-d10}
 8004eb8:	b089      	sub	sp, #36	; 0x24
 8004eba:	ed8d 1b00 	vstr	d1, [sp]
 8004ebe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004ec2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004ec6:	ea58 0102 	orrs.w	r1, r8, r2
 8004eca:	ec57 6b10 	vmov	r6, r7, d0
 8004ece:	d115      	bne.n	8004efc <__ieee754_pow+0x4c>
 8004ed0:	19b3      	adds	r3, r6, r6
 8004ed2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004ed6:	4152      	adcs	r2, r2
 8004ed8:	4299      	cmp	r1, r3
 8004eda:	4b89      	ldr	r3, [pc, #548]	; (8005100 <__ieee754_pow+0x250>)
 8004edc:	4193      	sbcs	r3, r2
 8004ede:	f080 84d1 	bcs.w	8005884 <__ieee754_pow+0x9d4>
 8004ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	4639      	mov	r1, r7
 8004eea:	f7fb f9e7 	bl	80002bc <__adddf3>
 8004eee:	ec41 0b10 	vmov	d0, r0, r1
 8004ef2:	b009      	add	sp, #36	; 0x24
 8004ef4:	ecbd 8b06 	vpop	{d8-d10}
 8004ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efc:	4b81      	ldr	r3, [pc, #516]	; (8005104 <__ieee754_pow+0x254>)
 8004efe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004f02:	429c      	cmp	r4, r3
 8004f04:	ee10 aa10 	vmov	sl, s0
 8004f08:	463d      	mov	r5, r7
 8004f0a:	dc06      	bgt.n	8004f1a <__ieee754_pow+0x6a>
 8004f0c:	d101      	bne.n	8004f12 <__ieee754_pow+0x62>
 8004f0e:	2e00      	cmp	r6, #0
 8004f10:	d1e7      	bne.n	8004ee2 <__ieee754_pow+0x32>
 8004f12:	4598      	cmp	r8, r3
 8004f14:	dc01      	bgt.n	8004f1a <__ieee754_pow+0x6a>
 8004f16:	d10f      	bne.n	8004f38 <__ieee754_pow+0x88>
 8004f18:	b172      	cbz	r2, 8004f38 <__ieee754_pow+0x88>
 8004f1a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004f1e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004f22:	ea55 050a 	orrs.w	r5, r5, sl
 8004f26:	d1dc      	bne.n	8004ee2 <__ieee754_pow+0x32>
 8004f28:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004f2c:	18db      	adds	r3, r3, r3
 8004f2e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004f32:	4152      	adcs	r2, r2
 8004f34:	429d      	cmp	r5, r3
 8004f36:	e7d0      	b.n	8004eda <__ieee754_pow+0x2a>
 8004f38:	2d00      	cmp	r5, #0
 8004f3a:	da3b      	bge.n	8004fb4 <__ieee754_pow+0x104>
 8004f3c:	4b72      	ldr	r3, [pc, #456]	; (8005108 <__ieee754_pow+0x258>)
 8004f3e:	4598      	cmp	r8, r3
 8004f40:	dc51      	bgt.n	8004fe6 <__ieee754_pow+0x136>
 8004f42:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004f46:	4598      	cmp	r8, r3
 8004f48:	f340 84ab 	ble.w	80058a2 <__ieee754_pow+0x9f2>
 8004f4c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004f50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f54:	2b14      	cmp	r3, #20
 8004f56:	dd0f      	ble.n	8004f78 <__ieee754_pow+0xc8>
 8004f58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004f5c:	fa22 f103 	lsr.w	r1, r2, r3
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	4293      	cmp	r3, r2
 8004f66:	f040 849c 	bne.w	80058a2 <__ieee754_pow+0x9f2>
 8004f6a:	f001 0101 	and.w	r1, r1, #1
 8004f6e:	f1c1 0302 	rsb	r3, r1, #2
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	b182      	cbz	r2, 8004f98 <__ieee754_pow+0xe8>
 8004f76:	e05f      	b.n	8005038 <__ieee754_pow+0x188>
 8004f78:	2a00      	cmp	r2, #0
 8004f7a:	d15b      	bne.n	8005034 <__ieee754_pow+0x184>
 8004f7c:	f1c3 0314 	rsb	r3, r3, #20
 8004f80:	fa48 f103 	asr.w	r1, r8, r3
 8004f84:	fa01 f303 	lsl.w	r3, r1, r3
 8004f88:	4543      	cmp	r3, r8
 8004f8a:	f040 8487 	bne.w	800589c <__ieee754_pow+0x9ec>
 8004f8e:	f001 0101 	and.w	r1, r1, #1
 8004f92:	f1c1 0302 	rsb	r3, r1, #2
 8004f96:	9304      	str	r3, [sp, #16]
 8004f98:	4b5c      	ldr	r3, [pc, #368]	; (800510c <__ieee754_pow+0x25c>)
 8004f9a:	4598      	cmp	r8, r3
 8004f9c:	d132      	bne.n	8005004 <__ieee754_pow+0x154>
 8004f9e:	f1b9 0f00 	cmp.w	r9, #0
 8004fa2:	f280 8477 	bge.w	8005894 <__ieee754_pow+0x9e4>
 8004fa6:	4959      	ldr	r1, [pc, #356]	; (800510c <__ieee754_pow+0x25c>)
 8004fa8:	4632      	mov	r2, r6
 8004faa:	463b      	mov	r3, r7
 8004fac:	2000      	movs	r0, #0
 8004fae:	f7fb fc65 	bl	800087c <__aeabi_ddiv>
 8004fb2:	e79c      	b.n	8004eee <__ieee754_pow+0x3e>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	9304      	str	r3, [sp, #16]
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	d13d      	bne.n	8005038 <__ieee754_pow+0x188>
 8004fbc:	4b51      	ldr	r3, [pc, #324]	; (8005104 <__ieee754_pow+0x254>)
 8004fbe:	4598      	cmp	r8, r3
 8004fc0:	d1ea      	bne.n	8004f98 <__ieee754_pow+0xe8>
 8004fc2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004fc6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004fca:	ea53 030a 	orrs.w	r3, r3, sl
 8004fce:	f000 8459 	beq.w	8005884 <__ieee754_pow+0x9d4>
 8004fd2:	4b4f      	ldr	r3, [pc, #316]	; (8005110 <__ieee754_pow+0x260>)
 8004fd4:	429c      	cmp	r4, r3
 8004fd6:	dd08      	ble.n	8004fea <__ieee754_pow+0x13a>
 8004fd8:	f1b9 0f00 	cmp.w	r9, #0
 8004fdc:	f2c0 8456 	blt.w	800588c <__ieee754_pow+0x9dc>
 8004fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fe4:	e783      	b.n	8004eee <__ieee754_pow+0x3e>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e7e5      	b.n	8004fb6 <__ieee754_pow+0x106>
 8004fea:	f1b9 0f00 	cmp.w	r9, #0
 8004fee:	f04f 0000 	mov.w	r0, #0
 8004ff2:	f04f 0100 	mov.w	r1, #0
 8004ff6:	f6bf af7a 	bge.w	8004eee <__ieee754_pow+0x3e>
 8004ffa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004ffe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005002:	e774      	b.n	8004eee <__ieee754_pow+0x3e>
 8005004:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005008:	d106      	bne.n	8005018 <__ieee754_pow+0x168>
 800500a:	4632      	mov	r2, r6
 800500c:	463b      	mov	r3, r7
 800500e:	4630      	mov	r0, r6
 8005010:	4639      	mov	r1, r7
 8005012:	f7fb fb09 	bl	8000628 <__aeabi_dmul>
 8005016:	e76a      	b.n	8004eee <__ieee754_pow+0x3e>
 8005018:	4b3e      	ldr	r3, [pc, #248]	; (8005114 <__ieee754_pow+0x264>)
 800501a:	4599      	cmp	r9, r3
 800501c:	d10c      	bne.n	8005038 <__ieee754_pow+0x188>
 800501e:	2d00      	cmp	r5, #0
 8005020:	db0a      	blt.n	8005038 <__ieee754_pow+0x188>
 8005022:	ec47 6b10 	vmov	d0, r6, r7
 8005026:	b009      	add	sp, #36	; 0x24
 8005028:	ecbd 8b06 	vpop	{d8-d10}
 800502c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005030:	f000 bd20 	b.w	8005a74 <__ieee754_sqrt>
 8005034:	2300      	movs	r3, #0
 8005036:	9304      	str	r3, [sp, #16]
 8005038:	ec47 6b10 	vmov	d0, r6, r7
 800503c:	f000 fc62 	bl	8005904 <fabs>
 8005040:	ec51 0b10 	vmov	r0, r1, d0
 8005044:	f1ba 0f00 	cmp.w	sl, #0
 8005048:	d129      	bne.n	800509e <__ieee754_pow+0x1ee>
 800504a:	b124      	cbz	r4, 8005056 <__ieee754_pow+0x1a6>
 800504c:	4b2f      	ldr	r3, [pc, #188]	; (800510c <__ieee754_pow+0x25c>)
 800504e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005052:	429a      	cmp	r2, r3
 8005054:	d123      	bne.n	800509e <__ieee754_pow+0x1ee>
 8005056:	f1b9 0f00 	cmp.w	r9, #0
 800505a:	da05      	bge.n	8005068 <__ieee754_pow+0x1b8>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	2000      	movs	r0, #0
 8005062:	492a      	ldr	r1, [pc, #168]	; (800510c <__ieee754_pow+0x25c>)
 8005064:	f7fb fc0a 	bl	800087c <__aeabi_ddiv>
 8005068:	2d00      	cmp	r5, #0
 800506a:	f6bf af40 	bge.w	8004eee <__ieee754_pow+0x3e>
 800506e:	9b04      	ldr	r3, [sp, #16]
 8005070:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005074:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005078:	431c      	orrs	r4, r3
 800507a:	d108      	bne.n	800508e <__ieee754_pow+0x1de>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	f7fb f918 	bl	80002b8 <__aeabi_dsub>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	e78f      	b.n	8004fae <__ieee754_pow+0xfe>
 800508e:	9b04      	ldr	r3, [sp, #16]
 8005090:	2b01      	cmp	r3, #1
 8005092:	f47f af2c 	bne.w	8004eee <__ieee754_pow+0x3e>
 8005096:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800509a:	4619      	mov	r1, r3
 800509c:	e727      	b.n	8004eee <__ieee754_pow+0x3e>
 800509e:	0feb      	lsrs	r3, r5, #31
 80050a0:	3b01      	subs	r3, #1
 80050a2:	9306      	str	r3, [sp, #24]
 80050a4:	9a06      	ldr	r2, [sp, #24]
 80050a6:	9b04      	ldr	r3, [sp, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	d102      	bne.n	80050b2 <__ieee754_pow+0x202>
 80050ac:	4632      	mov	r2, r6
 80050ae:	463b      	mov	r3, r7
 80050b0:	e7e6      	b.n	8005080 <__ieee754_pow+0x1d0>
 80050b2:	4b19      	ldr	r3, [pc, #100]	; (8005118 <__ieee754_pow+0x268>)
 80050b4:	4598      	cmp	r8, r3
 80050b6:	f340 80fb 	ble.w	80052b0 <__ieee754_pow+0x400>
 80050ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80050be:	4598      	cmp	r8, r3
 80050c0:	4b13      	ldr	r3, [pc, #76]	; (8005110 <__ieee754_pow+0x260>)
 80050c2:	dd0c      	ble.n	80050de <__ieee754_pow+0x22e>
 80050c4:	429c      	cmp	r4, r3
 80050c6:	dc0f      	bgt.n	80050e8 <__ieee754_pow+0x238>
 80050c8:	f1b9 0f00 	cmp.w	r9, #0
 80050cc:	da0f      	bge.n	80050ee <__ieee754_pow+0x23e>
 80050ce:	2000      	movs	r0, #0
 80050d0:	b009      	add	sp, #36	; 0x24
 80050d2:	ecbd 8b06 	vpop	{d8-d10}
 80050d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	f000 bcc2 	b.w	8005a62 <__math_oflow>
 80050de:	429c      	cmp	r4, r3
 80050e0:	dbf2      	blt.n	80050c8 <__ieee754_pow+0x218>
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <__ieee754_pow+0x25c>)
 80050e4:	429c      	cmp	r4, r3
 80050e6:	dd19      	ble.n	800511c <__ieee754_pow+0x26c>
 80050e8:	f1b9 0f00 	cmp.w	r9, #0
 80050ec:	dcef      	bgt.n	80050ce <__ieee754_pow+0x21e>
 80050ee:	2000      	movs	r0, #0
 80050f0:	b009      	add	sp, #36	; 0x24
 80050f2:	ecbd 8b06 	vpop	{d8-d10}
 80050f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	f000 bca9 	b.w	8005a50 <__math_uflow>
 80050fe:	bf00      	nop
 8005100:	fff00000 	.word	0xfff00000
 8005104:	7ff00000 	.word	0x7ff00000
 8005108:	433fffff 	.word	0x433fffff
 800510c:	3ff00000 	.word	0x3ff00000
 8005110:	3fefffff 	.word	0x3fefffff
 8005114:	3fe00000 	.word	0x3fe00000
 8005118:	41e00000 	.word	0x41e00000
 800511c:	4b60      	ldr	r3, [pc, #384]	; (80052a0 <__ieee754_pow+0x3f0>)
 800511e:	2200      	movs	r2, #0
 8005120:	f7fb f8ca 	bl	80002b8 <__aeabi_dsub>
 8005124:	a354      	add	r3, pc, #336	; (adr r3, 8005278 <__ieee754_pow+0x3c8>)
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	4604      	mov	r4, r0
 800512c:	460d      	mov	r5, r1
 800512e:	f7fb fa7b 	bl	8000628 <__aeabi_dmul>
 8005132:	a353      	add	r3, pc, #332	; (adr r3, 8005280 <__ieee754_pow+0x3d0>)
 8005134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005138:	4606      	mov	r6, r0
 800513a:	460f      	mov	r7, r1
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7fb fa72 	bl	8000628 <__aeabi_dmul>
 8005144:	4b57      	ldr	r3, [pc, #348]	; (80052a4 <__ieee754_pow+0x3f4>)
 8005146:	4682      	mov	sl, r0
 8005148:	468b      	mov	fp, r1
 800514a:	2200      	movs	r2, #0
 800514c:	4620      	mov	r0, r4
 800514e:	4629      	mov	r1, r5
 8005150:	f7fb fa6a 	bl	8000628 <__aeabi_dmul>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	a14b      	add	r1, pc, #300	; (adr r1, 8005288 <__ieee754_pow+0x3d8>)
 800515a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800515e:	f7fb f8ab 	bl	80002b8 <__aeabi_dsub>
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	f7fb fa5f 	bl	8000628 <__aeabi_dmul>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	2000      	movs	r0, #0
 8005170:	494d      	ldr	r1, [pc, #308]	; (80052a8 <__ieee754_pow+0x3f8>)
 8005172:	f7fb f8a1 	bl	80002b8 <__aeabi_dsub>
 8005176:	4622      	mov	r2, r4
 8005178:	4680      	mov	r8, r0
 800517a:	4689      	mov	r9, r1
 800517c:	462b      	mov	r3, r5
 800517e:	4620      	mov	r0, r4
 8005180:	4629      	mov	r1, r5
 8005182:	f7fb fa51 	bl	8000628 <__aeabi_dmul>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4640      	mov	r0, r8
 800518c:	4649      	mov	r1, r9
 800518e:	f7fb fa4b 	bl	8000628 <__aeabi_dmul>
 8005192:	a33f      	add	r3, pc, #252	; (adr r3, 8005290 <__ieee754_pow+0x3e0>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f7fb fa46 	bl	8000628 <__aeabi_dmul>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4650      	mov	r0, sl
 80051a2:	4659      	mov	r1, fp
 80051a4:	f7fb f888 	bl	80002b8 <__aeabi_dsub>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4680      	mov	r8, r0
 80051ae:	4689      	mov	r9, r1
 80051b0:	4630      	mov	r0, r6
 80051b2:	4639      	mov	r1, r7
 80051b4:	f7fb f882 	bl	80002bc <__adddf3>
 80051b8:	2000      	movs	r0, #0
 80051ba:	4632      	mov	r2, r6
 80051bc:	463b      	mov	r3, r7
 80051be:	4604      	mov	r4, r0
 80051c0:	460d      	mov	r5, r1
 80051c2:	f7fb f879 	bl	80002b8 <__aeabi_dsub>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	f7fb f873 	bl	80002b8 <__aeabi_dsub>
 80051d2:	9b04      	ldr	r3, [sp, #16]
 80051d4:	9a06      	ldr	r2, [sp, #24]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4313      	orrs	r3, r2
 80051da:	4682      	mov	sl, r0
 80051dc:	468b      	mov	fp, r1
 80051de:	f040 81e7 	bne.w	80055b0 <__ieee754_pow+0x700>
 80051e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005298 <__ieee754_pow+0x3e8>
 80051e6:	eeb0 8a47 	vmov.f32	s16, s14
 80051ea:	eef0 8a67 	vmov.f32	s17, s15
 80051ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80051f2:	2600      	movs	r6, #0
 80051f4:	4632      	mov	r2, r6
 80051f6:	463b      	mov	r3, r7
 80051f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051fc:	f7fb f85c 	bl	80002b8 <__aeabi_dsub>
 8005200:	4622      	mov	r2, r4
 8005202:	462b      	mov	r3, r5
 8005204:	f7fb fa10 	bl	8000628 <__aeabi_dmul>
 8005208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800520c:	4680      	mov	r8, r0
 800520e:	4689      	mov	r9, r1
 8005210:	4650      	mov	r0, sl
 8005212:	4659      	mov	r1, fp
 8005214:	f7fb fa08 	bl	8000628 <__aeabi_dmul>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4640      	mov	r0, r8
 800521e:	4649      	mov	r1, r9
 8005220:	f7fb f84c 	bl	80002bc <__adddf3>
 8005224:	4632      	mov	r2, r6
 8005226:	463b      	mov	r3, r7
 8005228:	4680      	mov	r8, r0
 800522a:	4689      	mov	r9, r1
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fb f9fa 	bl	8000628 <__aeabi_dmul>
 8005234:	460b      	mov	r3, r1
 8005236:	4604      	mov	r4, r0
 8005238:	460d      	mov	r5, r1
 800523a:	4602      	mov	r2, r0
 800523c:	4649      	mov	r1, r9
 800523e:	4640      	mov	r0, r8
 8005240:	f7fb f83c 	bl	80002bc <__adddf3>
 8005244:	4b19      	ldr	r3, [pc, #100]	; (80052ac <__ieee754_pow+0x3fc>)
 8005246:	4299      	cmp	r1, r3
 8005248:	ec45 4b19 	vmov	d9, r4, r5
 800524c:	4606      	mov	r6, r0
 800524e:	460f      	mov	r7, r1
 8005250:	468b      	mov	fp, r1
 8005252:	f340 82f0 	ble.w	8005836 <__ieee754_pow+0x986>
 8005256:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800525a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800525e:	4303      	orrs	r3, r0
 8005260:	f000 81e4 	beq.w	800562c <__ieee754_pow+0x77c>
 8005264:	ec51 0b18 	vmov	r0, r1, d8
 8005268:	2200      	movs	r2, #0
 800526a:	2300      	movs	r3, #0
 800526c:	f7fb fc4e 	bl	8000b0c <__aeabi_dcmplt>
 8005270:	3800      	subs	r0, #0
 8005272:	bf18      	it	ne
 8005274:	2001      	movne	r0, #1
 8005276:	e72b      	b.n	80050d0 <__ieee754_pow+0x220>
 8005278:	60000000 	.word	0x60000000
 800527c:	3ff71547 	.word	0x3ff71547
 8005280:	f85ddf44 	.word	0xf85ddf44
 8005284:	3e54ae0b 	.word	0x3e54ae0b
 8005288:	55555555 	.word	0x55555555
 800528c:	3fd55555 	.word	0x3fd55555
 8005290:	652b82fe 	.word	0x652b82fe
 8005294:	3ff71547 	.word	0x3ff71547
 8005298:	00000000 	.word	0x00000000
 800529c:	bff00000 	.word	0xbff00000
 80052a0:	3ff00000 	.word	0x3ff00000
 80052a4:	3fd00000 	.word	0x3fd00000
 80052a8:	3fe00000 	.word	0x3fe00000
 80052ac:	408fffff 	.word	0x408fffff
 80052b0:	4bd5      	ldr	r3, [pc, #852]	; (8005608 <__ieee754_pow+0x758>)
 80052b2:	402b      	ands	r3, r5
 80052b4:	2200      	movs	r2, #0
 80052b6:	b92b      	cbnz	r3, 80052c4 <__ieee754_pow+0x414>
 80052b8:	4bd4      	ldr	r3, [pc, #848]	; (800560c <__ieee754_pow+0x75c>)
 80052ba:	f7fb f9b5 	bl	8000628 <__aeabi_dmul>
 80052be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80052c2:	460c      	mov	r4, r1
 80052c4:	1523      	asrs	r3, r4, #20
 80052c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052ca:	4413      	add	r3, r2
 80052cc:	9305      	str	r3, [sp, #20]
 80052ce:	4bd0      	ldr	r3, [pc, #832]	; (8005610 <__ieee754_pow+0x760>)
 80052d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80052d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80052d8:	429c      	cmp	r4, r3
 80052da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80052de:	dd08      	ble.n	80052f2 <__ieee754_pow+0x442>
 80052e0:	4bcc      	ldr	r3, [pc, #816]	; (8005614 <__ieee754_pow+0x764>)
 80052e2:	429c      	cmp	r4, r3
 80052e4:	f340 8162 	ble.w	80055ac <__ieee754_pow+0x6fc>
 80052e8:	9b05      	ldr	r3, [sp, #20]
 80052ea:	3301      	adds	r3, #1
 80052ec:	9305      	str	r3, [sp, #20]
 80052ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80052f2:	2400      	movs	r4, #0
 80052f4:	00e3      	lsls	r3, r4, #3
 80052f6:	9307      	str	r3, [sp, #28]
 80052f8:	4bc7      	ldr	r3, [pc, #796]	; (8005618 <__ieee754_pow+0x768>)
 80052fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052fe:	ed93 7b00 	vldr	d7, [r3]
 8005302:	4629      	mov	r1, r5
 8005304:	ec53 2b17 	vmov	r2, r3, d7
 8005308:	eeb0 9a47 	vmov.f32	s18, s14
 800530c:	eef0 9a67 	vmov.f32	s19, s15
 8005310:	4682      	mov	sl, r0
 8005312:	f7fa ffd1 	bl	80002b8 <__aeabi_dsub>
 8005316:	4652      	mov	r2, sl
 8005318:	4606      	mov	r6, r0
 800531a:	460f      	mov	r7, r1
 800531c:	462b      	mov	r3, r5
 800531e:	ec51 0b19 	vmov	r0, r1, d9
 8005322:	f7fa ffcb 	bl	80002bc <__adddf3>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	2000      	movs	r0, #0
 800532c:	49bb      	ldr	r1, [pc, #748]	; (800561c <__ieee754_pow+0x76c>)
 800532e:	f7fb faa5 	bl	800087c <__aeabi_ddiv>
 8005332:	ec41 0b1a 	vmov	d10, r0, r1
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4630      	mov	r0, r6
 800533c:	4639      	mov	r1, r7
 800533e:	f7fb f973 	bl	8000628 <__aeabi_dmul>
 8005342:	2300      	movs	r3, #0
 8005344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005348:	9302      	str	r3, [sp, #8]
 800534a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800534e:	46ab      	mov	fp, r5
 8005350:	106d      	asrs	r5, r5, #1
 8005352:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005356:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800535a:	ec41 0b18 	vmov	d8, r0, r1
 800535e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005362:	2200      	movs	r2, #0
 8005364:	4640      	mov	r0, r8
 8005366:	4649      	mov	r1, r9
 8005368:	4614      	mov	r4, r2
 800536a:	461d      	mov	r5, r3
 800536c:	f7fb f95c 	bl	8000628 <__aeabi_dmul>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4630      	mov	r0, r6
 8005376:	4639      	mov	r1, r7
 8005378:	f7fa ff9e 	bl	80002b8 <__aeabi_dsub>
 800537c:	ec53 2b19 	vmov	r2, r3, d9
 8005380:	4606      	mov	r6, r0
 8005382:	460f      	mov	r7, r1
 8005384:	4620      	mov	r0, r4
 8005386:	4629      	mov	r1, r5
 8005388:	f7fa ff96 	bl	80002b8 <__aeabi_dsub>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4650      	mov	r0, sl
 8005392:	4659      	mov	r1, fp
 8005394:	f7fa ff90 	bl	80002b8 <__aeabi_dsub>
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	f7fb f944 	bl	8000628 <__aeabi_dmul>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4630      	mov	r0, r6
 80053a6:	4639      	mov	r1, r7
 80053a8:	f7fa ff86 	bl	80002b8 <__aeabi_dsub>
 80053ac:	ec53 2b1a 	vmov	r2, r3, d10
 80053b0:	f7fb f93a 	bl	8000628 <__aeabi_dmul>
 80053b4:	ec53 2b18 	vmov	r2, r3, d8
 80053b8:	ec41 0b19 	vmov	d9, r0, r1
 80053bc:	ec51 0b18 	vmov	r0, r1, d8
 80053c0:	f7fb f932 	bl	8000628 <__aeabi_dmul>
 80053c4:	a37c      	add	r3, pc, #496	; (adr r3, 80055b8 <__ieee754_pow+0x708>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	4604      	mov	r4, r0
 80053cc:	460d      	mov	r5, r1
 80053ce:	f7fb f92b 	bl	8000628 <__aeabi_dmul>
 80053d2:	a37b      	add	r3, pc, #492	; (adr r3, 80055c0 <__ieee754_pow+0x710>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fa ff70 	bl	80002bc <__adddf3>
 80053dc:	4622      	mov	r2, r4
 80053de:	462b      	mov	r3, r5
 80053e0:	f7fb f922 	bl	8000628 <__aeabi_dmul>
 80053e4:	a378      	add	r3, pc, #480	; (adr r3, 80055c8 <__ieee754_pow+0x718>)
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	f7fa ff67 	bl	80002bc <__adddf3>
 80053ee:	4622      	mov	r2, r4
 80053f0:	462b      	mov	r3, r5
 80053f2:	f7fb f919 	bl	8000628 <__aeabi_dmul>
 80053f6:	a376      	add	r3, pc, #472	; (adr r3, 80055d0 <__ieee754_pow+0x720>)
 80053f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fc:	f7fa ff5e 	bl	80002bc <__adddf3>
 8005400:	4622      	mov	r2, r4
 8005402:	462b      	mov	r3, r5
 8005404:	f7fb f910 	bl	8000628 <__aeabi_dmul>
 8005408:	a373      	add	r3, pc, #460	; (adr r3, 80055d8 <__ieee754_pow+0x728>)
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f7fa ff55 	bl	80002bc <__adddf3>
 8005412:	4622      	mov	r2, r4
 8005414:	462b      	mov	r3, r5
 8005416:	f7fb f907 	bl	8000628 <__aeabi_dmul>
 800541a:	a371      	add	r3, pc, #452	; (adr r3, 80055e0 <__ieee754_pow+0x730>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f7fa ff4c 	bl	80002bc <__adddf3>
 8005424:	4622      	mov	r2, r4
 8005426:	4606      	mov	r6, r0
 8005428:	460f      	mov	r7, r1
 800542a:	462b      	mov	r3, r5
 800542c:	4620      	mov	r0, r4
 800542e:	4629      	mov	r1, r5
 8005430:	f7fb f8fa 	bl	8000628 <__aeabi_dmul>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4630      	mov	r0, r6
 800543a:	4639      	mov	r1, r7
 800543c:	f7fb f8f4 	bl	8000628 <__aeabi_dmul>
 8005440:	4642      	mov	r2, r8
 8005442:	4604      	mov	r4, r0
 8005444:	460d      	mov	r5, r1
 8005446:	464b      	mov	r3, r9
 8005448:	ec51 0b18 	vmov	r0, r1, d8
 800544c:	f7fa ff36 	bl	80002bc <__adddf3>
 8005450:	ec53 2b19 	vmov	r2, r3, d9
 8005454:	f7fb f8e8 	bl	8000628 <__aeabi_dmul>
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	f7fa ff2e 	bl	80002bc <__adddf3>
 8005460:	4642      	mov	r2, r8
 8005462:	4682      	mov	sl, r0
 8005464:	468b      	mov	fp, r1
 8005466:	464b      	mov	r3, r9
 8005468:	4640      	mov	r0, r8
 800546a:	4649      	mov	r1, r9
 800546c:	f7fb f8dc 	bl	8000628 <__aeabi_dmul>
 8005470:	4b6b      	ldr	r3, [pc, #428]	; (8005620 <__ieee754_pow+0x770>)
 8005472:	2200      	movs	r2, #0
 8005474:	4606      	mov	r6, r0
 8005476:	460f      	mov	r7, r1
 8005478:	f7fa ff20 	bl	80002bc <__adddf3>
 800547c:	4652      	mov	r2, sl
 800547e:	465b      	mov	r3, fp
 8005480:	f7fa ff1c 	bl	80002bc <__adddf3>
 8005484:	2000      	movs	r0, #0
 8005486:	4604      	mov	r4, r0
 8005488:	460d      	mov	r5, r1
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4640      	mov	r0, r8
 8005490:	4649      	mov	r1, r9
 8005492:	f7fb f8c9 	bl	8000628 <__aeabi_dmul>
 8005496:	4b62      	ldr	r3, [pc, #392]	; (8005620 <__ieee754_pow+0x770>)
 8005498:	4680      	mov	r8, r0
 800549a:	4689      	mov	r9, r1
 800549c:	2200      	movs	r2, #0
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fa ff09 	bl	80002b8 <__aeabi_dsub>
 80054a6:	4632      	mov	r2, r6
 80054a8:	463b      	mov	r3, r7
 80054aa:	f7fa ff05 	bl	80002b8 <__aeabi_dsub>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4650      	mov	r0, sl
 80054b4:	4659      	mov	r1, fp
 80054b6:	f7fa feff 	bl	80002b8 <__aeabi_dsub>
 80054ba:	ec53 2b18 	vmov	r2, r3, d8
 80054be:	f7fb f8b3 	bl	8000628 <__aeabi_dmul>
 80054c2:	4622      	mov	r2, r4
 80054c4:	4606      	mov	r6, r0
 80054c6:	460f      	mov	r7, r1
 80054c8:	462b      	mov	r3, r5
 80054ca:	ec51 0b19 	vmov	r0, r1, d9
 80054ce:	f7fb f8ab 	bl	8000628 <__aeabi_dmul>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4630      	mov	r0, r6
 80054d8:	4639      	mov	r1, r7
 80054da:	f7fa feef 	bl	80002bc <__adddf3>
 80054de:	4606      	mov	r6, r0
 80054e0:	460f      	mov	r7, r1
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4640      	mov	r0, r8
 80054e8:	4649      	mov	r1, r9
 80054ea:	f7fa fee7 	bl	80002bc <__adddf3>
 80054ee:	a33e      	add	r3, pc, #248	; (adr r3, 80055e8 <__ieee754_pow+0x738>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	2000      	movs	r0, #0
 80054f6:	4604      	mov	r4, r0
 80054f8:	460d      	mov	r5, r1
 80054fa:	f7fb f895 	bl	8000628 <__aeabi_dmul>
 80054fe:	4642      	mov	r2, r8
 8005500:	ec41 0b18 	vmov	d8, r0, r1
 8005504:	464b      	mov	r3, r9
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	f7fa fed5 	bl	80002b8 <__aeabi_dsub>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4630      	mov	r0, r6
 8005514:	4639      	mov	r1, r7
 8005516:	f7fa fecf 	bl	80002b8 <__aeabi_dsub>
 800551a:	a335      	add	r3, pc, #212	; (adr r3, 80055f0 <__ieee754_pow+0x740>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fb f882 	bl	8000628 <__aeabi_dmul>
 8005524:	a334      	add	r3, pc, #208	; (adr r3, 80055f8 <__ieee754_pow+0x748>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	4606      	mov	r6, r0
 800552c:	460f      	mov	r7, r1
 800552e:	4620      	mov	r0, r4
 8005530:	4629      	mov	r1, r5
 8005532:	f7fb f879 	bl	8000628 <__aeabi_dmul>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4630      	mov	r0, r6
 800553c:	4639      	mov	r1, r7
 800553e:	f7fa febd 	bl	80002bc <__adddf3>
 8005542:	9a07      	ldr	r2, [sp, #28]
 8005544:	4b37      	ldr	r3, [pc, #220]	; (8005624 <__ieee754_pow+0x774>)
 8005546:	4413      	add	r3, r2
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fa feb6 	bl	80002bc <__adddf3>
 8005550:	4682      	mov	sl, r0
 8005552:	9805      	ldr	r0, [sp, #20]
 8005554:	468b      	mov	fp, r1
 8005556:	f7fa fffd 	bl	8000554 <__aeabi_i2d>
 800555a:	9a07      	ldr	r2, [sp, #28]
 800555c:	4b32      	ldr	r3, [pc, #200]	; (8005628 <__ieee754_pow+0x778>)
 800555e:	4413      	add	r3, r2
 8005560:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005564:	4606      	mov	r6, r0
 8005566:	460f      	mov	r7, r1
 8005568:	4652      	mov	r2, sl
 800556a:	465b      	mov	r3, fp
 800556c:	ec51 0b18 	vmov	r0, r1, d8
 8005570:	f7fa fea4 	bl	80002bc <__adddf3>
 8005574:	4642      	mov	r2, r8
 8005576:	464b      	mov	r3, r9
 8005578:	f7fa fea0 	bl	80002bc <__adddf3>
 800557c:	4632      	mov	r2, r6
 800557e:	463b      	mov	r3, r7
 8005580:	f7fa fe9c 	bl	80002bc <__adddf3>
 8005584:	2000      	movs	r0, #0
 8005586:	4632      	mov	r2, r6
 8005588:	463b      	mov	r3, r7
 800558a:	4604      	mov	r4, r0
 800558c:	460d      	mov	r5, r1
 800558e:	f7fa fe93 	bl	80002b8 <__aeabi_dsub>
 8005592:	4642      	mov	r2, r8
 8005594:	464b      	mov	r3, r9
 8005596:	f7fa fe8f 	bl	80002b8 <__aeabi_dsub>
 800559a:	ec53 2b18 	vmov	r2, r3, d8
 800559e:	f7fa fe8b 	bl	80002b8 <__aeabi_dsub>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4650      	mov	r0, sl
 80055a8:	4659      	mov	r1, fp
 80055aa:	e610      	b.n	80051ce <__ieee754_pow+0x31e>
 80055ac:	2401      	movs	r4, #1
 80055ae:	e6a1      	b.n	80052f4 <__ieee754_pow+0x444>
 80055b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005600 <__ieee754_pow+0x750>
 80055b4:	e617      	b.n	80051e6 <__ieee754_pow+0x336>
 80055b6:	bf00      	nop
 80055b8:	4a454eef 	.word	0x4a454eef
 80055bc:	3fca7e28 	.word	0x3fca7e28
 80055c0:	93c9db65 	.word	0x93c9db65
 80055c4:	3fcd864a 	.word	0x3fcd864a
 80055c8:	a91d4101 	.word	0xa91d4101
 80055cc:	3fd17460 	.word	0x3fd17460
 80055d0:	518f264d 	.word	0x518f264d
 80055d4:	3fd55555 	.word	0x3fd55555
 80055d8:	db6fabff 	.word	0xdb6fabff
 80055dc:	3fdb6db6 	.word	0x3fdb6db6
 80055e0:	33333303 	.word	0x33333303
 80055e4:	3fe33333 	.word	0x3fe33333
 80055e8:	e0000000 	.word	0xe0000000
 80055ec:	3feec709 	.word	0x3feec709
 80055f0:	dc3a03fd 	.word	0xdc3a03fd
 80055f4:	3feec709 	.word	0x3feec709
 80055f8:	145b01f5 	.word	0x145b01f5
 80055fc:	be3e2fe0 	.word	0xbe3e2fe0
 8005600:	00000000 	.word	0x00000000
 8005604:	3ff00000 	.word	0x3ff00000
 8005608:	7ff00000 	.word	0x7ff00000
 800560c:	43400000 	.word	0x43400000
 8005610:	0003988e 	.word	0x0003988e
 8005614:	000bb679 	.word	0x000bb679
 8005618:	08005d38 	.word	0x08005d38
 800561c:	3ff00000 	.word	0x3ff00000
 8005620:	40080000 	.word	0x40080000
 8005624:	08005d58 	.word	0x08005d58
 8005628:	08005d48 	.word	0x08005d48
 800562c:	a3b3      	add	r3, pc, #716	; (adr r3, 80058fc <__ieee754_pow+0xa4c>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	f7fa fe41 	bl	80002bc <__adddf3>
 800563a:	4622      	mov	r2, r4
 800563c:	ec41 0b1a 	vmov	d10, r0, r1
 8005640:	462b      	mov	r3, r5
 8005642:	4630      	mov	r0, r6
 8005644:	4639      	mov	r1, r7
 8005646:	f7fa fe37 	bl	80002b8 <__aeabi_dsub>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	ec51 0b1a 	vmov	r0, r1, d10
 8005652:	f7fb fa79 	bl	8000b48 <__aeabi_dcmpgt>
 8005656:	2800      	cmp	r0, #0
 8005658:	f47f ae04 	bne.w	8005264 <__ieee754_pow+0x3b4>
 800565c:	4aa2      	ldr	r2, [pc, #648]	; (80058e8 <__ieee754_pow+0xa38>)
 800565e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005662:	4293      	cmp	r3, r2
 8005664:	f340 8107 	ble.w	8005876 <__ieee754_pow+0x9c6>
 8005668:	151b      	asrs	r3, r3, #20
 800566a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800566e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005672:	fa4a fa03 	asr.w	sl, sl, r3
 8005676:	44da      	add	sl, fp
 8005678:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800567c:	489b      	ldr	r0, [pc, #620]	; (80058ec <__ieee754_pow+0xa3c>)
 800567e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005682:	4108      	asrs	r0, r1
 8005684:	ea00 030a 	and.w	r3, r0, sl
 8005688:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800568c:	f1c1 0114 	rsb	r1, r1, #20
 8005690:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005694:	fa4a fa01 	asr.w	sl, sl, r1
 8005698:	f1bb 0f00 	cmp.w	fp, #0
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	bfb8      	it	lt
 80056a6:	f1ca 0a00 	rsblt	sl, sl, #0
 80056aa:	f7fa fe05 	bl	80002b8 <__aeabi_dsub>
 80056ae:	ec41 0b19 	vmov	d9, r0, r1
 80056b2:	4642      	mov	r2, r8
 80056b4:	464b      	mov	r3, r9
 80056b6:	ec51 0b19 	vmov	r0, r1, d9
 80056ba:	f7fa fdff 	bl	80002bc <__adddf3>
 80056be:	a37a      	add	r3, pc, #488	; (adr r3, 80058a8 <__ieee754_pow+0x9f8>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	2000      	movs	r0, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	460d      	mov	r5, r1
 80056ca:	f7fa ffad 	bl	8000628 <__aeabi_dmul>
 80056ce:	ec53 2b19 	vmov	r2, r3, d9
 80056d2:	4606      	mov	r6, r0
 80056d4:	460f      	mov	r7, r1
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fa fded 	bl	80002b8 <__aeabi_dsub>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4640      	mov	r0, r8
 80056e4:	4649      	mov	r1, r9
 80056e6:	f7fa fde7 	bl	80002b8 <__aeabi_dsub>
 80056ea:	a371      	add	r3, pc, #452	; (adr r3, 80058b0 <__ieee754_pow+0xa00>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f7fa ff9a 	bl	8000628 <__aeabi_dmul>
 80056f4:	a370      	add	r3, pc, #448	; (adr r3, 80058b8 <__ieee754_pow+0xa08>)
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	4680      	mov	r8, r0
 80056fc:	4689      	mov	r9, r1
 80056fe:	4620      	mov	r0, r4
 8005700:	4629      	mov	r1, r5
 8005702:	f7fa ff91 	bl	8000628 <__aeabi_dmul>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa fdd5 	bl	80002bc <__adddf3>
 8005712:	4604      	mov	r4, r0
 8005714:	460d      	mov	r5, r1
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4630      	mov	r0, r6
 800571c:	4639      	mov	r1, r7
 800571e:	f7fa fdcd 	bl	80002bc <__adddf3>
 8005722:	4632      	mov	r2, r6
 8005724:	463b      	mov	r3, r7
 8005726:	4680      	mov	r8, r0
 8005728:	4689      	mov	r9, r1
 800572a:	f7fa fdc5 	bl	80002b8 <__aeabi_dsub>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	f7fa fdbf 	bl	80002b8 <__aeabi_dsub>
 800573a:	4642      	mov	r2, r8
 800573c:	4606      	mov	r6, r0
 800573e:	460f      	mov	r7, r1
 8005740:	464b      	mov	r3, r9
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f7fa ff6f 	bl	8000628 <__aeabi_dmul>
 800574a:	a35d      	add	r3, pc, #372	; (adr r3, 80058c0 <__ieee754_pow+0xa10>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	4604      	mov	r4, r0
 8005752:	460d      	mov	r5, r1
 8005754:	f7fa ff68 	bl	8000628 <__aeabi_dmul>
 8005758:	a35b      	add	r3, pc, #364	; (adr r3, 80058c8 <__ieee754_pow+0xa18>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fa fdab 	bl	80002b8 <__aeabi_dsub>
 8005762:	4622      	mov	r2, r4
 8005764:	462b      	mov	r3, r5
 8005766:	f7fa ff5f 	bl	8000628 <__aeabi_dmul>
 800576a:	a359      	add	r3, pc, #356	; (adr r3, 80058d0 <__ieee754_pow+0xa20>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f7fa fda4 	bl	80002bc <__adddf3>
 8005774:	4622      	mov	r2, r4
 8005776:	462b      	mov	r3, r5
 8005778:	f7fa ff56 	bl	8000628 <__aeabi_dmul>
 800577c:	a356      	add	r3, pc, #344	; (adr r3, 80058d8 <__ieee754_pow+0xa28>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fd99 	bl	80002b8 <__aeabi_dsub>
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	f7fa ff4d 	bl	8000628 <__aeabi_dmul>
 800578e:	a354      	add	r3, pc, #336	; (adr r3, 80058e0 <__ieee754_pow+0xa30>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f7fa fd92 	bl	80002bc <__adddf3>
 8005798:	4622      	mov	r2, r4
 800579a:	462b      	mov	r3, r5
 800579c:	f7fa ff44 	bl	8000628 <__aeabi_dmul>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4640      	mov	r0, r8
 80057a6:	4649      	mov	r1, r9
 80057a8:	f7fa fd86 	bl	80002b8 <__aeabi_dsub>
 80057ac:	4604      	mov	r4, r0
 80057ae:	460d      	mov	r5, r1
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4640      	mov	r0, r8
 80057b6:	4649      	mov	r1, r9
 80057b8:	f7fa ff36 	bl	8000628 <__aeabi_dmul>
 80057bc:	2200      	movs	r2, #0
 80057be:	ec41 0b19 	vmov	d9, r0, r1
 80057c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057c6:	4620      	mov	r0, r4
 80057c8:	4629      	mov	r1, r5
 80057ca:	f7fa fd75 	bl	80002b8 <__aeabi_dsub>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	ec51 0b19 	vmov	r0, r1, d9
 80057d6:	f7fb f851 	bl	800087c <__aeabi_ddiv>
 80057da:	4632      	mov	r2, r6
 80057dc:	4604      	mov	r4, r0
 80057de:	460d      	mov	r5, r1
 80057e0:	463b      	mov	r3, r7
 80057e2:	4640      	mov	r0, r8
 80057e4:	4649      	mov	r1, r9
 80057e6:	f7fa ff1f 	bl	8000628 <__aeabi_dmul>
 80057ea:	4632      	mov	r2, r6
 80057ec:	463b      	mov	r3, r7
 80057ee:	f7fa fd65 	bl	80002bc <__adddf3>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4620      	mov	r0, r4
 80057f8:	4629      	mov	r1, r5
 80057fa:	f7fa fd5d 	bl	80002b8 <__aeabi_dsub>
 80057fe:	4642      	mov	r2, r8
 8005800:	464b      	mov	r3, r9
 8005802:	f7fa fd59 	bl	80002b8 <__aeabi_dsub>
 8005806:	460b      	mov	r3, r1
 8005808:	4602      	mov	r2, r0
 800580a:	4939      	ldr	r1, [pc, #228]	; (80058f0 <__ieee754_pow+0xa40>)
 800580c:	2000      	movs	r0, #0
 800580e:	f7fa fd53 	bl	80002b8 <__aeabi_dsub>
 8005812:	ec41 0b10 	vmov	d0, r0, r1
 8005816:	ee10 3a90 	vmov	r3, s1
 800581a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800581e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005822:	da2b      	bge.n	800587c <__ieee754_pow+0x9cc>
 8005824:	4650      	mov	r0, sl
 8005826:	f000 f877 	bl	8005918 <scalbn>
 800582a:	ec51 0b10 	vmov	r0, r1, d0
 800582e:	ec53 2b18 	vmov	r2, r3, d8
 8005832:	f7ff bbee 	b.w	8005012 <__ieee754_pow+0x162>
 8005836:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <__ieee754_pow+0xa44>)
 8005838:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800583c:	429e      	cmp	r6, r3
 800583e:	f77f af0d 	ble.w	800565c <__ieee754_pow+0x7ac>
 8005842:	4b2d      	ldr	r3, [pc, #180]	; (80058f8 <__ieee754_pow+0xa48>)
 8005844:	440b      	add	r3, r1
 8005846:	4303      	orrs	r3, r0
 8005848:	d009      	beq.n	800585e <__ieee754_pow+0x9ae>
 800584a:	ec51 0b18 	vmov	r0, r1, d8
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	f7fb f95b 	bl	8000b0c <__aeabi_dcmplt>
 8005856:	3800      	subs	r0, #0
 8005858:	bf18      	it	ne
 800585a:	2001      	movne	r0, #1
 800585c:	e448      	b.n	80050f0 <__ieee754_pow+0x240>
 800585e:	4622      	mov	r2, r4
 8005860:	462b      	mov	r3, r5
 8005862:	f7fa fd29 	bl	80002b8 <__aeabi_dsub>
 8005866:	4642      	mov	r2, r8
 8005868:	464b      	mov	r3, r9
 800586a:	f7fb f963 	bl	8000b34 <__aeabi_dcmpge>
 800586e:	2800      	cmp	r0, #0
 8005870:	f43f aef4 	beq.w	800565c <__ieee754_pow+0x7ac>
 8005874:	e7e9      	b.n	800584a <__ieee754_pow+0x99a>
 8005876:	f04f 0a00 	mov.w	sl, #0
 800587a:	e71a      	b.n	80056b2 <__ieee754_pow+0x802>
 800587c:	ec51 0b10 	vmov	r0, r1, d0
 8005880:	4619      	mov	r1, r3
 8005882:	e7d4      	b.n	800582e <__ieee754_pow+0x97e>
 8005884:	491a      	ldr	r1, [pc, #104]	; (80058f0 <__ieee754_pow+0xa40>)
 8005886:	2000      	movs	r0, #0
 8005888:	f7ff bb31 	b.w	8004eee <__ieee754_pow+0x3e>
 800588c:	2000      	movs	r0, #0
 800588e:	2100      	movs	r1, #0
 8005890:	f7ff bb2d 	b.w	8004eee <__ieee754_pow+0x3e>
 8005894:	4630      	mov	r0, r6
 8005896:	4639      	mov	r1, r7
 8005898:	f7ff bb29 	b.w	8004eee <__ieee754_pow+0x3e>
 800589c:	9204      	str	r2, [sp, #16]
 800589e:	f7ff bb7b 	b.w	8004f98 <__ieee754_pow+0xe8>
 80058a2:	2300      	movs	r3, #0
 80058a4:	f7ff bb65 	b.w	8004f72 <__ieee754_pow+0xc2>
 80058a8:	00000000 	.word	0x00000000
 80058ac:	3fe62e43 	.word	0x3fe62e43
 80058b0:	fefa39ef 	.word	0xfefa39ef
 80058b4:	3fe62e42 	.word	0x3fe62e42
 80058b8:	0ca86c39 	.word	0x0ca86c39
 80058bc:	be205c61 	.word	0xbe205c61
 80058c0:	72bea4d0 	.word	0x72bea4d0
 80058c4:	3e663769 	.word	0x3e663769
 80058c8:	c5d26bf1 	.word	0xc5d26bf1
 80058cc:	3ebbbd41 	.word	0x3ebbbd41
 80058d0:	af25de2c 	.word	0xaf25de2c
 80058d4:	3f11566a 	.word	0x3f11566a
 80058d8:	16bebd93 	.word	0x16bebd93
 80058dc:	3f66c16c 	.word	0x3f66c16c
 80058e0:	5555553e 	.word	0x5555553e
 80058e4:	3fc55555 	.word	0x3fc55555
 80058e8:	3fe00000 	.word	0x3fe00000
 80058ec:	fff00000 	.word	0xfff00000
 80058f0:	3ff00000 	.word	0x3ff00000
 80058f4:	4090cbff 	.word	0x4090cbff
 80058f8:	3f6f3400 	.word	0x3f6f3400
 80058fc:	652b82fe 	.word	0x652b82fe
 8005900:	3c971547 	.word	0x3c971547

08005904 <fabs>:
 8005904:	ec51 0b10 	vmov	r0, r1, d0
 8005908:	ee10 2a10 	vmov	r2, s0
 800590c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005910:	ec43 2b10 	vmov	d0, r2, r3
 8005914:	4770      	bx	lr
	...

08005918 <scalbn>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	ec55 4b10 	vmov	r4, r5, d0
 800591e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005922:	4606      	mov	r6, r0
 8005924:	462b      	mov	r3, r5
 8005926:	b999      	cbnz	r1, 8005950 <scalbn+0x38>
 8005928:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800592c:	4323      	orrs	r3, r4
 800592e:	d03f      	beq.n	80059b0 <scalbn+0x98>
 8005930:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <scalbn+0xf0>)
 8005932:	4629      	mov	r1, r5
 8005934:	ee10 0a10 	vmov	r0, s0
 8005938:	2200      	movs	r2, #0
 800593a:	f7fa fe75 	bl	8000628 <__aeabi_dmul>
 800593e:	4b33      	ldr	r3, [pc, #204]	; (8005a0c <scalbn+0xf4>)
 8005940:	429e      	cmp	r6, r3
 8005942:	4604      	mov	r4, r0
 8005944:	460d      	mov	r5, r1
 8005946:	da10      	bge.n	800596a <scalbn+0x52>
 8005948:	a327      	add	r3, pc, #156	; (adr r3, 80059e8 <scalbn+0xd0>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	e01f      	b.n	8005990 <scalbn+0x78>
 8005950:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005954:	4291      	cmp	r1, r2
 8005956:	d10c      	bne.n	8005972 <scalbn+0x5a>
 8005958:	ee10 2a10 	vmov	r2, s0
 800595c:	4620      	mov	r0, r4
 800595e:	4629      	mov	r1, r5
 8005960:	f7fa fcac 	bl	80002bc <__adddf3>
 8005964:	4604      	mov	r4, r0
 8005966:	460d      	mov	r5, r1
 8005968:	e022      	b.n	80059b0 <scalbn+0x98>
 800596a:	460b      	mov	r3, r1
 800596c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005970:	3936      	subs	r1, #54	; 0x36
 8005972:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005976:	4296      	cmp	r6, r2
 8005978:	dd0d      	ble.n	8005996 <scalbn+0x7e>
 800597a:	2d00      	cmp	r5, #0
 800597c:	a11c      	add	r1, pc, #112	; (adr r1, 80059f0 <scalbn+0xd8>)
 800597e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005982:	da02      	bge.n	800598a <scalbn+0x72>
 8005984:	a11c      	add	r1, pc, #112	; (adr r1, 80059f8 <scalbn+0xe0>)
 8005986:	e9d1 0100 	ldrd	r0, r1, [r1]
 800598a:	a319      	add	r3, pc, #100	; (adr r3, 80059f0 <scalbn+0xd8>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f7fa fe4a 	bl	8000628 <__aeabi_dmul>
 8005994:	e7e6      	b.n	8005964 <scalbn+0x4c>
 8005996:	1872      	adds	r2, r6, r1
 8005998:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800599c:	428a      	cmp	r2, r1
 800599e:	dcec      	bgt.n	800597a <scalbn+0x62>
 80059a0:	2a00      	cmp	r2, #0
 80059a2:	dd08      	ble.n	80059b6 <scalbn+0x9e>
 80059a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80059a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80059b0:	ec45 4b10 	vmov	d0, r4, r5
 80059b4:	bd70      	pop	{r4, r5, r6, pc}
 80059b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80059ba:	da08      	bge.n	80059ce <scalbn+0xb6>
 80059bc:	2d00      	cmp	r5, #0
 80059be:	a10a      	add	r1, pc, #40	; (adr r1, 80059e8 <scalbn+0xd0>)
 80059c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059c4:	dac0      	bge.n	8005948 <scalbn+0x30>
 80059c6:	a10e      	add	r1, pc, #56	; (adr r1, 8005a00 <scalbn+0xe8>)
 80059c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059cc:	e7bc      	b.n	8005948 <scalbn+0x30>
 80059ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80059d2:	3236      	adds	r2, #54	; 0x36
 80059d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80059d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80059dc:	4620      	mov	r0, r4
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <scalbn+0xf8>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	e7d5      	b.n	8005990 <scalbn+0x78>
 80059e4:	f3af 8000 	nop.w
 80059e8:	c2f8f359 	.word	0xc2f8f359
 80059ec:	01a56e1f 	.word	0x01a56e1f
 80059f0:	8800759c 	.word	0x8800759c
 80059f4:	7e37e43c 	.word	0x7e37e43c
 80059f8:	8800759c 	.word	0x8800759c
 80059fc:	fe37e43c 	.word	0xfe37e43c
 8005a00:	c2f8f359 	.word	0xc2f8f359
 8005a04:	81a56e1f 	.word	0x81a56e1f
 8005a08:	43500000 	.word	0x43500000
 8005a0c:	ffff3cb0 	.word	0xffff3cb0
 8005a10:	3c900000 	.word	0x3c900000

08005a14 <with_errno>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	4604      	mov	r4, r0
 8005a18:	460d      	mov	r5, r1
 8005a1a:	4616      	mov	r6, r2
 8005a1c:	f7fe fd2e 	bl	800447c <__errno>
 8005a20:	4629      	mov	r1, r5
 8005a22:	6006      	str	r6, [r0, #0]
 8005a24:	4620      	mov	r0, r4
 8005a26:	bd70      	pop	{r4, r5, r6, pc}

08005a28 <xflow>:
 8005a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a2a:	4614      	mov	r4, r2
 8005a2c:	461d      	mov	r5, r3
 8005a2e:	b108      	cbz	r0, 8005a34 <xflow+0xc>
 8005a30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a34:	e9cd 2300 	strd	r2, r3, [sp]
 8005a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f7fa fdf2 	bl	8000628 <__aeabi_dmul>
 8005a44:	2222      	movs	r2, #34	; 0x22
 8005a46:	b003      	add	sp, #12
 8005a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a4c:	f7ff bfe2 	b.w	8005a14 <with_errno>

08005a50 <__math_uflow>:
 8005a50:	b508      	push	{r3, lr}
 8005a52:	2200      	movs	r2, #0
 8005a54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a58:	f7ff ffe6 	bl	8005a28 <xflow>
 8005a5c:	ec41 0b10 	vmov	d0, r0, r1
 8005a60:	bd08      	pop	{r3, pc}

08005a62 <__math_oflow>:
 8005a62:	b508      	push	{r3, lr}
 8005a64:	2200      	movs	r2, #0
 8005a66:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005a6a:	f7ff ffdd 	bl	8005a28 <xflow>
 8005a6e:	ec41 0b10 	vmov	d0, r0, r1
 8005a72:	bd08      	pop	{r3, pc}

08005a74 <__ieee754_sqrt>:
 8005a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	ec55 4b10 	vmov	r4, r5, d0
 8005a7c:	4e67      	ldr	r6, [pc, #412]	; (8005c1c <__ieee754_sqrt+0x1a8>)
 8005a7e:	43ae      	bics	r6, r5
 8005a80:	ee10 0a10 	vmov	r0, s0
 8005a84:	ee10 2a10 	vmov	r2, s0
 8005a88:	4629      	mov	r1, r5
 8005a8a:	462b      	mov	r3, r5
 8005a8c:	d10d      	bne.n	8005aaa <__ieee754_sqrt+0x36>
 8005a8e:	f7fa fdcb 	bl	8000628 <__aeabi_dmul>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f7fa fc0f 	bl	80002bc <__adddf3>
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	460d      	mov	r5, r1
 8005aa2:	ec45 4b10 	vmov	d0, r4, r5
 8005aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	dc0b      	bgt.n	8005ac6 <__ieee754_sqrt+0x52>
 8005aae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005ab2:	4326      	orrs	r6, r4
 8005ab4:	d0f5      	beq.n	8005aa2 <__ieee754_sqrt+0x2e>
 8005ab6:	b135      	cbz	r5, 8005ac6 <__ieee754_sqrt+0x52>
 8005ab8:	f7fa fbfe 	bl	80002b8 <__aeabi_dsub>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	f7fa fedc 	bl	800087c <__aeabi_ddiv>
 8005ac4:	e7eb      	b.n	8005a9e <__ieee754_sqrt+0x2a>
 8005ac6:	1509      	asrs	r1, r1, #20
 8005ac8:	f000 808d 	beq.w	8005be6 <__ieee754_sqrt+0x172>
 8005acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8005ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad8:	07c9      	lsls	r1, r1, #31
 8005ada:	bf5c      	itt	pl
 8005adc:	005b      	lslpl	r3, r3, #1
 8005ade:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8005ae2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ae6:	bf58      	it	pl
 8005ae8:	0052      	lslpl	r2, r2, #1
 8005aea:	2500      	movs	r5, #0
 8005aec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005af0:	1076      	asrs	r6, r6, #1
 8005af2:	0052      	lsls	r2, r2, #1
 8005af4:	f04f 0e16 	mov.w	lr, #22
 8005af8:	46ac      	mov	ip, r5
 8005afa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005afe:	eb0c 0001 	add.w	r0, ip, r1
 8005b02:	4298      	cmp	r0, r3
 8005b04:	bfde      	ittt	le
 8005b06:	1a1b      	suble	r3, r3, r0
 8005b08:	eb00 0c01 	addle.w	ip, r0, r1
 8005b0c:	186d      	addle	r5, r5, r1
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	f1be 0e01 	subs.w	lr, lr, #1
 8005b14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005b18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005b1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005b20:	d1ed      	bne.n	8005afe <__ieee754_sqrt+0x8a>
 8005b22:	4674      	mov	r4, lr
 8005b24:	2720      	movs	r7, #32
 8005b26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005b2a:	4563      	cmp	r3, ip
 8005b2c:	eb01 000e 	add.w	r0, r1, lr
 8005b30:	dc02      	bgt.n	8005b38 <__ieee754_sqrt+0xc4>
 8005b32:	d113      	bne.n	8005b5c <__ieee754_sqrt+0xe8>
 8005b34:	4290      	cmp	r0, r2
 8005b36:	d811      	bhi.n	8005b5c <__ieee754_sqrt+0xe8>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	eb00 0e01 	add.w	lr, r0, r1
 8005b3e:	da57      	bge.n	8005bf0 <__ieee754_sqrt+0x17c>
 8005b40:	f1be 0f00 	cmp.w	lr, #0
 8005b44:	db54      	blt.n	8005bf0 <__ieee754_sqrt+0x17c>
 8005b46:	f10c 0801 	add.w	r8, ip, #1
 8005b4a:	eba3 030c 	sub.w	r3, r3, ip
 8005b4e:	4290      	cmp	r0, r2
 8005b50:	bf88      	it	hi
 8005b52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005b56:	1a12      	subs	r2, r2, r0
 8005b58:	440c      	add	r4, r1
 8005b5a:	46c4      	mov	ip, r8
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	3f01      	subs	r7, #1
 8005b60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005b64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005b68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005b6c:	d1dd      	bne.n	8005b2a <__ieee754_sqrt+0xb6>
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	d01b      	beq.n	8005baa <__ieee754_sqrt+0x136>
 8005b72:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005c20 <__ieee754_sqrt+0x1ac>
 8005b76:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005c24 <__ieee754_sqrt+0x1b0>
 8005b7a:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b7e:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b82:	f7fa fb99 	bl	80002b8 <__aeabi_dsub>
 8005b86:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4640      	mov	r0, r8
 8005b90:	4649      	mov	r1, r9
 8005b92:	f7fa ffc5 	bl	8000b20 <__aeabi_dcmple>
 8005b96:	b140      	cbz	r0, 8005baa <__ieee754_sqrt+0x136>
 8005b98:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005b9c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005ba0:	e9db 2300 	ldrd	r2, r3, [fp]
 8005ba4:	d126      	bne.n	8005bf4 <__ieee754_sqrt+0x180>
 8005ba6:	3501      	adds	r5, #1
 8005ba8:	463c      	mov	r4, r7
 8005baa:	106a      	asrs	r2, r5, #1
 8005bac:	0863      	lsrs	r3, r4, #1
 8005bae:	07e9      	lsls	r1, r5, #31
 8005bb0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005bb4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005bb8:	bf48      	it	mi
 8005bba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005bbe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8005bc2:	461c      	mov	r4, r3
 8005bc4:	e76d      	b.n	8005aa2 <__ieee754_sqrt+0x2e>
 8005bc6:	0ad3      	lsrs	r3, r2, #11
 8005bc8:	3815      	subs	r0, #21
 8005bca:	0552      	lsls	r2, r2, #21
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0fa      	beq.n	8005bc6 <__ieee754_sqrt+0x152>
 8005bd0:	02dc      	lsls	r4, r3, #11
 8005bd2:	d50a      	bpl.n	8005bea <__ieee754_sqrt+0x176>
 8005bd4:	f1c1 0420 	rsb	r4, r1, #32
 8005bd8:	fa22 f404 	lsr.w	r4, r2, r4
 8005bdc:	1e4d      	subs	r5, r1, #1
 8005bde:	408a      	lsls	r2, r1
 8005be0:	4323      	orrs	r3, r4
 8005be2:	1b41      	subs	r1, r0, r5
 8005be4:	e772      	b.n	8005acc <__ieee754_sqrt+0x58>
 8005be6:	4608      	mov	r0, r1
 8005be8:	e7f0      	b.n	8005bcc <__ieee754_sqrt+0x158>
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	3101      	adds	r1, #1
 8005bee:	e7ef      	b.n	8005bd0 <__ieee754_sqrt+0x15c>
 8005bf0:	46e0      	mov	r8, ip
 8005bf2:	e7aa      	b.n	8005b4a <__ieee754_sqrt+0xd6>
 8005bf4:	f7fa fb62 	bl	80002bc <__adddf3>
 8005bf8:	e9da 8900 	ldrd	r8, r9, [sl]
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa ff82 	bl	8000b0c <__aeabi_dcmplt>
 8005c08:	b120      	cbz	r0, 8005c14 <__ieee754_sqrt+0x1a0>
 8005c0a:	1ca0      	adds	r0, r4, #2
 8005c0c:	bf08      	it	eq
 8005c0e:	3501      	addeq	r5, #1
 8005c10:	3402      	adds	r4, #2
 8005c12:	e7ca      	b.n	8005baa <__ieee754_sqrt+0x136>
 8005c14:	3401      	adds	r4, #1
 8005c16:	f024 0401 	bic.w	r4, r4, #1
 8005c1a:	e7c6      	b.n	8005baa <__ieee754_sqrt+0x136>
 8005c1c:	7ff00000 	.word	0x7ff00000
 8005c20:	20000060 	.word	0x20000060
 8005c24:	20000068 	.word	0x20000068

08005c28 <_init>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

08005c34 <_fini>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr
