
I2c_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004084  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d0  080042d0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d8  080042d8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080042e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  0800433c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800433c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b66f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de4  00000000  00000000  0002b73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002d528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b8  00000000  00000000  0002df18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d68  00000000  00000000  0002e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f07a  00000000  00000000  00050438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cadee  00000000  00000000  0005f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d20  00000000  00000000  0012a2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0012cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800423c 	.word	0x0800423c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800423c 	.word	0x0800423c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b36      	ldr	r3, [pc, #216]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a35      	ldr	r2, [pc, #212]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <MX_GPIO_Init+0xf4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_GPIO_Init+0xf4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2120      	movs	r1, #32
 8000646:	481b      	ldr	r0, [pc, #108]	; (80006b4 <MX_GPIO_Init+0xf8>)
 8000648:	f000 ff0e 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000652:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4815      	ldr	r0, [pc, #84]	; (80006b8 <MX_GPIO_Init+0xfc>)
 8000664:	f000 fd6c 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000668:	2320      	movs	r3, #32
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	480d      	ldr	r0, [pc, #52]	; (80006b4 <MX_GPIO_Init+0xf8>)
 8000680:	f000 fd5e 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000684:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068a:	2312      	movs	r3, #18
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000696:	2304      	movs	r3, #4
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4806      	ldr	r0, [pc, #24]	; (80006bc <MX_GPIO_Init+0x100>)
 80006a2:	f000 fd4d 	bl	8001140 <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020400 	.word	0x40020400

080006c0 <MX_I2C1_Init>:
#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_I2C1_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_I2C1_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_I2C1_Init+0x50>)
 80006de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_I2C1_Init+0x50>)
 80006fe:	f000 fecd 	bl	800149c <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 f8f0 	bl	80008ec <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000078 	.word	0x20000078
 8000714:	40005400 	.word	0x40005400
 8000718:	000186a0 	.word	0x000186a0

0800071c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <HAL_I2C_MspInit+0x84>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d12c      	bne.n	8000798 <HAL_I2C_MspInit+0x7c>
  {
    __HAL_RCC_I2C1_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_I2C_MspInit+0x88>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000776:	f44f 7340 	mov.w	r3, #768	; 0x300
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077c:	2312      	movs	r3, #18
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000788:	2304      	movs	r3, #4
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <HAL_I2C_MspInit+0x8c>)
 8000794:	f000 fcd4 	bl	8001140 <HAL_GPIO_Init>
  }
}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	; 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40005400 	.word	0x40005400
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400

080007ac <main>:
#include "rtc.h"

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int main(void) {
 80007ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ae:	b097      	sub	sp, #92	; 0x5c
 80007b0:	af06      	add	r7, sp, #24
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80007b2:	f000 fb49 	bl	8000e48 <HAL_Init>
  SystemClock_Config();
 80007b6:	f000 f851 	bl	800085c <SystemClock_Config>
  MX_GPIO_Init();
 80007ba:	f7ff feff 	bl	80005bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007be:	f000 fa95 	bl	8000cec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007c2:	f7ff ff7d 	bl	80006c0 <MX_I2C1_Init>

  /* Set RTC time and date (e.g., 2023-06-19 12:34:56) */
  RTC_SetTime(11, 30, 30);
 80007c6:	221e      	movs	r2, #30
 80007c8:	211e      	movs	r1, #30
 80007ca:	200b      	movs	r0, #11
 80007cc:	f000 f892 	bl	80008f4 <RTC_SetTime>
  RTC_SetDate(19, 6, 2024);
 80007d0:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 80007d4:	2106      	movs	r1, #6
 80007d6:	2013      	movs	r0, #19
 80007d8:	f000 f8f4 	bl	80009c4 <RTC_SetDate>
  while (1) {
    uint8_t hours, minutes, seconds, day, month;
    uint16_t year;

    /* Read RTC time and date */
    RTC_GetTime(&hours, &minutes, &seconds);
 80007dc:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 80007e0:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 80007e4:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f95d 	bl	8000aa8 <RTC_GetTime>
    RTC_GetDate(&day, &month, &year);
 80007ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007f2:	f107 013b 	add.w	r1, r7, #59	; 0x3b
 80007f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f99e 	bl	8000b3c <RTC_GetDate>

    /* Print time and date over UART */
    char buffer[50];
    snprintf(buffer, sizeof(buffer), "Time: %02d:%02d:%02d, Date: %02d-%02d-%04d\r\n", hours, minutes, seconds, day, month, year);
 8000800:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000804:	461e      	mov	r6, r3
 8000806:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800080a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800080e:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 8000812:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8000816:	4604      	mov	r4, r0
 8000818:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 800081a:	4605      	mov	r5, r0
 800081c:	1d38      	adds	r0, r7, #4
 800081e:	9504      	str	r5, [sp, #16]
 8000820:	9403      	str	r4, [sp, #12]
 8000822:	9102      	str	r1, [sp, #8]
 8000824:	9201      	str	r2, [sp, #4]
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	4633      	mov	r3, r6
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <main+0xa8>)
 800082c:	2132      	movs	r1, #50	; 0x32
 800082e:	f003 f84d 	bl	80038cc <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fceb 	bl	8000210 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	1d39      	adds	r1, r7, #4
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <main+0xac>)
 8000846:	f002 fc85 	bl	8003154 <HAL_UART_Transmit>

    /* Delay 1 second */
    HAL_Delay(1000);
 800084a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084e:	f000 fb6d 	bl	8000f2c <HAL_Delay>
  while (1) {
 8000852:	e7c3      	b.n	80007dc <main+0x30>
 8000854:	08004254 	.word	0x08004254
 8000858:	200000d0 	.word	0x200000d0

0800085c <SystemClock_Config>:
  }
}
void SystemClock_Config(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b092      	sub	sp, #72	; 0x48
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2234      	movs	r2, #52	; 0x34
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f003 f862 	bl	8003934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087e:	2301      	movs	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000886:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000892:	2308      	movs	r3, #8
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000896:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 f965 	bl	8002b78 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x5c>
    Error_Handler();
 80008b4:	f000 f81a 	bl	80008ec <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80008d0:	463b      	mov	r3, r7
 80008d2:	2105      	movs	r1, #5
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fe05 	bl	80024e4 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x88>
    Error_Handler();
 80008e0:	f000 f804 	bl	80008ec <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3748      	adds	r7, #72	; 0x48
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Error_Handler>:

void Error_Handler(void) {
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  while (1) {
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x4>
	...

080008f4 <RTC_SetTime>:
#include "i2c.h"


#define RTC_ADDRESS (0x68 << 1)  // Replace with your RTC module's I2C address

void RTC_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af04      	add	r7, sp, #16
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
 80008fe:	460b      	mov	r3, r1
 8000900:	71bb      	strb	r3, [r7, #6]
 8000902:	4613      	mov	r3, r2
 8000904:	717b      	strb	r3, [r7, #5]
  uint8_t data[3];
  data[0] = (seconds / 10 << 4) | (seconds % 10);  // Convert to BCD
 8000906:	797b      	ldrb	r3, [r7, #5]
 8000908:	4a2c      	ldr	r2, [pc, #176]	; (80009bc <RTC_SetTime+0xc8>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	b258      	sxtb	r0, r3
 8000916:	797a      	ldrb	r2, [r7, #5]
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <RTC_SetTime+0xc8>)
 800091a:	fba3 1302 	umull	r1, r3, r3, r2
 800091e:	08d9      	lsrs	r1, r3, #3
 8000920:	460b      	mov	r3, r1
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	b25b      	sxtb	r3, r3
 800092e:	4303      	orrs	r3, r0
 8000930:	b25b      	sxtb	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	733b      	strb	r3, [r7, #12]
  data[1] = (minutes / 10 << 4) | (minutes % 10);  // Convert to BCD
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	4a20      	ldr	r2, [pc, #128]	; (80009bc <RTC_SetTime+0xc8>)
 800093a:	fba2 2303 	umull	r2, r3, r2, r3
 800093e:	08db      	lsrs	r3, r3, #3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	b258      	sxtb	r0, r3
 8000946:	79ba      	ldrb	r2, [r7, #6]
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <RTC_SetTime+0xc8>)
 800094a:	fba3 1302 	umull	r1, r3, r3, r2
 800094e:	08d9      	lsrs	r1, r3, #3
 8000950:	460b      	mov	r3, r1
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	440b      	add	r3, r1
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	b25b      	sxtb	r3, r3
 800095e:	4303      	orrs	r3, r0
 8000960:	b25b      	sxtb	r3, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	737b      	strb	r3, [r7, #13]
  data[2] = (hours / 10 << 4) | (hours % 10);      // Convert to BCD
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <RTC_SetTime+0xc8>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	08db      	lsrs	r3, r3, #3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	b258      	sxtb	r0, r3
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <RTC_SetTime+0xc8>)
 800097a:	fba3 1302 	umull	r1, r3, r3, r2
 800097e:	08d9      	lsrs	r1, r3, #3
 8000980:	460b      	mov	r3, r1
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	b25b      	sxtb	r3, r3
 800098e:	4303      	orrs	r3, r0
 8000990:	b25b      	sxtb	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Write(&hi2c1, RTC_ADDRESS, 0x00, 1, data, 3, HAL_MAX_DELAY);
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	9302      	str	r3, [sp, #8]
 800099c:	2303      	movs	r3, #3
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2301      	movs	r3, #1
 80009a8:	2200      	movs	r2, #0
 80009aa:	21d0      	movs	r1, #208	; 0xd0
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <RTC_SetTime+0xcc>)
 80009ae:	f000 feb9 	bl	8001724 <HAL_I2C_Mem_Write>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	cccccccd 	.word	0xcccccccd
 80009c0:	20000078 	.word	0x20000078

080009c4 <RTC_SetDate>:

void RTC_SetDate(uint8_t day, uint8_t month, uint16_t year) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af04      	add	r7, sp, #16
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	460b      	mov	r3, r1
 80009d0:	71bb      	strb	r3, [r7, #6]
 80009d2:	4613      	mov	r3, r2
 80009d4:	80bb      	strh	r3, [r7, #4]
  uint8_t data[3];
  data[0] = (day / 10 << 4) | (day % 10);          // Convert to BCD
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a30      	ldr	r2, [pc, #192]	; (8000a9c <RTC_SetDate+0xd8>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	011b      	lsls	r3, r3, #4
 80009e4:	b258      	sxtb	r0, r3
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <RTC_SetDate+0xd8>)
 80009ea:	fba3 1302 	umull	r1, r3, r3, r2
 80009ee:	08d9      	lsrs	r1, r3, #3
 80009f0:	460b      	mov	r3, r1
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	440b      	add	r3, r1
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	4303      	orrs	r3, r0
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	733b      	strb	r3, [r7, #12]
  data[1] = (month / 10 << 4) | (month % 10);      // Convert to BCD
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <RTC_SetDate+0xd8>)
 8000a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0e:	08db      	lsrs	r3, r3, #3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	b258      	sxtb	r0, r3
 8000a16:	79ba      	ldrb	r2, [r7, #6]
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <RTC_SetDate+0xd8>)
 8000a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a1e:	08d9      	lsrs	r1, r3, #3
 8000a20:	460b      	mov	r3, r1
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	440b      	add	r3, r1
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	4303      	orrs	r3, r0
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	737b      	strb	r3, [r7, #13]
  data[2] = ((year % 100) / 10 << 4) | (year % 10);// Convert to BCD
 8000a36:	88bb      	ldrh	r3, [r7, #4]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <RTC_SetDate+0xdc>)
 8000a3a:	fba2 1203 	umull	r1, r2, r2, r3
 8000a3e:	0952      	lsrs	r2, r2, #5
 8000a40:	2164      	movs	r1, #100	; 0x64
 8000a42:	fb01 f202 	mul.w	r2, r1, r2
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <RTC_SetDate+0xd8>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	08db      	lsrs	r3, r3, #3
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	b258      	sxtb	r0, r3
 8000a58:	88ba      	ldrh	r2, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <RTC_SetDate+0xd8>)
 8000a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000a60:	08d9      	lsrs	r1, r3, #3
 8000a62:	460b      	mov	r3, r1
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	4303      	orrs	r3, r0
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Write(&hi2c1, RTC_ADDRESS, 0x04, 1, data, 3, HAL_MAX_DELAY);
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	9302      	str	r3, [sp, #8]
 8000a7e:	2303      	movs	r3, #3
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	21d0      	movs	r1, #208	; 0xd0
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <RTC_SetDate+0xe0>)
 8000a90:	f000 fe48 	bl	8001724 <HAL_I2C_Mem_Write>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	cccccccd 	.word	0xcccccccd
 8000aa0:	51eb851f 	.word	0x51eb851f
 8000aa4:	20000078 	.word	0x20000078

08000aa8 <RTC_GetTime>:

void RTC_GetTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af04      	add	r7, sp, #16
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint8_t data[3];
  HAL_I2C_Mem_Read(&hi2c1, RTC_ADDRESS, 0x00, 1, data, 3, HAL_MAX_DELAY);
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	9302      	str	r3, [sp, #8]
 8000aba:	2303      	movs	r3, #3
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	21d0      	movs	r1, #208	; 0xd0
 8000aca:	481b      	ldr	r0, [pc, #108]	; (8000b38 <RTC_GetTime+0x90>)
 8000acc:	f000 ff24 	bl	8001918 <HAL_I2C_Mem_Read>
  *seconds = (data[0] >> 4) * 10 + (data[0] & 0x0F);
 8000ad0:	7d3b      	ldrb	r3, [r7, #20]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	7d3b      	ldrb	r3, [r7, #20]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	701a      	strb	r2, [r3, #0]
  *minutes = (data[1] >> 4) * 10 + (data[1] & 0x0F);
 8000af0:	7d7b      	ldrb	r3, [r7, #21]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	4413      	add	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	7d7b      	ldrb	r3, [r7, #21]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	701a      	strb	r2, [r3, #0]
  *hours   = (data[2] >> 4) * 10 + (data[2] & 0x0F);
 8000b10:	7dbb      	ldrb	r3, [r7, #22]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	7dbb      	ldrb	r3, [r7, #22]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	701a      	strb	r2, [r3, #0]
}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000078 	.word	0x20000078

08000b3c <RTC_GetDate>:

void RTC_GetDate(uint8_t *day, uint8_t *month, uint16_t *year) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af04      	add	r7, sp, #16
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint8_t data[3];
  HAL_I2C_Mem_Read(&hi2c1, RTC_ADDRESS, 0x04, 1, data, 3, HAL_MAX_DELAY);
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2303      	movs	r3, #3
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	21d0      	movs	r1, #208	; 0xd0
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <RTC_GetDate+0x9c>)
 8000b60:	f000 feda 	bl	8001918 <HAL_I2C_Mem_Read>
  *day     = (data[0] >> 4) * 10 + (data[0] & 0x0F);
 8000b64:	7d3b      	ldrb	r3, [r7, #20]
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	7d3b      	ldrb	r3, [r7, #20]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	701a      	strb	r2, [r3, #0]
  *month   = (data[1] >> 4) * 10 + (data[1] & 0x0F);
 8000b84:	7d7b      	ldrb	r3, [r7, #21]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	7d7b      	ldrb	r3, [r7, #21]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	701a      	strb	r2, [r3, #0]
  *year    = 2000 + (data[2] >> 4) * 10 + (data[2] & 0x0F);
 8000ba4:	7dbb      	ldrb	r3, [r7, #22]
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	0092      	lsls	r2, r2, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	7dbb      	ldrb	r3, [r7, #22]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	801a      	strh	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000078 	.word	0x20000078

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	f000 fa5c 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f938 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f002 fe48 	bl	8003944 <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20020000 	.word	0x20020000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	200000cc 	.word	0x200000cc
 8000ce8:	20000268 	.word	0x20000268

08000cec <MX_USART2_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart2;

void MX_USART2_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <MX_USART2_UART_Init+0x50>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f002 f9c6 	bl	80030b4 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d2e:	f7ff fddd 	bl	80008ec <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000d0 	.word	0x200000d0
 8000d3c:	40004400 	.word	0x40004400

08000d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12b      	bne.n	8000dba <HAL_UART_MspInit+0x7a>
  {
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000daa:	2307      	movs	r3, #7
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_UART_MspInit+0x8c>)
 8000db6:	f000 f9c3 	bl	8001140 <HAL_GPIO_Init>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dd4:	f000 f826 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f002 fda7 	bl	8003950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fcd3 	bl	80007ac <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e14:	080042e0 	.word	0x080042e0
  ldr r2, =_sbss
 8000e18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e1c:	20000264 	.word	0x20000264

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_Init+0x40>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_Init+0x40>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x40>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f931 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff feae 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f93b 	bl	8001126 <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f911 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000118 	.word	0x20000118

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000118 	.word	0x20000118

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff47 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff5c 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff8e 	bl	800102c <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffb0 	bl	8001094 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e165      	b.n	8001428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8154 	bne.w	8001422 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118e:	2b02      	cmp	r3, #2
 8001190:	d130      	bne.n	80011f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80ae 	beq.w	8001422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b5d      	ldr	r3, [pc, #372]	; (8001440 <HAL_GPIO_Init+0x300>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a5c      	ldr	r2, [pc, #368]	; (8001440 <HAL_GPIO_Init+0x300>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <HAL_GPIO_Init+0x300>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	4a58      	ldr	r2, [pc, #352]	; (8001444 <HAL_GPIO_Init+0x304>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4f      	ldr	r2, [pc, #316]	; (8001448 <HAL_GPIO_Init+0x308>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x21a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_GPIO_Init+0x30c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x216>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4d      	ldr	r2, [pc, #308]	; (8001450 <HAL_GPIO_Init+0x310>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x212>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x20e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4b      	ldr	r2, [pc, #300]	; (8001458 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x20a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4a      	ldr	r2, [pc, #296]	; (800145c <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x206>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a49      	ldr	r2, [pc, #292]	; (8001460 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x202>
 800133e:	2306      	movs	r3, #6
 8001340:	e00c      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001342:	2307      	movs	r3, #7
 8001344:	e00a      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001346:	2305      	movs	r3, #5
 8001348:	e008      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800134a:	2304      	movs	r3, #4
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800134e:	2303      	movs	r3, #3
 8001350:	e004      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001352:	2302      	movs	r3, #2
 8001354:	e002      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800135a:	2300      	movs	r3, #0
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	f002 0203 	and.w	r2, r2, #3
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	4093      	lsls	r3, r2
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136c:	4935      	ldr	r1, [pc, #212]	; (8001444 <HAL_GPIO_Init+0x304>)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137a:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <HAL_GPIO_Init+0x324>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139e:	4a31      	ldr	r2, [pc, #196]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c8:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_GPIO_Init+0x324>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	f67f ae96 	bls.w	800115c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40013800 	.word	0x40013800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40021000 	.word	0x40021000
 800145c:	40021400 	.word	0x40021400
 8001460:	40021800 	.word	0x40021800
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e12b      	b.n	8001706 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff f92a 	bl	800071c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001500:	f001 f8e2 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a81      	ldr	r2, [pc, #516]	; (8001710 <HAL_I2C_Init+0x274>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d807      	bhi.n	8001520 <HAL_I2C_Init+0x84>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a80      	ldr	r2, [pc, #512]	; (8001714 <HAL_I2C_Init+0x278>)
 8001514:	4293      	cmp	r3, r2
 8001516:	bf94      	ite	ls
 8001518:	2301      	movls	r3, #1
 800151a:	2300      	movhi	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	e006      	b.n	800152e <HAL_I2C_Init+0x92>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a7d      	ldr	r2, [pc, #500]	; (8001718 <HAL_I2C_Init+0x27c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	bf94      	ite	ls
 8001528:	2301      	movls	r3, #1
 800152a:	2300      	movhi	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0e7      	b.n	8001706 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4a78      	ldr	r2, [pc, #480]	; (800171c <HAL_I2C_Init+0x280>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	0c9b      	lsrs	r3, r3, #18
 8001540:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	430a      	orrs	r2, r1
 8001554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a6a      	ldr	r2, [pc, #424]	; (8001710 <HAL_I2C_Init+0x274>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d802      	bhi.n	8001570 <HAL_I2C_Init+0xd4>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3301      	adds	r3, #1
 800156e:	e009      	b.n	8001584 <HAL_I2C_Init+0xe8>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	4a69      	ldr	r2, [pc, #420]	; (8001720 <HAL_I2C_Init+0x284>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	3301      	adds	r3, #1
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	430b      	orrs	r3, r1
 800158a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001596:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	495c      	ldr	r1, [pc, #368]	; (8001710 <HAL_I2C_Init+0x274>)
 80015a0:	428b      	cmp	r3, r1
 80015a2:	d819      	bhi.n	80015d8 <HAL_I2C_Init+0x13c>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e59      	subs	r1, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b2:	1c59      	adds	r1, r3, #1
 80015b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015b8:	400b      	ands	r3, r1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <HAL_I2C_Init+0x138>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1e59      	subs	r1, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015cc:	3301      	adds	r3, #1
 80015ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d2:	e051      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 80015d4:	2304      	movs	r3, #4
 80015d6:	e04f      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <HAL_I2C_Init+0x168>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e58      	subs	r0, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	440b      	add	r3, r1
 80015ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	e012      	b.n	800162a <HAL_I2C_Init+0x18e>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1e58      	subs	r0, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	0099      	lsls	r1, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	fbb0 f3f3 	udiv	r3, r0, r3
 800161a:	3301      	adds	r3, #1
 800161c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Init+0x196>
 800162e:	2301      	movs	r3, #1
 8001630:	e022      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10e      	bne.n	8001658 <HAL_I2C_Init+0x1bc>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1e58      	subs	r0, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6859      	ldr	r1, [r3, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	440b      	add	r3, r1
 8001648:	fbb0 f3f3 	udiv	r3, r0, r3
 800164c:	3301      	adds	r3, #1
 800164e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001656:	e00f      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	0099      	lsls	r1, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	fbb0 f3f3 	udiv	r3, r0, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	6809      	ldr	r1, [r1, #0]
 800167c:	4313      	orrs	r3, r2
 800167e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6911      	ldr	r1, [r2, #16]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68d2      	ldr	r2, [r2, #12]
 80016b2:	4311      	orrs	r1, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	000186a0 	.word	0x000186a0
 8001714:	001e847f 	.word	0x001e847f
 8001718:	003d08ff 	.word	0x003d08ff
 800171c:	431bde83 	.word	0x431bde83
 8001720:	10624dd3 	.word	0x10624dd3

08001724 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4603      	mov	r3, r0
 8001734:	817b      	strh	r3, [r7, #10]
 8001736:	460b      	mov	r3, r1
 8001738:	813b      	strh	r3, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800173e:	f7ff fbe9 	bl	8000f14 <HAL_GetTick>
 8001742:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b20      	cmp	r3, #32
 800174e:	f040 80d9 	bne.w	8001904 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2319      	movs	r3, #25
 8001758:	2201      	movs	r2, #1
 800175a:	496d      	ldr	r1, [pc, #436]	; (8001910 <HAL_I2C_Mem_Write+0x1ec>)
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 fc8b 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001768:	2302      	movs	r3, #2
 800176a:	e0cc      	b.n	8001906 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_I2C_Mem_Write+0x56>
 8001776:	2302      	movs	r3, #2
 8001778:	e0c5      	b.n	8001906 <HAL_I2C_Mem_Write+0x1e2>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d007      	beq.n	80017a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2221      	movs	r2, #33	; 0x21
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a3a      	ldr	r2, [r7, #32]
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_I2C_Mem_Write+0x1f0>)
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017e2:	88f8      	ldrh	r0, [r7, #6]
 80017e4:	893a      	ldrh	r2, [r7, #8]
 80017e6:	8979      	ldrh	r1, [r7, #10]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4603      	mov	r3, r0
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 fac2 	bl	8001d7c <I2C_RequestMemoryWrite>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d052      	beq.n	80018a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e081      	b.n	8001906 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fd50 	bl	80022ac <I2C_WaitOnTXEFlagUntilTimeout>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00d      	beq.n	800182e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2b04      	cmp	r3, #4
 8001818:	d107      	bne.n	800182a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001828:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06b      	b.n	8001906 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b04      	cmp	r3, #4
 800186a:	d11b      	bne.n	80018a4 <HAL_I2C_Mem_Write+0x180>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d017      	beq.n	80018a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1aa      	bne.n	8001802 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 fd43 	bl	800233c <I2C_WaitOnBTFFlagUntilTimeout>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00d      	beq.n	80018d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d107      	bne.n	80018d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e016      	b.n	8001906 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001904:	2302      	movs	r3, #2
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	00100002 	.word	0x00100002
 8001914:	ffff0000 	.word	0xffff0000

08001918 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af02      	add	r7, sp, #8
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	4608      	mov	r0, r1
 8001922:	4611      	mov	r1, r2
 8001924:	461a      	mov	r2, r3
 8001926:	4603      	mov	r3, r0
 8001928:	817b      	strh	r3, [r7, #10]
 800192a:	460b      	mov	r3, r1
 800192c:	813b      	strh	r3, [r7, #8]
 800192e:	4613      	mov	r3, r2
 8001930:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001932:	f7ff faef 	bl	8000f14 <HAL_GetTick>
 8001936:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b20      	cmp	r3, #32
 8001942:	f040 8214 	bne.w	8001d6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2319      	movs	r3, #25
 800194c:	2201      	movs	r2, #1
 800194e:	497b      	ldr	r1, [pc, #492]	; (8001b3c <HAL_I2C_Mem_Read+0x224>)
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 fb91 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800195c:	2302      	movs	r3, #2
 800195e:	e207      	b.n	8001d70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_I2C_Mem_Read+0x56>
 800196a:	2302      	movs	r3, #2
 800196c:	e200      	b.n	8001d70 <HAL_I2C_Mem_Read+0x458>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d007      	beq.n	8001994 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2222      	movs	r2, #34	; 0x22
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4a5b      	ldr	r2, [pc, #364]	; (8001b40 <HAL_I2C_Mem_Read+0x228>)
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019d6:	88f8      	ldrh	r0, [r7, #6]
 80019d8:	893a      	ldrh	r2, [r7, #8]
 80019da:	8979      	ldrh	r1, [r7, #10]
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4603      	mov	r3, r0
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 fa5e 	bl	8001ea8 <I2C_RequestMemoryRead>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e1bc      	b.n	8001d70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d113      	bne.n	8001a26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e190      	b.n	8001d48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d11b      	bne.n	8001a66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e170      	b.n	8001d48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	e150      	b.n	8001d48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001abc:	e144      	b.n	8001d48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	f200 80f1 	bhi.w	8001caa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d123      	bne.n	8001b18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 fc79 	bl	80023cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e145      	b.n	8001d70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b16:	e117      	b.n	8001d48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d14e      	bne.n	8001bbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b26:	2200      	movs	r2, #0
 8001b28:	4906      	ldr	r1, [pc, #24]	; (8001b44 <HAL_I2C_Mem_Read+0x22c>)
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 faa4 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d008      	beq.n	8001b48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e11a      	b.n	8001d70 <HAL_I2C_Mem_Read+0x458>
 8001b3a:	bf00      	nop
 8001b3c:	00100002 	.word	0x00100002
 8001b40:	ffff0000 	.word	0xffff0000
 8001b44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bbc:	e0c4      	b.n	8001d48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	496c      	ldr	r1, [pc, #432]	; (8001d78 <HAL_I2C_Mem_Read+0x460>)
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 fa55 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0cb      	b.n	8001d70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c20:	2200      	movs	r2, #0
 8001c22:	4955      	ldr	r1, [pc, #340]	; (8001d78 <HAL_I2C_Mem_Read+0x460>)
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fa27 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e09d      	b.n	8001d70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ca8:	e04e      	b.n	8001d48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fb8c 	bl	80023cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e058      	b.n	8001d70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d124      	bne.n	8001d48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f47f aeb6 	bne.w	8001abe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001d6e:	2302      	movs	r3, #2
  }
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	00010004 	.word	0x00010004

08001d7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f960 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dcc:	d103      	bne.n	8001dd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e05f      	b.n	8001e9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001de8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	6a3a      	ldr	r2, [r7, #32]
 8001dee:	492d      	ldr	r1, [pc, #180]	; (8001ea4 <I2C_RequestMemoryWrite+0x128>)
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f9bb 	bl	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e04c      	b.n	8001e9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	6a39      	ldr	r1, [r7, #32]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fa46 	bl	80022ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00d      	beq.n	8001e42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d107      	bne.n	8001e3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e02b      	b.n	8001e9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e48:	893b      	ldrh	r3, [r7, #8]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	611a      	str	r2, [r3, #16]
 8001e52:	e021      	b.n	8001e98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e54:	893b      	ldrh	r3, [r7, #8]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fa20 	bl	80022ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d107      	bne.n	8001e8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e005      	b.n	8001e9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e8e:	893b      	ldrh	r3, [r7, #8]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	00010002 	.word	0x00010002

08001ea8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	4608      	mov	r0, r1
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	817b      	strh	r3, [r7, #10]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	813b      	strh	r3, [r7, #8]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f8c2 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00d      	beq.n	8001f16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f08:	d103      	bne.n	8001f12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0aa      	b.n	800206c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f16:	897b      	ldrh	r3, [r7, #10]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	6a3a      	ldr	r2, [r7, #32]
 8001f2a:	4952      	ldr	r1, [pc, #328]	; (8002074 <I2C_RequestMemoryRead+0x1cc>)
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f91d 	bl	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e097      	b.n	800206c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f9a8 	bl	80022ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d107      	bne.n	8001f7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e076      	b.n	800206c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f84:	893b      	ldrh	r3, [r7, #8]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	e021      	b.n	8001fd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f90:	893b      	ldrh	r3, [r7, #8]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	6a39      	ldr	r1, [r7, #32]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f982 	bl	80022ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d107      	bne.n	8001fc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e050      	b.n	800206c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fca:	893b      	ldrh	r3, [r7, #8]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd6:	6a39      	ldr	r1, [r7, #32]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f967 	bl	80022ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d107      	bne.n	8001ffc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e035      	b.n	800206c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2200      	movs	r2, #0
 8002018:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f82b 	bl	8002078 <I2C_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002036:	d103      	bne.n	8002040 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e013      	b.n	800206c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002044:	897b      	ldrh	r3, [r7, #10]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	6a3a      	ldr	r2, [r7, #32]
 8002058:	4906      	ldr	r1, [pc, #24]	; (8002074 <I2C_RequestMemoryRead+0x1cc>)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f886 	bl	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	00010002 	.word	0x00010002

08002078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002088:	e048      	b.n	800211c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d044      	beq.n	800211c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002092:	f7fe ff3f 	bl	8000f14 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d139      	bne.n	800211c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	0c1b      	lsrs	r3, r3, #16
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d10d      	bne.n	80020ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	43da      	mvns	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	4013      	ands	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	e00c      	b.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	43da      	mvns	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4013      	ands	r3, r2
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d116      	bne.n	800211c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f043 0220 	orr.w	r2, r3, #32
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e023      	b.n	8002164 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	0c1b      	lsrs	r3, r3, #16
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10d      	bne.n	8002142 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	43da      	mvns	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4013      	ands	r3, r2
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	e00c      	b.n	800215c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	43da      	mvns	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	4013      	ands	r3, r2
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	429a      	cmp	r2, r3
 8002160:	d093      	beq.n	800208a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800217a:	e071      	b.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218a:	d123      	bne.n	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f043 0204 	orr.w	r2, r3, #4
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e067      	b.n	80022a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021da:	d041      	beq.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021dc:	f7fe fe9a 	bl	8000f14 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d302      	bcc.n	80021f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d136      	bne.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d10c      	bne.n	8002216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4013      	ands	r3, r2
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf14      	ite	ne
 800220e:	2301      	movne	r3, #1
 8002210:	2300      	moveq	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	e00b      	b.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	43da      	mvns	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4013      	ands	r3, r2
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d016      	beq.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e021      	b.n	80022a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10c      	bne.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	43da      	mvns	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4013      	ands	r3, r2
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e00b      	b.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4013      	ands	r3, r2
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	f47f af6d 	bne.w	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b8:	e034      	b.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f8e3 	bl	8002486 <I2C_IsAcknowledgeFailed>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e034      	b.n	8002334 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d028      	beq.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d2:	f7fe fe1f 	bl	8000f14 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d11d      	bne.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	2b80      	cmp	r3, #128	; 0x80
 80022f4:	d016      	beq.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f043 0220 	orr.w	r2, r3, #32
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e007      	b.n	8002334 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b80      	cmp	r3, #128	; 0x80
 8002330:	d1c3      	bne.n	80022ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002348:	e034      	b.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f89b 	bl	8002486 <I2C_IsAcknowledgeFailed>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e034      	b.n	80023c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d028      	beq.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002362:	f7fe fdd7 	bl	8000f14 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	429a      	cmp	r2, r3
 8002370:	d302      	bcc.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d11d      	bne.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d016      	beq.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e007      	b.n	80023c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d1c3      	bne.n	800234a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023d8:	e049      	b.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b10      	cmp	r3, #16
 80023e6:	d119      	bne.n	800241c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0210 	mvn.w	r2, #16
 80023f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e030      	b.n	800247e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241c:	f7fe fd7a 	bl	8000f14 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	429a      	cmp	r2, r3
 800242a:	d302      	bcc.n	8002432 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11d      	bne.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d016      	beq.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e007      	b.n	800247e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d1ae      	bne.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249c:	d11b      	bne.n	80024d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f043 0204 	orr.w	r2, r3, #4
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0cc      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b68      	ldr	r3, [pc, #416]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d90c      	bls.n	8002520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800255a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	494d      	ldr	r1, [pc, #308]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d044      	beq.n	8002604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d119      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e067      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4934      	ldr	r1, [pc, #208]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d4:	f7fe fc9e 	bl	8000f14 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7fe fc9a 	bl	8000f14 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e04f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d20c      	bcs.n	800262c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e032      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4916      	ldr	r1, [pc, #88]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490e      	ldr	r1, [pc, #56]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800266a:	f000 f855 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490a      	ldr	r1, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fbfe 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	08004284 	.word	0x08004284
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08004294 	.word	0x08004294

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f4:	f7ff ffdc 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0b5b      	lsrs	r3, r3, #13
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	08004294 	.word	0x08004294

08002718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800271c:	b0ae      	sub	sp, #184	; 0xb8
 800271e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800273e:	4bcb      	ldr	r3, [pc, #812]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b0c      	cmp	r3, #12
 8002748:	f200 8206 	bhi.w	8002b58 <HAL_RCC_GetSysClockFreq+0x440>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_RCC_GetSysClockFreq+0x3c>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002789 	.word	0x08002789
 8002758:	08002b59 	.word	0x08002b59
 800275c:	08002b59 	.word	0x08002b59
 8002760:	08002b59 	.word	0x08002b59
 8002764:	08002791 	.word	0x08002791
 8002768:	08002b59 	.word	0x08002b59
 800276c:	08002b59 	.word	0x08002b59
 8002770:	08002b59 	.word	0x08002b59
 8002774:	08002799 	.word	0x08002799
 8002778:	08002b59 	.word	0x08002b59
 800277c:	08002b59 	.word	0x08002b59
 8002780:	08002b59 	.word	0x08002b59
 8002784:	08002989 	.word	0x08002989
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002788:	4bb9      	ldr	r3, [pc, #740]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x358>)
 800278a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800278e:	e1e7      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002790:	4bb8      	ldr	r3, [pc, #736]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002796:	e1e3      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002798:	4bb4      	ldr	r3, [pc, #720]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x354>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a4:	4bb1      	ldr	r3, [pc, #708]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x354>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d071      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b0:	4bae      	ldr	r3, [pc, #696]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x354>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	2200      	movs	r2, #0
 80027b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027d6:	4622      	mov	r2, r4
 80027d8:	462b      	mov	r3, r5
 80027da:	f04f 0000 	mov.w	r0, #0
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	0159      	lsls	r1, r3, #5
 80027e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027e8:	0150      	lsls	r0, r2, #5
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4621      	mov	r1, r4
 80027f0:	1a51      	subs	r1, r2, r1
 80027f2:	6439      	str	r1, [r7, #64]	; 0x40
 80027f4:	4629      	mov	r1, r5
 80027f6:	eb63 0301 	sbc.w	r3, r3, r1
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002808:	4649      	mov	r1, r9
 800280a:	018b      	lsls	r3, r1, #6
 800280c:	4641      	mov	r1, r8
 800280e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002812:	4641      	mov	r1, r8
 8002814:	018a      	lsls	r2, r1, #6
 8002816:	4641      	mov	r1, r8
 8002818:	1a51      	subs	r1, r2, r1
 800281a:	63b9      	str	r1, [r7, #56]	; 0x38
 800281c:	4649      	mov	r1, r9
 800281e:	eb63 0301 	sbc.w	r3, r3, r1
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002830:	4649      	mov	r1, r9
 8002832:	00cb      	lsls	r3, r1, #3
 8002834:	4641      	mov	r1, r8
 8002836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283a:	4641      	mov	r1, r8
 800283c:	00ca      	lsls	r2, r1, #3
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	4603      	mov	r3, r0
 8002844:	4622      	mov	r2, r4
 8002846:	189b      	adds	r3, r3, r2
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
 800284a:	462b      	mov	r3, r5
 800284c:	460a      	mov	r2, r1
 800284e:	eb42 0303 	adc.w	r3, r2, r3
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002860:	4629      	mov	r1, r5
 8002862:	024b      	lsls	r3, r1, #9
 8002864:	4621      	mov	r1, r4
 8002866:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800286a:	4621      	mov	r1, r4
 800286c:	024a      	lsls	r2, r1, #9
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002876:	2200      	movs	r2, #0
 8002878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800287c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002880:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002884:	f7fd fd1c 	bl	80002c0 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4613      	mov	r3, r2
 800288e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002892:	e067      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80028a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80028ae:	2300      	movs	r3, #0
 80028b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80028b6:	4622      	mov	r2, r4
 80028b8:	462b      	mov	r3, r5
 80028ba:	f04f 0000 	mov.w	r0, #0
 80028be:	f04f 0100 	mov.w	r1, #0
 80028c2:	0159      	lsls	r1, r3, #5
 80028c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c8:	0150      	lsls	r0, r2, #5
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4621      	mov	r1, r4
 80028d0:	1a51      	subs	r1, r2, r1
 80028d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80028d4:	4629      	mov	r1, r5
 80028d6:	eb63 0301 	sbc.w	r3, r3, r1
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80028e8:	4649      	mov	r1, r9
 80028ea:	018b      	lsls	r3, r1, #6
 80028ec:	4641      	mov	r1, r8
 80028ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f2:	4641      	mov	r1, r8
 80028f4:	018a      	lsls	r2, r1, #6
 80028f6:	4641      	mov	r1, r8
 80028f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80028fc:	4649      	mov	r1, r9
 80028fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800290e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002912:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002916:	4692      	mov	sl, r2
 8002918:	469b      	mov	fp, r3
 800291a:	4623      	mov	r3, r4
 800291c:	eb1a 0303 	adds.w	r3, sl, r3
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	462b      	mov	r3, r5
 8002924:	eb4b 0303 	adc.w	r3, fp, r3
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002936:	4629      	mov	r1, r5
 8002938:	028b      	lsls	r3, r1, #10
 800293a:	4621      	mov	r1, r4
 800293c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002940:	4621      	mov	r1, r4
 8002942:	028a      	lsls	r2, r1, #10
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800294c:	2200      	movs	r2, #0
 800294e:	673b      	str	r3, [r7, #112]	; 0x70
 8002950:	677a      	str	r2, [r7, #116]	; 0x74
 8002952:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002956:	f7fd fcb3 	bl	80002c0 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4613      	mov	r3, r2
 8002960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002964:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	3301      	adds	r3, #1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800297a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002986:	e0eb      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002988:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x354>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002990:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x354>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d06b      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a0:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x354>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	2200      	movs	r2, #0
 80029a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80029aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b2:	663b      	str	r3, [r7, #96]	; 0x60
 80029b4:	2300      	movs	r3, #0
 80029b6:	667b      	str	r3, [r7, #100]	; 0x64
 80029b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80029bc:	4622      	mov	r2, r4
 80029be:	462b      	mov	r3, r5
 80029c0:	f04f 0000 	mov.w	r0, #0
 80029c4:	f04f 0100 	mov.w	r1, #0
 80029c8:	0159      	lsls	r1, r3, #5
 80029ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ce:	0150      	lsls	r0, r2, #5
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4621      	mov	r1, r4
 80029d6:	1a51      	subs	r1, r2, r1
 80029d8:	61b9      	str	r1, [r7, #24]
 80029da:	4629      	mov	r1, r5
 80029dc:	eb63 0301 	sbc.w	r3, r3, r1
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80029ee:	4659      	mov	r1, fp
 80029f0:	018b      	lsls	r3, r1, #6
 80029f2:	4651      	mov	r1, sl
 80029f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029f8:	4651      	mov	r1, sl
 80029fa:	018a      	lsls	r2, r1, #6
 80029fc:	4651      	mov	r1, sl
 80029fe:	ebb2 0801 	subs.w	r8, r2, r1
 8002a02:	4659      	mov	r1, fp
 8002a04:	eb63 0901 	sbc.w	r9, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a1c:	4690      	mov	r8, r2
 8002a1e:	4699      	mov	r9, r3
 8002a20:	4623      	mov	r3, r4
 8002a22:	eb18 0303 	adds.w	r3, r8, r3
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	462b      	mov	r3, r5
 8002a2a:	eb49 0303 	adc.w	r3, r9, r3
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	024b      	lsls	r3, r1, #9
 8002a40:	4621      	mov	r1, r4
 8002a42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a46:	4621      	mov	r1, r4
 8002a48:	024a      	lsls	r2, r1, #9
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a52:	2200      	movs	r2, #0
 8002a54:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a56:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a5c:	f7fd fc30 	bl	80002c0 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a6a:	e065      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x420>
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a78:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	099b      	lsrs	r3, r3, #6
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	4611      	mov	r1, r2
 8002a84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a88:	653b      	str	r3, [r7, #80]	; 0x50
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	657b      	str	r3, [r7, #84]	; 0x54
 8002a8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a92:	4642      	mov	r2, r8
 8002a94:	464b      	mov	r3, r9
 8002a96:	f04f 0000 	mov.w	r0, #0
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	0159      	lsls	r1, r3, #5
 8002aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa4:	0150      	lsls	r0, r2, #5
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4641      	mov	r1, r8
 8002aac:	1a51      	subs	r1, r2, r1
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ac4:	4659      	mov	r1, fp
 8002ac6:	018b      	lsls	r3, r1, #6
 8002ac8:	4651      	mov	r1, sl
 8002aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ace:	4651      	mov	r1, sl
 8002ad0:	018a      	lsls	r2, r1, #6
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	1a54      	subs	r4, r2, r1
 8002ad6:	4659      	mov	r1, fp
 8002ad8:	eb63 0501 	sbc.w	r5, r3, r1
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	00eb      	lsls	r3, r5, #3
 8002ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aea:	00e2      	lsls	r2, r4, #3
 8002aec:	4614      	mov	r4, r2
 8002aee:	461d      	mov	r5, r3
 8002af0:	4643      	mov	r3, r8
 8002af2:	18e3      	adds	r3, r4, r3
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	464b      	mov	r3, r9
 8002af8:	eb45 0303 	adc.w	r3, r5, r3
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	028b      	lsls	r3, r1, #10
 8002b0e:	4621      	mov	r1, r4
 8002b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b14:	4621      	mov	r1, r4
 8002b16:	028a      	lsls	r2, r1, #10
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b20:	2200      	movs	r2, #0
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b24:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b2a:	f7fd fbc9 	bl	80002c0 <__aeabi_uldivmod>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4613      	mov	r3, r2
 8002b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	0f1b      	lsrs	r3, r3, #28
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b56:	e003      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	37b8      	adds	r7, #184	; 0xb8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	00f42400 	.word	0x00f42400

08002b78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e28d      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8083 	beq.w	8002c9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b98:	4b94      	ldr	r3, [pc, #592]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d019      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ba4:	4b91      	ldr	r3, [pc, #580]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bb0:	4b8e      	ldr	r3, [pc, #568]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	4b8b      	ldr	r3, [pc, #556]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d112      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	4b84      	ldr	r3, [pc, #528]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x124>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d157      	bne.n	8002c9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e25a      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x90>
 8002bfa:	4b7c      	ldr	r3, [pc, #496]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7b      	ldr	r2, [pc, #492]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0xcc>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0xb4>
 8002c12:	4b76      	ldr	r3, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a75      	ldr	r2, [pc, #468]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b73      	ldr	r3, [pc, #460]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a72      	ldr	r2, [pc, #456]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0xcc>
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a6e      	ldr	r2, [pc, #440]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6b      	ldr	r2, [pc, #428]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f962 	bl	8000f14 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe f95e 	bl	8000f14 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e21f      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b61      	ldr	r3, [pc, #388]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0xdc>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe f94e 	bl	8000f14 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe f94a 	bl	8000f14 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e20b      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	4b57      	ldr	r3, [pc, #348]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x104>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d06f      	beq.n	8002d8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002caa:	4b50      	ldr	r3, [pc, #320]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d017      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cb6:	4b4d      	ldr	r3, [pc, #308]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d105      	bne.n	8002cce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cce:	4b47      	ldr	r3, [pc, #284]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d11c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cda:	4b44      	ldr	r3, [pc, #272]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_OscConfig+0x186>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e1d3      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4937      	ldr	r1, [pc, #220]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	e03a      	b.n	8002d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1c:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <HAL_RCC_OscConfig+0x278>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe f8f7 	bl	8000f14 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe f8f3 	bl	8000f14 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e1b4      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4925      	ldr	r1, [pc, #148]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x278>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe f8d6 	bl	8000f14 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe f8d2 	bl	8000f14 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e193      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d036      	beq.n	8002e04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_RCC_OscConfig+0x27c>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe f8b6 	bl	8000f14 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe f8b2 	bl	8000f14 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e173      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x274>)
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x234>
 8002dca:	e01b      	b.n	8002e04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_OscConfig+0x27c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fe f89f 	bl	8000f14 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	e00e      	b.n	8002df8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fe f89b 	bl	8000f14 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d907      	bls.n	8002df8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e15c      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	42470000 	.word	0x42470000
 8002df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	4b8a      	ldr	r3, [pc, #552]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ea      	bne.n	8002dda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8097 	beq.w	8002f40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e16:	4b83      	ldr	r3, [pc, #524]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	4b7f      	ldr	r3, [pc, #508]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a7e      	ldr	r2, [pc, #504]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b7c      	ldr	r3, [pc, #496]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b79      	ldr	r3, [pc, #484]	; (8003028 <HAL_RCC_OscConfig+0x4b0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b76      	ldr	r3, [pc, #472]	; (8003028 <HAL_RCC_OscConfig+0x4b0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a75      	ldr	r2, [pc, #468]	; (8003028 <HAL_RCC_OscConfig+0x4b0>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe f85b 	bl	8000f14 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fe f857 	bl	8000f14 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e118      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <HAL_RCC_OscConfig+0x4b0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x31e>
 8002e88:	4b66      	ldr	r3, [pc, #408]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a65      	ldr	r2, [pc, #404]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x358>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x340>
 8002e9e:	4b61      	ldr	r3, [pc, #388]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a60      	ldr	r2, [pc, #384]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	4b5e      	ldr	r3, [pc, #376]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a5d      	ldr	r2, [pc, #372]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x358>
 8002eb8:	4b5a      	ldr	r3, [pc, #360]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a59      	ldr	r2, [pc, #356]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	4b57      	ldr	r3, [pc, #348]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a56      	ldr	r2, [pc, #344]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f81c 	bl	8000f14 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe f818 	bl	8000f14 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0d7      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	4b4b      	ldr	r3, [pc, #300]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ee      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x368>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe f806 	bl	8000f14 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe f802 	bl	8000f14 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0c1      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f22:	4b40      	ldr	r3, [pc, #256]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ee      	bne.n	8002f0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	4a3a      	ldr	r2, [pc, #232]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80ad 	beq.w	80030a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d060      	beq.n	8003018 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d145      	bne.n	8002fea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b33      	ldr	r3, [pc, #204]	; (800302c <HAL_RCC_OscConfig+0x4b4>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fd ffd6 	bl	8000f14 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fd ffd2 	bl	8000f14 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e093      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	4b29      	ldr	r3, [pc, #164]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	491b      	ldr	r1, [pc, #108]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x4b4>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fd ffa7 	bl	8000f14 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fd ffa3 	bl	8000f14 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e064      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x452>
 8002fe8:	e05c      	b.n	80030a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_RCC_OscConfig+0x4b4>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fd ff90 	bl	8000f14 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fd ff8c 	bl	8000f14 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e04d      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_OscConfig+0x4ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x480>
 8003016:	e045      	b.n	80030a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e040      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000
 800302c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003030:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <HAL_RCC_OscConfig+0x538>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d030      	beq.n	80030a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d129      	bne.n	80030a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d122      	bne.n	80030a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003066:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003068:	4293      	cmp	r3, r2
 800306a:	d119      	bne.n	80030a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	3b01      	subs	r3, #1
 800307a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d10f      	bne.n	80030a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800

080030b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e042      	b.n	800314c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fe30 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f973 	bl	80033e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800310c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800311c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800312c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b20      	cmp	r3, #32
 8003172:	d175      	bne.n	8003260 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_UART_Transmit+0x2c>
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e06e      	b.n	8003262 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2221      	movs	r2, #33	; 0x21
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003192:	f7fd febf 	bl	8000f14 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	88fa      	ldrh	r2, [r7, #6]
 800319c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	88fa      	ldrh	r2, [r7, #6]
 80031a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ac:	d108      	bne.n	80031c0 <HAL_UART_Transmit+0x6c>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	e003      	b.n	80031c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031c8:	e02e      	b.n	8003228 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f848 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e03a      	b.n	8003262 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10b      	bne.n	800320a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003200:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	3302      	adds	r3, #2
 8003206:	61bb      	str	r3, [r7, #24]
 8003208:	e007      	b.n	800321a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	3301      	adds	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800322c:	b29b      	uxth	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1cb      	bne.n	80031ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	2140      	movs	r1, #64	; 0x40
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f814 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e006      	b.n	8003262 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003260:	2302      	movs	r3, #2
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327a:	e03b      	b.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d037      	beq.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003284:	f7fd fe46 	bl	8000f14 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	6a3a      	ldr	r2, [r7, #32]
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <UART_WaitOnFlagUntilTimeout+0x30>
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e03a      	b.n	8003314 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d023      	beq.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b80      	cmp	r3, #128	; 0x80
 80032b0:	d020      	beq.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b40      	cmp	r3, #64	; 0x40
 80032b6:	d01d      	beq.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d116      	bne.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f81d 	bl	800331c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2208      	movs	r2, #8
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e00f      	b.n	8003314 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	429a      	cmp	r2, r3
 8003310:	d0b4      	beq.n	800327c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800331c:	b480      	push	{r7}
 800331e:	b095      	sub	sp, #84	; 0x54
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003344:	643a      	str	r2, [r7, #64]	; 0x40
 8003346:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800334a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800334c:	e841 2300 	strex	r3, r2, [r1]
 8003350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e5      	bne.n	8003324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3314      	adds	r3, #20
 800335e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	61fb      	str	r3, [r7, #28]
   return(result);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800337e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e5      	bne.n	8003358 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b01      	cmp	r3, #1
 8003392:	d119      	bne.n	80033c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f023 0310 	bic.w	r3, r3, #16
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033b4:	61ba      	str	r2, [r7, #24]
 80033b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6979      	ldr	r1, [r7, #20]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	613b      	str	r3, [r7, #16]
   return(result);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033d6:	bf00      	nop
 80033d8:	3754      	adds	r7, #84	; 0x54
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e8:	b0c0      	sub	sp, #256	; 0x100
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	68d9      	ldr	r1, [r3, #12]
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	ea40 0301 	orr.w	r3, r0, r1
 800340c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800340e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	431a      	orrs	r2, r3
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	431a      	orrs	r2, r3
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800343c:	f021 010c 	bic.w	r1, r1, #12
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800344a:	430b      	orrs	r3, r1
 800344c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800345a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345e:	6999      	ldr	r1, [r3, #24]
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	ea40 0301 	orr.w	r3, r0, r1
 800346a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b8f      	ldr	r3, [pc, #572]	; (80036b0 <UART_SetConfig+0x2cc>)
 8003474:	429a      	cmp	r2, r3
 8003476:	d005      	beq.n	8003484 <UART_SetConfig+0xa0>
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b8d      	ldr	r3, [pc, #564]	; (80036b4 <UART_SetConfig+0x2d0>)
 8003480:	429a      	cmp	r2, r3
 8003482:	d104      	bne.n	800348e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003484:	f7ff f934 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8003488:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800348c:	e003      	b.n	8003496 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800348e:	f7ff f91b 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003492:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	f040 810c 	bne.w	80036bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034b6:	4622      	mov	r2, r4
 80034b8:	462b      	mov	r3, r5
 80034ba:	1891      	adds	r1, r2, r2
 80034bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80034be:	415b      	adcs	r3, r3
 80034c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034c6:	4621      	mov	r1, r4
 80034c8:	eb12 0801 	adds.w	r8, r2, r1
 80034cc:	4629      	mov	r1, r5
 80034ce:	eb43 0901 	adc.w	r9, r3, r1
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e6:	4690      	mov	r8, r2
 80034e8:	4699      	mov	r9, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	eb18 0303 	adds.w	r3, r8, r3
 80034f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034f4:	462b      	mov	r3, r5
 80034f6:	eb49 0303 	adc.w	r3, r9, r3
 80034fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800350a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800350e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003512:	460b      	mov	r3, r1
 8003514:	18db      	adds	r3, r3, r3
 8003516:	653b      	str	r3, [r7, #80]	; 0x50
 8003518:	4613      	mov	r3, r2
 800351a:	eb42 0303 	adc.w	r3, r2, r3
 800351e:	657b      	str	r3, [r7, #84]	; 0x54
 8003520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003524:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003528:	f7fc feca 	bl	80002c0 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <UART_SetConfig+0x2d4>)
 8003532:	fba3 2302 	umull	r2, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	011c      	lsls	r4, r3, #4
 800353a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800353e:	2200      	movs	r2, #0
 8003540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003544:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003548:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	1891      	adds	r1, r2, r2
 8003552:	64b9      	str	r1, [r7, #72]	; 0x48
 8003554:	415b      	adcs	r3, r3
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003558:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800355c:	4641      	mov	r1, r8
 800355e:	eb12 0a01 	adds.w	sl, r2, r1
 8003562:	4649      	mov	r1, r9
 8003564:	eb43 0b01 	adc.w	fp, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003574:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800357c:	4692      	mov	sl, r2
 800357e:	469b      	mov	fp, r3
 8003580:	4643      	mov	r3, r8
 8003582:	eb1a 0303 	adds.w	r3, sl, r3
 8003586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800358a:	464b      	mov	r3, r9
 800358c:	eb4b 0303 	adc.w	r3, fp, r3
 8003590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035a8:	460b      	mov	r3, r1
 80035aa:	18db      	adds	r3, r3, r3
 80035ac:	643b      	str	r3, [r7, #64]	; 0x40
 80035ae:	4613      	mov	r3, r2
 80035b0:	eb42 0303 	adc.w	r3, r2, r3
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
 80035b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035be:	f7fc fe7f 	bl	80002c0 <__aeabi_uldivmod>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <UART_SetConfig+0x2d4>)
 80035ca:	fba3 2301 	umull	r2, r3, r3, r1
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2264      	movs	r2, #100	; 0x64
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	1acb      	subs	r3, r1, r3
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035de:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <UART_SetConfig+0x2d4>)
 80035e0:	fba3 2302 	umull	r2, r3, r3, r2
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035ec:	441c      	add	r4, r3
 80035ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003600:	4642      	mov	r2, r8
 8003602:	464b      	mov	r3, r9
 8003604:	1891      	adds	r1, r2, r2
 8003606:	63b9      	str	r1, [r7, #56]	; 0x38
 8003608:	415b      	adcs	r3, r3
 800360a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800360c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003610:	4641      	mov	r1, r8
 8003612:	1851      	adds	r1, r2, r1
 8003614:	6339      	str	r1, [r7, #48]	; 0x30
 8003616:	4649      	mov	r1, r9
 8003618:	414b      	adcs	r3, r1
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003628:	4659      	mov	r1, fp
 800362a:	00cb      	lsls	r3, r1, #3
 800362c:	4651      	mov	r1, sl
 800362e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003632:	4651      	mov	r1, sl
 8003634:	00ca      	lsls	r2, r1, #3
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	4603      	mov	r3, r0
 800363c:	4642      	mov	r2, r8
 800363e:	189b      	adds	r3, r3, r2
 8003640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003644:	464b      	mov	r3, r9
 8003646:	460a      	mov	r2, r1
 8003648:	eb42 0303 	adc.w	r3, r2, r3
 800364c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800365c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003664:	460b      	mov	r3, r1
 8003666:	18db      	adds	r3, r3, r3
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
 800366a:	4613      	mov	r3, r2
 800366c:	eb42 0303 	adc.w	r3, r2, r3
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003676:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800367a:	f7fc fe21 	bl	80002c0 <__aeabi_uldivmod>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <UART_SetConfig+0x2d4>)
 8003684:	fba3 1302 	umull	r1, r3, r3, r2
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	2164      	movs	r1, #100	; 0x64
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	3332      	adds	r3, #50	; 0x32
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <UART_SetConfig+0x2d4>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	f003 0207 	and.w	r2, r3, #7
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4422      	add	r2, r4
 80036aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036ac:	e106      	b.n	80038bc <UART_SetConfig+0x4d8>
 80036ae:	bf00      	nop
 80036b0:	40011000 	.word	0x40011000
 80036b4:	40011400 	.word	0x40011400
 80036b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c0:	2200      	movs	r2, #0
 80036c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036ce:	4642      	mov	r2, r8
 80036d0:	464b      	mov	r3, r9
 80036d2:	1891      	adds	r1, r2, r2
 80036d4:	6239      	str	r1, [r7, #32]
 80036d6:	415b      	adcs	r3, r3
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036de:	4641      	mov	r1, r8
 80036e0:	1854      	adds	r4, r2, r1
 80036e2:	4649      	mov	r1, r9
 80036e4:	eb43 0501 	adc.w	r5, r3, r1
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	00eb      	lsls	r3, r5, #3
 80036f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f6:	00e2      	lsls	r2, r4, #3
 80036f8:	4614      	mov	r4, r2
 80036fa:	461d      	mov	r5, r3
 80036fc:	4643      	mov	r3, r8
 80036fe:	18e3      	adds	r3, r4, r3
 8003700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003704:	464b      	mov	r3, r9
 8003706:	eb45 0303 	adc.w	r3, r5, r3
 800370a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800370e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800371a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800372a:	4629      	mov	r1, r5
 800372c:	008b      	lsls	r3, r1, #2
 800372e:	4621      	mov	r1, r4
 8003730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003734:	4621      	mov	r1, r4
 8003736:	008a      	lsls	r2, r1, #2
 8003738:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800373c:	f7fc fdc0 	bl	80002c0 <__aeabi_uldivmod>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4b60      	ldr	r3, [pc, #384]	; (80038c8 <UART_SetConfig+0x4e4>)
 8003746:	fba3 2302 	umull	r2, r3, r3, r2
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	011c      	lsls	r4, r3, #4
 800374e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003752:	2200      	movs	r2, #0
 8003754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003758:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800375c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003760:	4642      	mov	r2, r8
 8003762:	464b      	mov	r3, r9
 8003764:	1891      	adds	r1, r2, r2
 8003766:	61b9      	str	r1, [r7, #24]
 8003768:	415b      	adcs	r3, r3
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003770:	4641      	mov	r1, r8
 8003772:	1851      	adds	r1, r2, r1
 8003774:	6139      	str	r1, [r7, #16]
 8003776:	4649      	mov	r1, r9
 8003778:	414b      	adcs	r3, r1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003788:	4659      	mov	r1, fp
 800378a:	00cb      	lsls	r3, r1, #3
 800378c:	4651      	mov	r1, sl
 800378e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003792:	4651      	mov	r1, sl
 8003794:	00ca      	lsls	r2, r1, #3
 8003796:	4610      	mov	r0, r2
 8003798:	4619      	mov	r1, r3
 800379a:	4603      	mov	r3, r0
 800379c:	4642      	mov	r2, r8
 800379e:	189b      	adds	r3, r3, r2
 80037a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037a4:	464b      	mov	r3, r9
 80037a6:	460a      	mov	r2, r1
 80037a8:	eb42 0303 	adc.w	r3, r2, r3
 80037ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037c8:	4649      	mov	r1, r9
 80037ca:	008b      	lsls	r3, r1, #2
 80037cc:	4641      	mov	r1, r8
 80037ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d2:	4641      	mov	r1, r8
 80037d4:	008a      	lsls	r2, r1, #2
 80037d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037da:	f7fc fd71 	bl	80002c0 <__aeabi_uldivmod>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4611      	mov	r1, r2
 80037e4:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <UART_SetConfig+0x4e4>)
 80037e6:	fba3 2301 	umull	r2, r3, r3, r1
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2264      	movs	r2, #100	; 0x64
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	1acb      	subs	r3, r1, r3
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	3332      	adds	r3, #50	; 0x32
 80037f8:	4a33      	ldr	r2, [pc, #204]	; (80038c8 <UART_SetConfig+0x4e4>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003804:	441c      	add	r4, r3
 8003806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800380a:	2200      	movs	r2, #0
 800380c:	673b      	str	r3, [r7, #112]	; 0x70
 800380e:	677a      	str	r2, [r7, #116]	; 0x74
 8003810:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	1891      	adds	r1, r2, r2
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	415b      	adcs	r3, r3
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003824:	4641      	mov	r1, r8
 8003826:	1851      	adds	r1, r2, r1
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	4649      	mov	r1, r9
 800382c:	414b      	adcs	r3, r1
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800383c:	4659      	mov	r1, fp
 800383e:	00cb      	lsls	r3, r1, #3
 8003840:	4651      	mov	r1, sl
 8003842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003846:	4651      	mov	r1, sl
 8003848:	00ca      	lsls	r2, r1, #3
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	4603      	mov	r3, r0
 8003850:	4642      	mov	r2, r8
 8003852:	189b      	adds	r3, r3, r2
 8003854:	66bb      	str	r3, [r7, #104]	; 0x68
 8003856:	464b      	mov	r3, r9
 8003858:	460a      	mov	r2, r1
 800385a:	eb42 0303 	adc.w	r3, r2, r3
 800385e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	663b      	str	r3, [r7, #96]	; 0x60
 800386a:	667a      	str	r2, [r7, #100]	; 0x64
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003878:	4649      	mov	r1, r9
 800387a:	008b      	lsls	r3, r1, #2
 800387c:	4641      	mov	r1, r8
 800387e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003882:	4641      	mov	r1, r8
 8003884:	008a      	lsls	r2, r1, #2
 8003886:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800388a:	f7fc fd19 	bl	80002c0 <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <UART_SetConfig+0x4e4>)
 8003894:	fba3 1302 	umull	r1, r3, r3, r2
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	2164      	movs	r1, #100	; 0x64
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	3332      	adds	r3, #50	; 0x32
 80038a6:	4a08      	ldr	r2, [pc, #32]	; (80038c8 <UART_SetConfig+0x4e4>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	f003 020f 	and.w	r2, r3, #15
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4422      	add	r2, r4
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	bf00      	nop
 80038be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038c2:	46bd      	mov	sp, r7
 80038c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c8:	51eb851f 	.word	0x51eb851f

080038cc <sniprintf>:
 80038cc:	b40c      	push	{r2, r3}
 80038ce:	b530      	push	{r4, r5, lr}
 80038d0:	4b17      	ldr	r3, [pc, #92]	; (8003930 <sniprintf+0x64>)
 80038d2:	1e0c      	subs	r4, r1, #0
 80038d4:	681d      	ldr	r5, [r3, #0]
 80038d6:	b09d      	sub	sp, #116	; 0x74
 80038d8:	da08      	bge.n	80038ec <sniprintf+0x20>
 80038da:	238b      	movs	r3, #139	; 0x8b
 80038dc:	602b      	str	r3, [r5, #0]
 80038de:	f04f 30ff 	mov.w	r0, #4294967295
 80038e2:	b01d      	add	sp, #116	; 0x74
 80038e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038e8:	b002      	add	sp, #8
 80038ea:	4770      	bx	lr
 80038ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80038f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038f4:	bf14      	ite	ne
 80038f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038fa:	4623      	moveq	r3, r4
 80038fc:	9304      	str	r3, [sp, #16]
 80038fe:	9307      	str	r3, [sp, #28]
 8003900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003904:	9002      	str	r0, [sp, #8]
 8003906:	9006      	str	r0, [sp, #24]
 8003908:	f8ad 3016 	strh.w	r3, [sp, #22]
 800390c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800390e:	ab21      	add	r3, sp, #132	; 0x84
 8003910:	a902      	add	r1, sp, #8
 8003912:	4628      	mov	r0, r5
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	f000 f993 	bl	8003c40 <_svfiprintf_r>
 800391a:	1c43      	adds	r3, r0, #1
 800391c:	bfbc      	itt	lt
 800391e:	238b      	movlt	r3, #139	; 0x8b
 8003920:	602b      	strlt	r3, [r5, #0]
 8003922:	2c00      	cmp	r4, #0
 8003924:	d0dd      	beq.n	80038e2 <sniprintf+0x16>
 8003926:	9b02      	ldr	r3, [sp, #8]
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e7d9      	b.n	80038e2 <sniprintf+0x16>
 800392e:	bf00      	nop
 8003930:	20000058 	.word	0x20000058

08003934 <memset>:
 8003934:	4402      	add	r2, r0
 8003936:	4603      	mov	r3, r0
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <memset+0xa>
 800393c:	4770      	bx	lr
 800393e:	f803 1b01 	strb.w	r1, [r3], #1
 8003942:	e7f9      	b.n	8003938 <memset+0x4>

08003944 <__errno>:
 8003944:	4b01      	ldr	r3, [pc, #4]	; (800394c <__errno+0x8>)
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000058 	.word	0x20000058

08003950 <__libc_init_array>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	4d0d      	ldr	r5, [pc, #52]	; (8003988 <__libc_init_array+0x38>)
 8003954:	4c0d      	ldr	r4, [pc, #52]	; (800398c <__libc_init_array+0x3c>)
 8003956:	1b64      	subs	r4, r4, r5
 8003958:	10a4      	asrs	r4, r4, #2
 800395a:	2600      	movs	r6, #0
 800395c:	42a6      	cmp	r6, r4
 800395e:	d109      	bne.n	8003974 <__libc_init_array+0x24>
 8003960:	4d0b      	ldr	r5, [pc, #44]	; (8003990 <__libc_init_array+0x40>)
 8003962:	4c0c      	ldr	r4, [pc, #48]	; (8003994 <__libc_init_array+0x44>)
 8003964:	f000 fc6a 	bl	800423c <_init>
 8003968:	1b64      	subs	r4, r4, r5
 800396a:	10a4      	asrs	r4, r4, #2
 800396c:	2600      	movs	r6, #0
 800396e:	42a6      	cmp	r6, r4
 8003970:	d105      	bne.n	800397e <__libc_init_array+0x2e>
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	f855 3b04 	ldr.w	r3, [r5], #4
 8003978:	4798      	blx	r3
 800397a:	3601      	adds	r6, #1
 800397c:	e7ee      	b.n	800395c <__libc_init_array+0xc>
 800397e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003982:	4798      	blx	r3
 8003984:	3601      	adds	r6, #1
 8003986:	e7f2      	b.n	800396e <__libc_init_array+0x1e>
 8003988:	080042d8 	.word	0x080042d8
 800398c:	080042d8 	.word	0x080042d8
 8003990:	080042d8 	.word	0x080042d8
 8003994:	080042dc 	.word	0x080042dc

08003998 <__retarget_lock_acquire_recursive>:
 8003998:	4770      	bx	lr

0800399a <__retarget_lock_release_recursive>:
 800399a:	4770      	bx	lr

0800399c <_free_r>:
 800399c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800399e:	2900      	cmp	r1, #0
 80039a0:	d044      	beq.n	8003a2c <_free_r+0x90>
 80039a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039a6:	9001      	str	r0, [sp, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f1a1 0404 	sub.w	r4, r1, #4
 80039ae:	bfb8      	it	lt
 80039b0:	18e4      	addlt	r4, r4, r3
 80039b2:	f000 f8df 	bl	8003b74 <__malloc_lock>
 80039b6:	4a1e      	ldr	r2, [pc, #120]	; (8003a30 <_free_r+0x94>)
 80039b8:	9801      	ldr	r0, [sp, #4]
 80039ba:	6813      	ldr	r3, [r2, #0]
 80039bc:	b933      	cbnz	r3, 80039cc <_free_r+0x30>
 80039be:	6063      	str	r3, [r4, #4]
 80039c0:	6014      	str	r4, [r2, #0]
 80039c2:	b003      	add	sp, #12
 80039c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039c8:	f000 b8da 	b.w	8003b80 <__malloc_unlock>
 80039cc:	42a3      	cmp	r3, r4
 80039ce:	d908      	bls.n	80039e2 <_free_r+0x46>
 80039d0:	6825      	ldr	r5, [r4, #0]
 80039d2:	1961      	adds	r1, r4, r5
 80039d4:	428b      	cmp	r3, r1
 80039d6:	bf01      	itttt	eq
 80039d8:	6819      	ldreq	r1, [r3, #0]
 80039da:	685b      	ldreq	r3, [r3, #4]
 80039dc:	1949      	addeq	r1, r1, r5
 80039de:	6021      	streq	r1, [r4, #0]
 80039e0:	e7ed      	b.n	80039be <_free_r+0x22>
 80039e2:	461a      	mov	r2, r3
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	b10b      	cbz	r3, 80039ec <_free_r+0x50>
 80039e8:	42a3      	cmp	r3, r4
 80039ea:	d9fa      	bls.n	80039e2 <_free_r+0x46>
 80039ec:	6811      	ldr	r1, [r2, #0]
 80039ee:	1855      	adds	r5, r2, r1
 80039f0:	42a5      	cmp	r5, r4
 80039f2:	d10b      	bne.n	8003a0c <_free_r+0x70>
 80039f4:	6824      	ldr	r4, [r4, #0]
 80039f6:	4421      	add	r1, r4
 80039f8:	1854      	adds	r4, r2, r1
 80039fa:	42a3      	cmp	r3, r4
 80039fc:	6011      	str	r1, [r2, #0]
 80039fe:	d1e0      	bne.n	80039c2 <_free_r+0x26>
 8003a00:	681c      	ldr	r4, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	6053      	str	r3, [r2, #4]
 8003a06:	440c      	add	r4, r1
 8003a08:	6014      	str	r4, [r2, #0]
 8003a0a:	e7da      	b.n	80039c2 <_free_r+0x26>
 8003a0c:	d902      	bls.n	8003a14 <_free_r+0x78>
 8003a0e:	230c      	movs	r3, #12
 8003a10:	6003      	str	r3, [r0, #0]
 8003a12:	e7d6      	b.n	80039c2 <_free_r+0x26>
 8003a14:	6825      	ldr	r5, [r4, #0]
 8003a16:	1961      	adds	r1, r4, r5
 8003a18:	428b      	cmp	r3, r1
 8003a1a:	bf04      	itt	eq
 8003a1c:	6819      	ldreq	r1, [r3, #0]
 8003a1e:	685b      	ldreq	r3, [r3, #4]
 8003a20:	6063      	str	r3, [r4, #4]
 8003a22:	bf04      	itt	eq
 8003a24:	1949      	addeq	r1, r1, r5
 8003a26:	6021      	streq	r1, [r4, #0]
 8003a28:	6054      	str	r4, [r2, #4]
 8003a2a:	e7ca      	b.n	80039c2 <_free_r+0x26>
 8003a2c:	b003      	add	sp, #12
 8003a2e:	bd30      	pop	{r4, r5, pc}
 8003a30:	2000025c 	.word	0x2000025c

08003a34 <sbrk_aligned>:
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	4e0e      	ldr	r6, [pc, #56]	; (8003a70 <sbrk_aligned+0x3c>)
 8003a38:	460c      	mov	r4, r1
 8003a3a:	6831      	ldr	r1, [r6, #0]
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	b911      	cbnz	r1, 8003a46 <sbrk_aligned+0x12>
 8003a40:	f000 fba6 	bl	8004190 <_sbrk_r>
 8003a44:	6030      	str	r0, [r6, #0]
 8003a46:	4621      	mov	r1, r4
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f000 fba1 	bl	8004190 <_sbrk_r>
 8003a4e:	1c43      	adds	r3, r0, #1
 8003a50:	d00a      	beq.n	8003a68 <sbrk_aligned+0x34>
 8003a52:	1cc4      	adds	r4, r0, #3
 8003a54:	f024 0403 	bic.w	r4, r4, #3
 8003a58:	42a0      	cmp	r0, r4
 8003a5a:	d007      	beq.n	8003a6c <sbrk_aligned+0x38>
 8003a5c:	1a21      	subs	r1, r4, r0
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f000 fb96 	bl	8004190 <_sbrk_r>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d101      	bne.n	8003a6c <sbrk_aligned+0x38>
 8003a68:	f04f 34ff 	mov.w	r4, #4294967295
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	20000260 	.word	0x20000260

08003a74 <_malloc_r>:
 8003a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a78:	1ccd      	adds	r5, r1, #3
 8003a7a:	f025 0503 	bic.w	r5, r5, #3
 8003a7e:	3508      	adds	r5, #8
 8003a80:	2d0c      	cmp	r5, #12
 8003a82:	bf38      	it	cc
 8003a84:	250c      	movcc	r5, #12
 8003a86:	2d00      	cmp	r5, #0
 8003a88:	4607      	mov	r7, r0
 8003a8a:	db01      	blt.n	8003a90 <_malloc_r+0x1c>
 8003a8c:	42a9      	cmp	r1, r5
 8003a8e:	d905      	bls.n	8003a9c <_malloc_r+0x28>
 8003a90:	230c      	movs	r3, #12
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	2600      	movs	r6, #0
 8003a96:	4630      	mov	r0, r6
 8003a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b70 <_malloc_r+0xfc>
 8003aa0:	f000 f868 	bl	8003b74 <__malloc_lock>
 8003aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa8:	461c      	mov	r4, r3
 8003aaa:	bb5c      	cbnz	r4, 8003b04 <_malloc_r+0x90>
 8003aac:	4629      	mov	r1, r5
 8003aae:	4638      	mov	r0, r7
 8003ab0:	f7ff ffc0 	bl	8003a34 <sbrk_aligned>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	d155      	bne.n	8003b66 <_malloc_r+0xf2>
 8003aba:	f8d8 4000 	ldr.w	r4, [r8]
 8003abe:	4626      	mov	r6, r4
 8003ac0:	2e00      	cmp	r6, #0
 8003ac2:	d145      	bne.n	8003b50 <_malloc_r+0xdc>
 8003ac4:	2c00      	cmp	r4, #0
 8003ac6:	d048      	beq.n	8003b5a <_malloc_r+0xe6>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	4631      	mov	r1, r6
 8003acc:	4638      	mov	r0, r7
 8003ace:	eb04 0903 	add.w	r9, r4, r3
 8003ad2:	f000 fb5d 	bl	8004190 <_sbrk_r>
 8003ad6:	4581      	cmp	r9, r0
 8003ad8:	d13f      	bne.n	8003b5a <_malloc_r+0xe6>
 8003ada:	6821      	ldr	r1, [r4, #0]
 8003adc:	1a6d      	subs	r5, r5, r1
 8003ade:	4629      	mov	r1, r5
 8003ae0:	4638      	mov	r0, r7
 8003ae2:	f7ff ffa7 	bl	8003a34 <sbrk_aligned>
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	d037      	beq.n	8003b5a <_malloc_r+0xe6>
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	442b      	add	r3, r5
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	f8d8 3000 	ldr.w	r3, [r8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d038      	beq.n	8003b6a <_malloc_r+0xf6>
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	42a2      	cmp	r2, r4
 8003afc:	d12b      	bne.n	8003b56 <_malloc_r+0xe2>
 8003afe:	2200      	movs	r2, #0
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	e00f      	b.n	8003b24 <_malloc_r+0xb0>
 8003b04:	6822      	ldr	r2, [r4, #0]
 8003b06:	1b52      	subs	r2, r2, r5
 8003b08:	d41f      	bmi.n	8003b4a <_malloc_r+0xd6>
 8003b0a:	2a0b      	cmp	r2, #11
 8003b0c:	d917      	bls.n	8003b3e <_malloc_r+0xca>
 8003b0e:	1961      	adds	r1, r4, r5
 8003b10:	42a3      	cmp	r3, r4
 8003b12:	6025      	str	r5, [r4, #0]
 8003b14:	bf18      	it	ne
 8003b16:	6059      	strne	r1, [r3, #4]
 8003b18:	6863      	ldr	r3, [r4, #4]
 8003b1a:	bf08      	it	eq
 8003b1c:	f8c8 1000 	streq.w	r1, [r8]
 8003b20:	5162      	str	r2, [r4, r5]
 8003b22:	604b      	str	r3, [r1, #4]
 8003b24:	4638      	mov	r0, r7
 8003b26:	f104 060b 	add.w	r6, r4, #11
 8003b2a:	f000 f829 	bl	8003b80 <__malloc_unlock>
 8003b2e:	f026 0607 	bic.w	r6, r6, #7
 8003b32:	1d23      	adds	r3, r4, #4
 8003b34:	1af2      	subs	r2, r6, r3
 8003b36:	d0ae      	beq.n	8003a96 <_malloc_r+0x22>
 8003b38:	1b9b      	subs	r3, r3, r6
 8003b3a:	50a3      	str	r3, [r4, r2]
 8003b3c:	e7ab      	b.n	8003a96 <_malloc_r+0x22>
 8003b3e:	42a3      	cmp	r3, r4
 8003b40:	6862      	ldr	r2, [r4, #4]
 8003b42:	d1dd      	bne.n	8003b00 <_malloc_r+0x8c>
 8003b44:	f8c8 2000 	str.w	r2, [r8]
 8003b48:	e7ec      	b.n	8003b24 <_malloc_r+0xb0>
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	6864      	ldr	r4, [r4, #4]
 8003b4e:	e7ac      	b.n	8003aaa <_malloc_r+0x36>
 8003b50:	4634      	mov	r4, r6
 8003b52:	6876      	ldr	r6, [r6, #4]
 8003b54:	e7b4      	b.n	8003ac0 <_malloc_r+0x4c>
 8003b56:	4613      	mov	r3, r2
 8003b58:	e7cc      	b.n	8003af4 <_malloc_r+0x80>
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	4638      	mov	r0, r7
 8003b60:	f000 f80e 	bl	8003b80 <__malloc_unlock>
 8003b64:	e797      	b.n	8003a96 <_malloc_r+0x22>
 8003b66:	6025      	str	r5, [r4, #0]
 8003b68:	e7dc      	b.n	8003b24 <_malloc_r+0xb0>
 8003b6a:	605b      	str	r3, [r3, #4]
 8003b6c:	deff      	udf	#255	; 0xff
 8003b6e:	bf00      	nop
 8003b70:	2000025c 	.word	0x2000025c

08003b74 <__malloc_lock>:
 8003b74:	4801      	ldr	r0, [pc, #4]	; (8003b7c <__malloc_lock+0x8>)
 8003b76:	f7ff bf0f 	b.w	8003998 <__retarget_lock_acquire_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	20000258 	.word	0x20000258

08003b80 <__malloc_unlock>:
 8003b80:	4801      	ldr	r0, [pc, #4]	; (8003b88 <__malloc_unlock+0x8>)
 8003b82:	f7ff bf0a 	b.w	800399a <__retarget_lock_release_recursive>
 8003b86:	bf00      	nop
 8003b88:	20000258 	.word	0x20000258

08003b8c <__ssputs_r>:
 8003b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b90:	688e      	ldr	r6, [r1, #8]
 8003b92:	461f      	mov	r7, r3
 8003b94:	42be      	cmp	r6, r7
 8003b96:	680b      	ldr	r3, [r1, #0]
 8003b98:	4682      	mov	sl, r0
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	4690      	mov	r8, r2
 8003b9e:	d82c      	bhi.n	8003bfa <__ssputs_r+0x6e>
 8003ba0:	898a      	ldrh	r2, [r1, #12]
 8003ba2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ba6:	d026      	beq.n	8003bf6 <__ssputs_r+0x6a>
 8003ba8:	6965      	ldr	r5, [r4, #20]
 8003baa:	6909      	ldr	r1, [r1, #16]
 8003bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bb0:	eba3 0901 	sub.w	r9, r3, r1
 8003bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bb8:	1c7b      	adds	r3, r7, #1
 8003bba:	444b      	add	r3, r9
 8003bbc:	106d      	asrs	r5, r5, #1
 8003bbe:	429d      	cmp	r5, r3
 8003bc0:	bf38      	it	cc
 8003bc2:	461d      	movcc	r5, r3
 8003bc4:	0553      	lsls	r3, r2, #21
 8003bc6:	d527      	bpl.n	8003c18 <__ssputs_r+0x8c>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	f7ff ff53 	bl	8003a74 <_malloc_r>
 8003bce:	4606      	mov	r6, r0
 8003bd0:	b360      	cbz	r0, 8003c2c <__ssputs_r+0xa0>
 8003bd2:	6921      	ldr	r1, [r4, #16]
 8003bd4:	464a      	mov	r2, r9
 8003bd6:	f000 faeb 	bl	80041b0 <memcpy>
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be4:	81a3      	strh	r3, [r4, #12]
 8003be6:	6126      	str	r6, [r4, #16]
 8003be8:	6165      	str	r5, [r4, #20]
 8003bea:	444e      	add	r6, r9
 8003bec:	eba5 0509 	sub.w	r5, r5, r9
 8003bf0:	6026      	str	r6, [r4, #0]
 8003bf2:	60a5      	str	r5, [r4, #8]
 8003bf4:	463e      	mov	r6, r7
 8003bf6:	42be      	cmp	r6, r7
 8003bf8:	d900      	bls.n	8003bfc <__ssputs_r+0x70>
 8003bfa:	463e      	mov	r6, r7
 8003bfc:	6820      	ldr	r0, [r4, #0]
 8003bfe:	4632      	mov	r2, r6
 8003c00:	4641      	mov	r1, r8
 8003c02:	f000 faab 	bl	800415c <memmove>
 8003c06:	68a3      	ldr	r3, [r4, #8]
 8003c08:	1b9b      	subs	r3, r3, r6
 8003c0a:	60a3      	str	r3, [r4, #8]
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	4433      	add	r3, r6
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	2000      	movs	r0, #0
 8003c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c18:	462a      	mov	r2, r5
 8003c1a:	f000 fad7 	bl	80041cc <_realloc_r>
 8003c1e:	4606      	mov	r6, r0
 8003c20:	2800      	cmp	r0, #0
 8003c22:	d1e0      	bne.n	8003be6 <__ssputs_r+0x5a>
 8003c24:	6921      	ldr	r1, [r4, #16]
 8003c26:	4650      	mov	r0, sl
 8003c28:	f7ff feb8 	bl	800399c <_free_r>
 8003c2c:	230c      	movs	r3, #12
 8003c2e:	f8ca 3000 	str.w	r3, [sl]
 8003c32:	89a3      	ldrh	r3, [r4, #12]
 8003c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c38:	81a3      	strh	r3, [r4, #12]
 8003c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3e:	e7e9      	b.n	8003c14 <__ssputs_r+0x88>

08003c40 <_svfiprintf_r>:
 8003c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c44:	4698      	mov	r8, r3
 8003c46:	898b      	ldrh	r3, [r1, #12]
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	b09d      	sub	sp, #116	; 0x74
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	460d      	mov	r5, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	d50e      	bpl.n	8003c72 <_svfiprintf_r+0x32>
 8003c54:	690b      	ldr	r3, [r1, #16]
 8003c56:	b963      	cbnz	r3, 8003c72 <_svfiprintf_r+0x32>
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	f7ff ff0b 	bl	8003a74 <_malloc_r>
 8003c5e:	6028      	str	r0, [r5, #0]
 8003c60:	6128      	str	r0, [r5, #16]
 8003c62:	b920      	cbnz	r0, 8003c6e <_svfiprintf_r+0x2e>
 8003c64:	230c      	movs	r3, #12
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	e0d0      	b.n	8003e10 <_svfiprintf_r+0x1d0>
 8003c6e:	2340      	movs	r3, #64	; 0x40
 8003c70:	616b      	str	r3, [r5, #20]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9309      	str	r3, [sp, #36]	; 0x24
 8003c76:	2320      	movs	r3, #32
 8003c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c80:	2330      	movs	r3, #48	; 0x30
 8003c82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e28 <_svfiprintf_r+0x1e8>
 8003c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c8a:	f04f 0901 	mov.w	r9, #1
 8003c8e:	4623      	mov	r3, r4
 8003c90:	469a      	mov	sl, r3
 8003c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c96:	b10a      	cbz	r2, 8003c9c <_svfiprintf_r+0x5c>
 8003c98:	2a25      	cmp	r2, #37	; 0x25
 8003c9a:	d1f9      	bne.n	8003c90 <_svfiprintf_r+0x50>
 8003c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003ca0:	d00b      	beq.n	8003cba <_svfiprintf_r+0x7a>
 8003ca2:	465b      	mov	r3, fp
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	4638      	mov	r0, r7
 8003caa:	f7ff ff6f 	bl	8003b8c <__ssputs_r>
 8003cae:	3001      	adds	r0, #1
 8003cb0:	f000 80a9 	beq.w	8003e06 <_svfiprintf_r+0x1c6>
 8003cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cb6:	445a      	add	r2, fp
 8003cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8003cba:	f89a 3000 	ldrb.w	r3, [sl]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80a1 	beq.w	8003e06 <_svfiprintf_r+0x1c6>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cce:	f10a 0a01 	add.w	sl, sl, #1
 8003cd2:	9304      	str	r3, [sp, #16]
 8003cd4:	9307      	str	r3, [sp, #28]
 8003cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cda:	931a      	str	r3, [sp, #104]	; 0x68
 8003cdc:	4654      	mov	r4, sl
 8003cde:	2205      	movs	r2, #5
 8003ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce4:	4850      	ldr	r0, [pc, #320]	; (8003e28 <_svfiprintf_r+0x1e8>)
 8003ce6:	f7fc fa9b 	bl	8000220 <memchr>
 8003cea:	9a04      	ldr	r2, [sp, #16]
 8003cec:	b9d8      	cbnz	r0, 8003d26 <_svfiprintf_r+0xe6>
 8003cee:	06d0      	lsls	r0, r2, #27
 8003cf0:	bf44      	itt	mi
 8003cf2:	2320      	movmi	r3, #32
 8003cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf8:	0711      	lsls	r1, r2, #28
 8003cfa:	bf44      	itt	mi
 8003cfc:	232b      	movmi	r3, #43	; 0x2b
 8003cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d02:	f89a 3000 	ldrb.w	r3, [sl]
 8003d06:	2b2a      	cmp	r3, #42	; 0x2a
 8003d08:	d015      	beq.n	8003d36 <_svfiprintf_r+0xf6>
 8003d0a:	9a07      	ldr	r2, [sp, #28]
 8003d0c:	4654      	mov	r4, sl
 8003d0e:	2000      	movs	r0, #0
 8003d10:	f04f 0c0a 	mov.w	ip, #10
 8003d14:	4621      	mov	r1, r4
 8003d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d1a:	3b30      	subs	r3, #48	; 0x30
 8003d1c:	2b09      	cmp	r3, #9
 8003d1e:	d94d      	bls.n	8003dbc <_svfiprintf_r+0x17c>
 8003d20:	b1b0      	cbz	r0, 8003d50 <_svfiprintf_r+0x110>
 8003d22:	9207      	str	r2, [sp, #28]
 8003d24:	e014      	b.n	8003d50 <_svfiprintf_r+0x110>
 8003d26:	eba0 0308 	sub.w	r3, r0, r8
 8003d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	9304      	str	r3, [sp, #16]
 8003d32:	46a2      	mov	sl, r4
 8003d34:	e7d2      	b.n	8003cdc <_svfiprintf_r+0x9c>
 8003d36:	9b03      	ldr	r3, [sp, #12]
 8003d38:	1d19      	adds	r1, r3, #4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	9103      	str	r1, [sp, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bfbb      	ittet	lt
 8003d42:	425b      	neglt	r3, r3
 8003d44:	f042 0202 	orrlt.w	r2, r2, #2
 8003d48:	9307      	strge	r3, [sp, #28]
 8003d4a:	9307      	strlt	r3, [sp, #28]
 8003d4c:	bfb8      	it	lt
 8003d4e:	9204      	strlt	r2, [sp, #16]
 8003d50:	7823      	ldrb	r3, [r4, #0]
 8003d52:	2b2e      	cmp	r3, #46	; 0x2e
 8003d54:	d10c      	bne.n	8003d70 <_svfiprintf_r+0x130>
 8003d56:	7863      	ldrb	r3, [r4, #1]
 8003d58:	2b2a      	cmp	r3, #42	; 0x2a
 8003d5a:	d134      	bne.n	8003dc6 <_svfiprintf_r+0x186>
 8003d5c:	9b03      	ldr	r3, [sp, #12]
 8003d5e:	1d1a      	adds	r2, r3, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	9203      	str	r2, [sp, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bfb8      	it	lt
 8003d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d6c:	3402      	adds	r4, #2
 8003d6e:	9305      	str	r3, [sp, #20]
 8003d70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e38 <_svfiprintf_r+0x1f8>
 8003d74:	7821      	ldrb	r1, [r4, #0]
 8003d76:	2203      	movs	r2, #3
 8003d78:	4650      	mov	r0, sl
 8003d7a:	f7fc fa51 	bl	8000220 <memchr>
 8003d7e:	b138      	cbz	r0, 8003d90 <_svfiprintf_r+0x150>
 8003d80:	9b04      	ldr	r3, [sp, #16]
 8003d82:	eba0 000a 	sub.w	r0, r0, sl
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	4082      	lsls	r2, r0
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	3401      	adds	r4, #1
 8003d8e:	9304      	str	r3, [sp, #16]
 8003d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d94:	4825      	ldr	r0, [pc, #148]	; (8003e2c <_svfiprintf_r+0x1ec>)
 8003d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d9a:	2206      	movs	r2, #6
 8003d9c:	f7fc fa40 	bl	8000220 <memchr>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d038      	beq.n	8003e16 <_svfiprintf_r+0x1d6>
 8003da4:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <_svfiprintf_r+0x1f0>)
 8003da6:	bb1b      	cbnz	r3, 8003df0 <_svfiprintf_r+0x1b0>
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	3307      	adds	r3, #7
 8003dac:	f023 0307 	bic.w	r3, r3, #7
 8003db0:	3308      	adds	r3, #8
 8003db2:	9303      	str	r3, [sp, #12]
 8003db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db6:	4433      	add	r3, r6
 8003db8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dba:	e768      	b.n	8003c8e <_svfiprintf_r+0x4e>
 8003dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	e7a6      	b.n	8003d14 <_svfiprintf_r+0xd4>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	3401      	adds	r4, #1
 8003dca:	9305      	str	r3, [sp, #20]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f04f 0c0a 	mov.w	ip, #10
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dd8:	3a30      	subs	r2, #48	; 0x30
 8003dda:	2a09      	cmp	r2, #9
 8003ddc:	d903      	bls.n	8003de6 <_svfiprintf_r+0x1a6>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0c6      	beq.n	8003d70 <_svfiprintf_r+0x130>
 8003de2:	9105      	str	r1, [sp, #20]
 8003de4:	e7c4      	b.n	8003d70 <_svfiprintf_r+0x130>
 8003de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dea:	4604      	mov	r4, r0
 8003dec:	2301      	movs	r3, #1
 8003dee:	e7f0      	b.n	8003dd2 <_svfiprintf_r+0x192>
 8003df0:	ab03      	add	r3, sp, #12
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	462a      	mov	r2, r5
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <_svfiprintf_r+0x1f4>)
 8003df8:	a904      	add	r1, sp, #16
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	f3af 8000 	nop.w
 8003e00:	1c42      	adds	r2, r0, #1
 8003e02:	4606      	mov	r6, r0
 8003e04:	d1d6      	bne.n	8003db4 <_svfiprintf_r+0x174>
 8003e06:	89ab      	ldrh	r3, [r5, #12]
 8003e08:	065b      	lsls	r3, r3, #25
 8003e0a:	f53f af2d 	bmi.w	8003c68 <_svfiprintf_r+0x28>
 8003e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e10:	b01d      	add	sp, #116	; 0x74
 8003e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e16:	ab03      	add	r3, sp, #12
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	462a      	mov	r2, r5
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <_svfiprintf_r+0x1f4>)
 8003e1e:	a904      	add	r1, sp, #16
 8003e20:	4638      	mov	r0, r7
 8003e22:	f000 f879 	bl	8003f18 <_printf_i>
 8003e26:	e7eb      	b.n	8003e00 <_svfiprintf_r+0x1c0>
 8003e28:	0800429c 	.word	0x0800429c
 8003e2c:	080042a6 	.word	0x080042a6
 8003e30:	00000000 	.word	0x00000000
 8003e34:	08003b8d 	.word	0x08003b8d
 8003e38:	080042a2 	.word	0x080042a2

08003e3c <_printf_common>:
 8003e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e40:	4616      	mov	r6, r2
 8003e42:	4699      	mov	r9, r3
 8003e44:	688a      	ldr	r2, [r1, #8]
 8003e46:	690b      	ldr	r3, [r1, #16]
 8003e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	bfb8      	it	lt
 8003e50:	4613      	movlt	r3, r2
 8003e52:	6033      	str	r3, [r6, #0]
 8003e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e58:	4607      	mov	r7, r0
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	b10a      	cbz	r2, 8003e62 <_printf_common+0x26>
 8003e5e:	3301      	adds	r3, #1
 8003e60:	6033      	str	r3, [r6, #0]
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	0699      	lsls	r1, r3, #26
 8003e66:	bf42      	ittt	mi
 8003e68:	6833      	ldrmi	r3, [r6, #0]
 8003e6a:	3302      	addmi	r3, #2
 8003e6c:	6033      	strmi	r3, [r6, #0]
 8003e6e:	6825      	ldr	r5, [r4, #0]
 8003e70:	f015 0506 	ands.w	r5, r5, #6
 8003e74:	d106      	bne.n	8003e84 <_printf_common+0x48>
 8003e76:	f104 0a19 	add.w	sl, r4, #25
 8003e7a:	68e3      	ldr	r3, [r4, #12]
 8003e7c:	6832      	ldr	r2, [r6, #0]
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	42ab      	cmp	r3, r5
 8003e82:	dc26      	bgt.n	8003ed2 <_printf_common+0x96>
 8003e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e88:	1e13      	subs	r3, r2, #0
 8003e8a:	6822      	ldr	r2, [r4, #0]
 8003e8c:	bf18      	it	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	0692      	lsls	r2, r2, #26
 8003e92:	d42b      	bmi.n	8003eec <_printf_common+0xb0>
 8003e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e98:	4649      	mov	r1, r9
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	47c0      	blx	r8
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d01e      	beq.n	8003ee0 <_printf_common+0xa4>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	6922      	ldr	r2, [r4, #16]
 8003ea6:	f003 0306 	and.w	r3, r3, #6
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	bf02      	ittt	eq
 8003eae:	68e5      	ldreq	r5, [r4, #12]
 8003eb0:	6833      	ldreq	r3, [r6, #0]
 8003eb2:	1aed      	subeq	r5, r5, r3
 8003eb4:	68a3      	ldr	r3, [r4, #8]
 8003eb6:	bf0c      	ite	eq
 8003eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ebc:	2500      	movne	r5, #0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	bfc4      	itt	gt
 8003ec2:	1a9b      	subgt	r3, r3, r2
 8003ec4:	18ed      	addgt	r5, r5, r3
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	341a      	adds	r4, #26
 8003eca:	42b5      	cmp	r5, r6
 8003ecc:	d11a      	bne.n	8003f04 <_printf_common+0xc8>
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e008      	b.n	8003ee4 <_printf_common+0xa8>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4652      	mov	r2, sl
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	4638      	mov	r0, r7
 8003eda:	47c0      	blx	r8
 8003edc:	3001      	adds	r0, #1
 8003ede:	d103      	bne.n	8003ee8 <_printf_common+0xac>
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee8:	3501      	adds	r5, #1
 8003eea:	e7c6      	b.n	8003e7a <_printf_common+0x3e>
 8003eec:	18e1      	adds	r1, r4, r3
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	2030      	movs	r0, #48	; 0x30
 8003ef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef6:	4422      	add	r2, r4
 8003ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f00:	3302      	adds	r3, #2
 8003f02:	e7c7      	b.n	8003e94 <_printf_common+0x58>
 8003f04:	2301      	movs	r3, #1
 8003f06:	4622      	mov	r2, r4
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	47c0      	blx	r8
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d0e6      	beq.n	8003ee0 <_printf_common+0xa4>
 8003f12:	3601      	adds	r6, #1
 8003f14:	e7d9      	b.n	8003eca <_printf_common+0x8e>
	...

08003f18 <_printf_i>:
 8003f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f1c:	7e0f      	ldrb	r7, [r1, #24]
 8003f1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f20:	2f78      	cmp	r7, #120	; 0x78
 8003f22:	4691      	mov	r9, r2
 8003f24:	4680      	mov	r8, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	469a      	mov	sl, r3
 8003f2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f2e:	d807      	bhi.n	8003f40 <_printf_i+0x28>
 8003f30:	2f62      	cmp	r7, #98	; 0x62
 8003f32:	d80a      	bhi.n	8003f4a <_printf_i+0x32>
 8003f34:	2f00      	cmp	r7, #0
 8003f36:	f000 80d4 	beq.w	80040e2 <_printf_i+0x1ca>
 8003f3a:	2f58      	cmp	r7, #88	; 0x58
 8003f3c:	f000 80c0 	beq.w	80040c0 <_printf_i+0x1a8>
 8003f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f48:	e03a      	b.n	8003fc0 <_printf_i+0xa8>
 8003f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f4e:	2b15      	cmp	r3, #21
 8003f50:	d8f6      	bhi.n	8003f40 <_printf_i+0x28>
 8003f52:	a101      	add	r1, pc, #4	; (adr r1, 8003f58 <_printf_i+0x40>)
 8003f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f58:	08003fb1 	.word	0x08003fb1
 8003f5c:	08003fc5 	.word	0x08003fc5
 8003f60:	08003f41 	.word	0x08003f41
 8003f64:	08003f41 	.word	0x08003f41
 8003f68:	08003f41 	.word	0x08003f41
 8003f6c:	08003f41 	.word	0x08003f41
 8003f70:	08003fc5 	.word	0x08003fc5
 8003f74:	08003f41 	.word	0x08003f41
 8003f78:	08003f41 	.word	0x08003f41
 8003f7c:	08003f41 	.word	0x08003f41
 8003f80:	08003f41 	.word	0x08003f41
 8003f84:	080040c9 	.word	0x080040c9
 8003f88:	08003ff1 	.word	0x08003ff1
 8003f8c:	08004083 	.word	0x08004083
 8003f90:	08003f41 	.word	0x08003f41
 8003f94:	08003f41 	.word	0x08003f41
 8003f98:	080040eb 	.word	0x080040eb
 8003f9c:	08003f41 	.word	0x08003f41
 8003fa0:	08003ff1 	.word	0x08003ff1
 8003fa4:	08003f41 	.word	0x08003f41
 8003fa8:	08003f41 	.word	0x08003f41
 8003fac:	0800408b 	.word	0x0800408b
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	1d1a      	adds	r2, r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	602a      	str	r2, [r5, #0]
 8003fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e09f      	b.n	8004104 <_printf_i+0x1ec>
 8003fc4:	6820      	ldr	r0, [r4, #0]
 8003fc6:	682b      	ldr	r3, [r5, #0]
 8003fc8:	0607      	lsls	r7, r0, #24
 8003fca:	f103 0104 	add.w	r1, r3, #4
 8003fce:	6029      	str	r1, [r5, #0]
 8003fd0:	d501      	bpl.n	8003fd6 <_printf_i+0xbe>
 8003fd2:	681e      	ldr	r6, [r3, #0]
 8003fd4:	e003      	b.n	8003fde <_printf_i+0xc6>
 8003fd6:	0646      	lsls	r6, r0, #25
 8003fd8:	d5fb      	bpl.n	8003fd2 <_printf_i+0xba>
 8003fda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fde:	2e00      	cmp	r6, #0
 8003fe0:	da03      	bge.n	8003fea <_printf_i+0xd2>
 8003fe2:	232d      	movs	r3, #45	; 0x2d
 8003fe4:	4276      	negs	r6, r6
 8003fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fea:	485a      	ldr	r0, [pc, #360]	; (8004154 <_printf_i+0x23c>)
 8003fec:	230a      	movs	r3, #10
 8003fee:	e012      	b.n	8004016 <_printf_i+0xfe>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	1d19      	adds	r1, r3, #4
 8003ff6:	6029      	str	r1, [r5, #0]
 8003ff8:	0605      	lsls	r5, r0, #24
 8003ffa:	d501      	bpl.n	8004000 <_printf_i+0xe8>
 8003ffc:	681e      	ldr	r6, [r3, #0]
 8003ffe:	e002      	b.n	8004006 <_printf_i+0xee>
 8004000:	0641      	lsls	r1, r0, #25
 8004002:	d5fb      	bpl.n	8003ffc <_printf_i+0xe4>
 8004004:	881e      	ldrh	r6, [r3, #0]
 8004006:	4853      	ldr	r0, [pc, #332]	; (8004154 <_printf_i+0x23c>)
 8004008:	2f6f      	cmp	r7, #111	; 0x6f
 800400a:	bf0c      	ite	eq
 800400c:	2308      	moveq	r3, #8
 800400e:	230a      	movne	r3, #10
 8004010:	2100      	movs	r1, #0
 8004012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004016:	6865      	ldr	r5, [r4, #4]
 8004018:	60a5      	str	r5, [r4, #8]
 800401a:	2d00      	cmp	r5, #0
 800401c:	bfa2      	ittt	ge
 800401e:	6821      	ldrge	r1, [r4, #0]
 8004020:	f021 0104 	bicge.w	r1, r1, #4
 8004024:	6021      	strge	r1, [r4, #0]
 8004026:	b90e      	cbnz	r6, 800402c <_printf_i+0x114>
 8004028:	2d00      	cmp	r5, #0
 800402a:	d04b      	beq.n	80040c4 <_printf_i+0x1ac>
 800402c:	4615      	mov	r5, r2
 800402e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004032:	fb03 6711 	mls	r7, r3, r1, r6
 8004036:	5dc7      	ldrb	r7, [r0, r7]
 8004038:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800403c:	4637      	mov	r7, r6
 800403e:	42bb      	cmp	r3, r7
 8004040:	460e      	mov	r6, r1
 8004042:	d9f4      	bls.n	800402e <_printf_i+0x116>
 8004044:	2b08      	cmp	r3, #8
 8004046:	d10b      	bne.n	8004060 <_printf_i+0x148>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	07de      	lsls	r6, r3, #31
 800404c:	d508      	bpl.n	8004060 <_printf_i+0x148>
 800404e:	6923      	ldr	r3, [r4, #16]
 8004050:	6861      	ldr	r1, [r4, #4]
 8004052:	4299      	cmp	r1, r3
 8004054:	bfde      	ittt	le
 8004056:	2330      	movle	r3, #48	; 0x30
 8004058:	f805 3c01 	strble.w	r3, [r5, #-1]
 800405c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004060:	1b52      	subs	r2, r2, r5
 8004062:	6122      	str	r2, [r4, #16]
 8004064:	f8cd a000 	str.w	sl, [sp]
 8004068:	464b      	mov	r3, r9
 800406a:	aa03      	add	r2, sp, #12
 800406c:	4621      	mov	r1, r4
 800406e:	4640      	mov	r0, r8
 8004070:	f7ff fee4 	bl	8003e3c <_printf_common>
 8004074:	3001      	adds	r0, #1
 8004076:	d14a      	bne.n	800410e <_printf_i+0x1f6>
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	b004      	add	sp, #16
 800407e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	f043 0320 	orr.w	r3, r3, #32
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	4833      	ldr	r0, [pc, #204]	; (8004158 <_printf_i+0x240>)
 800408c:	2778      	movs	r7, #120	; 0x78
 800408e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	6829      	ldr	r1, [r5, #0]
 8004096:	061f      	lsls	r7, r3, #24
 8004098:	f851 6b04 	ldr.w	r6, [r1], #4
 800409c:	d402      	bmi.n	80040a4 <_printf_i+0x18c>
 800409e:	065f      	lsls	r7, r3, #25
 80040a0:	bf48      	it	mi
 80040a2:	b2b6      	uxthmi	r6, r6
 80040a4:	07df      	lsls	r7, r3, #31
 80040a6:	bf48      	it	mi
 80040a8:	f043 0320 	orrmi.w	r3, r3, #32
 80040ac:	6029      	str	r1, [r5, #0]
 80040ae:	bf48      	it	mi
 80040b0:	6023      	strmi	r3, [r4, #0]
 80040b2:	b91e      	cbnz	r6, 80040bc <_printf_i+0x1a4>
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	f023 0320 	bic.w	r3, r3, #32
 80040ba:	6023      	str	r3, [r4, #0]
 80040bc:	2310      	movs	r3, #16
 80040be:	e7a7      	b.n	8004010 <_printf_i+0xf8>
 80040c0:	4824      	ldr	r0, [pc, #144]	; (8004154 <_printf_i+0x23c>)
 80040c2:	e7e4      	b.n	800408e <_printf_i+0x176>
 80040c4:	4615      	mov	r5, r2
 80040c6:	e7bd      	b.n	8004044 <_printf_i+0x12c>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	6826      	ldr	r6, [r4, #0]
 80040cc:	6961      	ldr	r1, [r4, #20]
 80040ce:	1d18      	adds	r0, r3, #4
 80040d0:	6028      	str	r0, [r5, #0]
 80040d2:	0635      	lsls	r5, r6, #24
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	d501      	bpl.n	80040dc <_printf_i+0x1c4>
 80040d8:	6019      	str	r1, [r3, #0]
 80040da:	e002      	b.n	80040e2 <_printf_i+0x1ca>
 80040dc:	0670      	lsls	r0, r6, #25
 80040de:	d5fb      	bpl.n	80040d8 <_printf_i+0x1c0>
 80040e0:	8019      	strh	r1, [r3, #0]
 80040e2:	2300      	movs	r3, #0
 80040e4:	6123      	str	r3, [r4, #16]
 80040e6:	4615      	mov	r5, r2
 80040e8:	e7bc      	b.n	8004064 <_printf_i+0x14c>
 80040ea:	682b      	ldr	r3, [r5, #0]
 80040ec:	1d1a      	adds	r2, r3, #4
 80040ee:	602a      	str	r2, [r5, #0]
 80040f0:	681d      	ldr	r5, [r3, #0]
 80040f2:	6862      	ldr	r2, [r4, #4]
 80040f4:	2100      	movs	r1, #0
 80040f6:	4628      	mov	r0, r5
 80040f8:	f7fc f892 	bl	8000220 <memchr>
 80040fc:	b108      	cbz	r0, 8004102 <_printf_i+0x1ea>
 80040fe:	1b40      	subs	r0, r0, r5
 8004100:	6060      	str	r0, [r4, #4]
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	6123      	str	r3, [r4, #16]
 8004106:	2300      	movs	r3, #0
 8004108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410c:	e7aa      	b.n	8004064 <_printf_i+0x14c>
 800410e:	6923      	ldr	r3, [r4, #16]
 8004110:	462a      	mov	r2, r5
 8004112:	4649      	mov	r1, r9
 8004114:	4640      	mov	r0, r8
 8004116:	47d0      	blx	sl
 8004118:	3001      	adds	r0, #1
 800411a:	d0ad      	beq.n	8004078 <_printf_i+0x160>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	079b      	lsls	r3, r3, #30
 8004120:	d413      	bmi.n	800414a <_printf_i+0x232>
 8004122:	68e0      	ldr	r0, [r4, #12]
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	4298      	cmp	r0, r3
 8004128:	bfb8      	it	lt
 800412a:	4618      	movlt	r0, r3
 800412c:	e7a6      	b.n	800407c <_printf_i+0x164>
 800412e:	2301      	movs	r3, #1
 8004130:	4632      	mov	r2, r6
 8004132:	4649      	mov	r1, r9
 8004134:	4640      	mov	r0, r8
 8004136:	47d0      	blx	sl
 8004138:	3001      	adds	r0, #1
 800413a:	d09d      	beq.n	8004078 <_printf_i+0x160>
 800413c:	3501      	adds	r5, #1
 800413e:	68e3      	ldr	r3, [r4, #12]
 8004140:	9903      	ldr	r1, [sp, #12]
 8004142:	1a5b      	subs	r3, r3, r1
 8004144:	42ab      	cmp	r3, r5
 8004146:	dcf2      	bgt.n	800412e <_printf_i+0x216>
 8004148:	e7eb      	b.n	8004122 <_printf_i+0x20a>
 800414a:	2500      	movs	r5, #0
 800414c:	f104 0619 	add.w	r6, r4, #25
 8004150:	e7f5      	b.n	800413e <_printf_i+0x226>
 8004152:	bf00      	nop
 8004154:	080042ad 	.word	0x080042ad
 8004158:	080042be 	.word	0x080042be

0800415c <memmove>:
 800415c:	4288      	cmp	r0, r1
 800415e:	b510      	push	{r4, lr}
 8004160:	eb01 0402 	add.w	r4, r1, r2
 8004164:	d902      	bls.n	800416c <memmove+0x10>
 8004166:	4284      	cmp	r4, r0
 8004168:	4623      	mov	r3, r4
 800416a:	d807      	bhi.n	800417c <memmove+0x20>
 800416c:	1e43      	subs	r3, r0, #1
 800416e:	42a1      	cmp	r1, r4
 8004170:	d008      	beq.n	8004184 <memmove+0x28>
 8004172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800417a:	e7f8      	b.n	800416e <memmove+0x12>
 800417c:	4402      	add	r2, r0
 800417e:	4601      	mov	r1, r0
 8004180:	428a      	cmp	r2, r1
 8004182:	d100      	bne.n	8004186 <memmove+0x2a>
 8004184:	bd10      	pop	{r4, pc}
 8004186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800418a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800418e:	e7f7      	b.n	8004180 <memmove+0x24>

08004190 <_sbrk_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4d06      	ldr	r5, [pc, #24]	; (80041ac <_sbrk_r+0x1c>)
 8004194:	2300      	movs	r3, #0
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	602b      	str	r3, [r5, #0]
 800419c:	f7fc fd70 	bl	8000c80 <_sbrk>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d102      	bne.n	80041aa <_sbrk_r+0x1a>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	b103      	cbz	r3, 80041aa <_sbrk_r+0x1a>
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	20000254 	.word	0x20000254

080041b0 <memcpy>:
 80041b0:	440a      	add	r2, r1
 80041b2:	4291      	cmp	r1, r2
 80041b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041b8:	d100      	bne.n	80041bc <memcpy+0xc>
 80041ba:	4770      	bx	lr
 80041bc:	b510      	push	{r4, lr}
 80041be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c6:	4291      	cmp	r1, r2
 80041c8:	d1f9      	bne.n	80041be <memcpy+0xe>
 80041ca:	bd10      	pop	{r4, pc}

080041cc <_realloc_r>:
 80041cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d0:	4680      	mov	r8, r0
 80041d2:	4614      	mov	r4, r2
 80041d4:	460e      	mov	r6, r1
 80041d6:	b921      	cbnz	r1, 80041e2 <_realloc_r+0x16>
 80041d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041dc:	4611      	mov	r1, r2
 80041de:	f7ff bc49 	b.w	8003a74 <_malloc_r>
 80041e2:	b92a      	cbnz	r2, 80041f0 <_realloc_r+0x24>
 80041e4:	f7ff fbda 	bl	800399c <_free_r>
 80041e8:	4625      	mov	r5, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f0:	f000 f81b 	bl	800422a <_malloc_usable_size_r>
 80041f4:	4284      	cmp	r4, r0
 80041f6:	4607      	mov	r7, r0
 80041f8:	d802      	bhi.n	8004200 <_realloc_r+0x34>
 80041fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041fe:	d812      	bhi.n	8004226 <_realloc_r+0x5a>
 8004200:	4621      	mov	r1, r4
 8004202:	4640      	mov	r0, r8
 8004204:	f7ff fc36 	bl	8003a74 <_malloc_r>
 8004208:	4605      	mov	r5, r0
 800420a:	2800      	cmp	r0, #0
 800420c:	d0ed      	beq.n	80041ea <_realloc_r+0x1e>
 800420e:	42bc      	cmp	r4, r7
 8004210:	4622      	mov	r2, r4
 8004212:	4631      	mov	r1, r6
 8004214:	bf28      	it	cs
 8004216:	463a      	movcs	r2, r7
 8004218:	f7ff ffca 	bl	80041b0 <memcpy>
 800421c:	4631      	mov	r1, r6
 800421e:	4640      	mov	r0, r8
 8004220:	f7ff fbbc 	bl	800399c <_free_r>
 8004224:	e7e1      	b.n	80041ea <_realloc_r+0x1e>
 8004226:	4635      	mov	r5, r6
 8004228:	e7df      	b.n	80041ea <_realloc_r+0x1e>

0800422a <_malloc_usable_size_r>:
 800422a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422e:	1f18      	subs	r0, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	bfbc      	itt	lt
 8004234:	580b      	ldrlt	r3, [r1, r0]
 8004236:	18c0      	addlt	r0, r0, r3
 8004238:	4770      	bx	lr
	...

0800423c <_init>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr

08004248 <_fini>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr
